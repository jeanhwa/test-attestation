
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function (WalletConnectProvider, Web3Modal) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var WalletConnectProvider__default = /*#__PURE__*/_interopDefaultLegacy(WalletConnectProvider);
    var Web3Modal__default = /*#__PURE__*/_interopDefaultLegacy(Web3Modal);

    function noop$2() { }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$2;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$1(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$2,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$2;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /**
     * Converts a non-negative bigint to a hexadecimal string
     * @param a - a non negative bigint
     * @returns hexadecimal representation of the input bigint
     *
     * @throws {RangeError}
     * Thrown if a < 0
     */
    function bigintToHex(a) {
        if (a < 0)
            throw RangeError('a should be a non-negative integer. Negative values are not supported');
        return a.toString(16);
    }
    /**
     * Converts a hexadecimal string to a bigint
     *
     * @param hexStr
     *
     * @returns a bigint
     */
    function hexToBigint(hexStr) {
        return BigInt('0x' + hexStr);
    }

    function ab2str(buf) {
        return String.fromCharCode.apply(null, new Uint8Array(buf));
    }
    function str2ab(str) {
        const buf = new ArrayBuffer(str.length);
        const bufView = new Uint8Array(buf);
        for (let i = 0, strLen = str.length; i < strLen; i++) {
            bufView[i] = str.charCodeAt(i);
        }
        return buf;
    }
    function base64toBase64Url(base64) {
        return base64.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=+$/, "");
        // return base64.split("/").join("_").split("+").join("-").split("=").join(".");
    }
    const errorMsgPipe = (message) => {
        let errorMsg = message;
        if (message.indexOf("User denied") > -1) {
            errorMsg = "Transaction cancelled by user.";
        }
        else {
            if (message.indexOf("Insuffient balance.") > -1) {
                errorMsg = "Insuffient balance.";
            }
            else {
                errorMsg = "Sorry, something is not right. Refresh and try again.";
            }
        }
        return errorMsg;
    };

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule$2(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire$1(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function commonjsRequire$1 () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    var bn$2 = createCommonjsModule$2(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0$3.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
    });

    const version$s = "logger/5.6.0";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    })(ErrorCode || (ErrorCode = {}));
    const HEX = "0123456789abcdef";
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                const value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        let hex = "";
                        for (let i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            let url = "";
            switch (code) {
                case ErrorCode.NUMERIC_FAULT: {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch (fault) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
                case ErrorCode.CALL_EXCEPTION:
                case ErrorCode.INSUFFICIENT_FUNDS:
                case ErrorCode.MISSING_NEW:
                case ErrorCode.NONCE_EXPIRED:
                case ErrorCode.REPLACEMENT_UNDERPRICED:
                case ErrorCode.TRANSACTION_REPLACED:
                case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                    url = code;
                    break;
            }
            if (url) {
                message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
            }
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$s);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
        static from(version) {
            return new Logger(version);
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    var lib_esm$l = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get LogLevel () { return LogLevel; },
        get ErrorCode () { return ErrorCode; },
        Logger: Logger
    });

    const version$r = "bytes/5.6.1";

    const logger$J = new Logger(version$r);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
    }
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$J.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0" + hex;
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger$J.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger$J.throwArgumentError("invalid arrayify value", "value", value);
    }
    function concat$2(items) {
        const objects = items.map(item => arrayify(item));
        const length = objects.reduce((accum, item) => (accum + item.length), 0);
        const result = new Uint8Array(length);
        objects.reduce((offset, object) => {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    function stripZeros(value) {
        let result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        let start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger$J.throwArgumentError("value out of range", "value", arguments[0]);
        }
        const result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    const HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$J.checkSafeUint53(value, "invalid hexlify value");
            let hex = "";
            while (value) {
                hex = HexCharacters[value & 0xf] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
                return ("0x0" + value);
            }
            return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger$J.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes(value)) {
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
                let v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger$J.throwArgumentError("invalid hexlify value", "value", value);
    }
    /*
    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
        if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
            return "0x0" + value.substring(2);
        }
        return value;
    }
    */
    function hexDataLength(data) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            logger$J.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    function hexConcat(items) {
        let result = "0x";
        items.forEach((item) => {
            result += hexlify(item).substring(2);
        });
        return result;
    }
    function hexValue(value) {
        const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
            return "0x0";
        }
        return trimmed;
    }
    function hexStripZeros(value) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        if (!isHexString(value)) {
            logger$J.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        let offset = 0;
        while (offset < value.length && value[offset] === "0") {
            offset++;
        }
        return "0x" + value.substring(offset);
    }
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString(value)) {
            logger$J.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger$J.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    function splitSignature(signature) {
        const result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0,
            yParityAndS: "0x",
            compact: "0x"
        };
        if (isBytesLike(signature)) {
            let bytes = arrayify(signature);
            // Get the r, s and v
            if (bytes.length === 64) {
                // EIP-2098; pull the v from the top bit of s and clear it
                result.v = 27 + (bytes[32] >> 7);
                bytes[32] &= 0x7f;
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
            }
            else if (bytes.length === 65) {
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
                result.v = bytes[64];
            }
            else {
                logger$J.throwArgumentError("invalid signature string", "signature", signature);
            }
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger$J.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                const vs = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs);
                // Set or check the recid
                const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger$J.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs[0] &= 0x7f;
                const s = hexlify(vs);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger$J.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger$J.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else if (result.v === 0 || result.v === 1) {
                    result.recoveryParam = result.v;
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else {
                    const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                    if (result.recoveryParam !== recId) {
                        logger$J.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                    }
                }
            }
            if (result.r == null || !isHexString(result.r)) {
                logger$J.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
                logger$J.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            const vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger$J.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            const _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString(result._vs)) {
                    logger$J.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger$J.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
    }
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat$2([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
        ]));
    }

    var lib_esm$k = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isBytesLike: isBytesLike,
        isBytes: isBytes,
        arrayify: arrayify,
        concat: concat$2,
        stripZeros: stripZeros,
        zeroPad: zeroPad,
        isHexString: isHexString,
        hexlify: hexlify,
        hexDataLength: hexDataLength,
        hexDataSlice: hexDataSlice,
        hexConcat: hexConcat,
        hexValue: hexValue,
        hexStripZeros: hexStripZeros,
        hexZeroPad: hexZeroPad,
        splitSignature: splitSignature,
        joinSignature: joinSignature
    });

    const version$q = "bignumber/5.6.2";

    var BN = bn$2.BN;
    const logger$I = new Logger(version$q);
    const _constructorGuard$4 = {};
    const MAX_SAFE = 0x1fffffffffffff;
    function isBigNumberish(value) {
        return (value != null) && (BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            isHexString(value) ||
            (typeof (value) === "bigint") ||
            isBytes(value));
    }
    // Only warn about passing 10 into radix once
    let _warnedToStringRadix = false;
    class BigNumber {
        constructor(constructorGuard, hex) {
            if (constructorGuard !== _constructorGuard$4) {
                logger$I.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        fromTwos(value) {
            return toBigNumber(toBN(this).fromTwos(value));
        }
        toTwos(value) {
            return toBigNumber(toBN(this).toTwos(value));
        }
        abs() {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        }
        add(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
        }
        sub(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
        }
        div(other) {
            const o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault$1("division-by-zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
        }
        mul(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
        }
        mod(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("division-by-zero", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
        }
        pow(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("negative-power", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
        }
        and(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "and");
            }
            return toBigNumber(toBN(this).and(value));
        }
        or(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "or");
            }
            return toBigNumber(toBN(this).or(value));
        }
        xor(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
        }
        mask(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
        }
        shl(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
        }
        shr(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
        }
        eq(other) {
            return toBN(this).eq(toBN(other));
        }
        lt(other) {
            return toBN(this).lt(toBN(other));
        }
        lte(other) {
            return toBN(this).lte(toBN(other));
        }
        gt(other) {
            return toBN(this).gt(toBN(other));
        }
        gte(other) {
            return toBN(this).gte(toBN(other));
        }
        isNegative() {
            return (this._hex[0] === "-");
        }
        isZero() {
            return toBN(this).isZero();
        }
        toNumber() {
            try {
                return toBN(this).toNumber();
            }
            catch (error) {
                throwFault$1("overflow", "toNumber", this.toString());
            }
            return null;
        }
        toBigInt() {
            try {
                return BigInt(this.toString());
            }
            catch (e) { }
            return logger$I.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
            });
        }
        toString() {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
                if (arguments[0] === 10) {
                    if (!_warnedToStringRadix) {
                        _warnedToStringRadix = true;
                        logger$I.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                    }
                }
                else if (arguments[0] === 16) {
                    logger$I.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
                else {
                    logger$I.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
            }
            return toBN(this).toString(10);
        }
        toHexString() {
            return this._hex;
        }
        toJSON(key) {
            return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard$4, toHex$2(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard$4, toHex$2(new BN(value)));
                }
                return logger$I.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault$1("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault$1("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            const anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if (isBytes(anyValue)) {
                return BigNumber.from(hexlify(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes priority)
                if (anyValue.toHexString) {
                    const hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    let hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger$I.throwArgumentError("invalid BigNumber value", "value", value);
        }
        static isBigNumber(value) {
            return !!(value && value._isBigNumber);
        }
    }
    // Normalize the hex string
    function toHex$2(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex$2(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger$I.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex$2(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex$2(value));
    }
    function toBN(value) {
        const hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new BN("-" + hex.substring(3), 16));
        }
        return new BN(hex.substring(2), 16);
    }
    function throwFault$1(fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger$I.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
    }
    // value should have no prefix
    function _base36To16(value) {
        return (new BN(value, 36)).toString(16);
    }
    // value should have no prefix
    function _base16To36(value) {
        return (new BN(value, 16)).toString(36);
    }

    const logger$H = new Logger(version$q);
    const _constructorGuard$3 = {};
    const Zero$2 = BigNumber.from(0);
    const NegativeOne$2 = BigNumber.from(-1);
    function throwFault(message, fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value !== undefined) {
            params.value = value;
        }
        return logger$H.throwError(message, Logger.errors.NUMERIC_FAULT, params);
    }
    // Constant to pull zeros from for multipliers
    let zeros = "0";
    while (zeros.length < 256) {
        zeros += zeros;
    }
    // Returns a string "1" followed by decimal "0"s
    function getMultiplier(decimals) {
        if (typeof (decimals) !== "number") {
            try {
                decimals = BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
        }
        if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
        }
        return logger$H.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        // Make sure wei is a big number (convert as necessary)
        value = BigNumber.from(value);
        const negative = value.lt(Zero$2);
        if (negative) {
            value = value.mul(NegativeOne$2);
        }
        let fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
        }
        // Strip training 0
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        const whole = value.div(multiplier).toString();
        if (multiplier.length === 1) {
            value = whole;
        }
        else {
            value = whole + "." + fraction;
        }
        if (negative) {
            value = "-" + value;
        }
        return value;
    }
    function parseFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
            logger$H.throwArgumentError("invalid decimal value", "value", value);
        }
        // Is it negative?
        const negative = (value.substring(0, 1) === "-");
        if (negative) {
            value = value.substring(1);
        }
        if (value === ".") {
            logger$H.throwArgumentError("missing value", "value", value);
        }
        // Split it into a whole and fractional part
        const comps = value.split(".");
        if (comps.length > 2) {
            logger$H.throwArgumentError("too many decimal points", "value", value);
        }
        let whole = comps[0], fraction = comps[1];
        if (!whole) {
            whole = "0";
        }
        if (!fraction) {
            fraction = "0";
        }
        // Trim trailing zeros
        while (fraction[fraction.length - 1] === "0") {
            fraction = fraction.substring(0, fraction.length - 1);
        }
        // Check the fraction doesn't exceed our decimals size
        if (fraction.length > multiplier.length - 1) {
            throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        // If decimals is 0, we have an empty string for fraction
        if (fraction === "") {
            fraction = "0";
        }
        // Fully pad the string with zeros to get to wei
        while (fraction.length < multiplier.length - 1) {
            fraction += "0";
        }
        const wholeValue = BigNumber.from(whole);
        const fractionValue = BigNumber.from(fraction);
        let wei = (wholeValue.mul(multiplier)).add(fractionValue);
        if (negative) {
            wei = wei.mul(NegativeOne$2);
        }
        return wei;
    }
    class FixedFormat {
        constructor(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$H.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
        }
        static from(value) {
            if (value instanceof FixedFormat) {
                return value;
            }
            if (typeof (value) === "number") {
                value = `fixed128x${value}`;
            }
            let signed = true;
            let width = 128;
            let decimals = 18;
            if (typeof (value) === "string") {
                if (value === "fixed") ;
                else if (value === "ufixed") {
                    signed = false;
                }
                else {
                    const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    if (!match) {
                        logger$H.throwArgumentError("invalid fixed format", "format", value);
                    }
                    signed = (match[1] !== "u");
                    width = parseInt(match[2]);
                    decimals = parseInt(match[3]);
                }
            }
            else if (value) {
                const check = (key, type, defaultValue) => {
                    if (value[key] == null) {
                        return defaultValue;
                    }
                    if (typeof (value[key]) !== type) {
                        logger$H.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                    }
                    return value[key];
                };
                signed = check("signed", "boolean", signed);
                width = check("width", "number", width);
                decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
                logger$H.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
                logger$H.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat(_constructorGuard$3, signed, width, decimals);
        }
    }
    class FixedNumber {
        constructor(constructorGuard, hex, value, format) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$H.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
        }
        _checkFormat(other) {
            if (this.format.name !== other.format.name) {
                logger$H.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
        }
        addUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
        }
        subUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
        }
        mulUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        }
        divUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        }
        floor() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
                result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
        }
        ceiling() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
                result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
        }
        // @TODO: Support other rounding algorithms
        round(decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // If we are already in range, we're done
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                logger$H.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
                return this;
            }
            const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
            const bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
        }
        isZero() {
            return (this._value === "0.0" || this._value === "0");
        }
        isNegative() {
            return (this._value[0] === "-");
        }
        toString() { return this._value; }
        toHexString(width) {
            if (width == null) {
                return this._hex;
            }
            if (width % 8) {
                logger$H.throwArgumentError("invalid byte width", "width", width);
            }
            const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return hexZeroPad(hex, width / 8);
        }
        toUnsafeFloat() { return parseFloat(this.toString()); }
        toFormat(format) {
            return FixedNumber.fromString(this._value, format);
        }
        static fromValue(value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !isBigNumberish(decimals)) {
                format = decimals;
                decimals = null;
            }
            if (decimals == null) {
                decimals = 0;
            }
            if (format == null) {
                format = "fixed";
            }
            return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        }
        static fromString(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            const numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero$2)) {
                throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            let hex = null;
            if (fixedFormat.signed) {
                hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
                hex = numeric.toHexString();
                hex = hexZeroPad(hex, fixedFormat.width / 8);
            }
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
        }
        static fromBytes(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            if (arrayify(value).length > fixedFormat.width / 8) {
                throw new Error("overflow");
            }
            let numeric = BigNumber.from(value);
            if (fixedFormat.signed) {
                numeric = numeric.fromTwos(fixedFormat.width);
            }
            const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
        }
        static from(value, format) {
            if (typeof (value) === "string") {
                return FixedNumber.fromString(value, format);
            }
            if (isBytes(value)) {
                return FixedNumber.fromBytes(value, format);
            }
            try {
                return FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
                // Allow NUMERIC_FAULT to bubble up
                if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                    throw error;
                }
            }
            return logger$H.throwArgumentError("invalid FixedNumber value", "value", value);
        }
        static isFixedNumber(value) {
            return !!(value && value._isFixedNumber);
        }
    }
    const ONE = FixedNumber.from(1);
    const BUMP = FixedNumber.from("0.5");

    const version$p = "properties/5.6.0";

    var __awaiter$f = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$G = new Logger(version$p);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (let i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    function resolveProperties(object) {
        return __awaiter$f(this, void 0, void 0, function* () {
            const promises = Object.keys(object).map((key) => {
                const value = object[key];
                return Promise.resolve(value).then((v) => ({ key: key, value: v }));
            });
            const results = yield Promise.all(promises);
            return results.reduce((accum, result) => {
                accum[(result.key)] = result.value;
                return accum;
            }, {});
        });
    }
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger$G.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach((key) => {
            if (!properties[key]) {
                logger$G.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    function shallowCopy(object) {
        const result = {};
        for (const key in object) {
            result[key] = object[key];
        }
        return result;
    }
    const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            const keys = Object.keys(object);
            for (let i = 0; i < keys.length; i++) {
                let value = null;
                try {
                    value = object[keys[i]];
                }
                catch (error) {
                    // If accessing a value triggers an error, it is a getter
                    // designed to do so (e.g. Result) and is therefore "frozen"
                    continue;
                }
                if (!_isFrozen(value)) {
                    return false;
                }
            }
            return true;
        }
        return logger$G.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map((item) => deepCopy(item)));
        }
        if (typeof (object) === "object") {
            const result = {};
            for (const key in object) {
                const value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger$G.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    class Description {
        constructor(info) {
            for (const key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
    }

    var lib_esm$j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        defineReadOnly: defineReadOnly,
        getStatic: getStatic,
        resolveProperties: resolveProperties,
        checkProperties: checkProperties,
        shallowCopy: shallowCopy,
        deepCopy: deepCopy,
        Description: Description
    });

    const version$o = "abi/5.6.4";

    const logger$F = new Logger(version$o);
    const _constructorGuard$2 = {};
    let ModifiersBytes = { calldata: true, memory: true, storage: true };
    let ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
                return true;
            }
        }
        else if (type === "address") {
            if (name === "payable") {
                return true;
            }
        }
        else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
                return true;
            }
        }
        if (ModifiersBytes[name] || name === "payable") {
            logger$F.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
    }
    // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    function parseParamType(param, allowIndexed) {
        let originalParam = param;
        function throwError(i) {
            logger$F.throwArgumentError(`unexpected character at position ${i}`, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
            let node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
                node.indexed = false;
            }
            return node;
        }
        let parent = { type: "", name: "", state: { allowType: true } };
        let node = parent;
        for (let i = 0; i < param.length; i++) {
            let c = param[i];
            switch (c) {
                case "(":
                    if (node.state.allowType && node.type === "") {
                        node.type = "tuple";
                    }
                    else if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [newNode(node)];
                    node = node.components[0];
                    break;
                case ")":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ",":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let sibling = newNode(node.parent);
                    //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case " ":
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== "") {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== "") {
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                if (node.indexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            else if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case "[":
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case "]":
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            logger$F.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
            if (!allowIndexed) {
                throwError(originalParam.length - 7);
            }
            if (node.indexed) {
                throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
        }
        else if (checkModifier(node.type, node.name)) {
            node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    function populate(object, params) {
        for (let key in params) {
            defineReadOnly(object, key, params[key]);
        }
    }
    const FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readable with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json"
    });
    const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    class ParamType {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$F.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                });
            }
            populate(this, params);
            let match = this.type.match(paramTypeArray);
            if (match) {
                populate(this, {
                    arrayLength: parseInt(match[2] || "-1"),
                    arrayChildren: ParamType.fromObject({
                        type: match[1],
                        components: this.components
                    }),
                    baseType: "array"
                });
            }
            else {
                populate(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: ((this.components != null) ? "tuple" : this.type)
                });
            }
            this._isParamType = true;
            Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, address bar) indexed baz"
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                let result = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name: (this.name || undefined)
                };
                if (typeof (this.indexed) === "boolean") {
                    result.indexed = this.indexed;
                }
                if (this.components) {
                    result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
                }
                return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.baseType === "array") {
                result += this.arrayChildren.format(format);
                result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
                if (this.baseType === "tuple") {
                    if (format !== FormatTypes.sighash) {
                        result += this.type;
                    }
                    result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== FormatTypes.sighash) {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === FormatTypes.full && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        }
        static from(value, allowIndexed) {
            if (typeof (value) === "string") {
                return ParamType.fromString(value, allowIndexed);
            }
            return ParamType.fromObject(value);
        }
        static fromObject(value) {
            if (ParamType.isParamType(value)) {
                return value;
            }
            return new ParamType(_constructorGuard$2, {
                name: (value.name || null),
                type: verifyType(value.type),
                indexed: ((value.indexed == null) ? null : !!value.indexed),
                components: (value.components ? value.components.map(ParamType.fromObject) : null)
            });
        }
        static fromString(value, allowIndexed) {
            function ParamTypify(node) {
                return ParamType.fromObject({
                    name: node.name,
                    type: node.type,
                    indexed: node.indexed,
                    components: node.components
                });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
            return !!(value != null && value._isParamType);
        }
    }
    function parseParams(value, allowIndex) {
        return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
    }
    class Fragment {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$F.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
        }
        static from(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            if (typeof (value) === "string") {
                return Fragment.fromString(value);
            }
            return Fragment.fromObject(value);
        }
        static fromObject(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            switch (value.type) {
                case "function":
                    return FunctionFragment.fromObject(value);
                case "event":
                    return EventFragment.fromObject(value);
                case "constructor":
                    return ConstructorFragment.fromObject(value);
                case "error":
                    return ErrorFragment.fromObject(value);
                case "fallback":
                case "receive":
                    // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                    return null;
            }
            return logger$F.throwArgumentError("invalid fragment object", "value", value);
        }
        static fromString(value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
                return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
                return FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
                return ConstructorFragment.fromString(value.trim());
            }
            else if (value.split(" ")[0] === "error") {
                return ErrorFragment.fromString(value.substring(5).trim());
            }
            return logger$F.throwArgumentError("unsupported fragment", "value", value);
        }
        static isFragment(value) {
            return !!(value && value._isFragment);
        }
    }
    class EventFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "event ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.anonymous) {
                    result += "anonymous ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
        }
        static fromObject(value) {
            if (EventFragment.isEventFragment(value)) {
                return value;
            }
            if (value.type !== "event") {
                logger$F.throwArgumentError("invalid event object", "value", value);
            }
            const params = {
                name: verifyIdentifier(value.name),
                anonymous: value.anonymous,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                type: "event"
            };
            return new EventFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let match = value.match(regexParen);
            if (!match) {
                logger$F.throwArgumentError("invalid event string", "value", value);
            }
            let anonymous = false;
            match[3].split(" ").forEach((modifier) => {
                switch (modifier.trim()) {
                    case "anonymous":
                        anonymous = true;
                        break;
                    case "":
                        break;
                    default:
                        logger$F.warn("unknown modifier: " + modifier);
                }
            });
            return EventFragment.fromObject({
                name: match[1].trim(),
                anonymous: anonymous,
                inputs: parseParams(match[2], true),
                type: "event"
            });
        }
        static isEventFragment(value) {
            return (value && value._isFragment && value.type === "event");
        }
    }
    function parseGas(value, params) {
        params.gas = null;
        let comps = value.split("@");
        if (comps.length !== 1) {
            if (comps.length > 2) {
                logger$F.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                logger$F.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = BigNumber.from(comps[1]);
            return comps[0];
        }
        return value;
    }
    function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
                case "constant":
                    params.constant = true;
                    break;
                case "payable":
                    params.payable = true;
                    params.stateMutability = "payable";
                    break;
                case "nonpayable":
                    params.payable = false;
                    params.stateMutability = "nonpayable";
                    break;
                case "pure":
                    params.constant = true;
                    params.stateMutability = "pure";
                    break;
                case "view":
                    params.constant = true;
                    params.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + modifier);
            }
        });
    }
    function verifyState(value) {
        let result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
        };
        if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
                if ((!!value.constant) !== result.constant) {
                    logger$F.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
                if ((!!value.payable) !== result.payable) {
                    logger$F.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                }
            }
        }
        else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
                logger$F.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
                result.stateMutability = "view";
            }
            else {
                result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
                logger$F.throwArgumentError("cannot have constant payable function", "value", value);
            }
        }
        else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
        }
        else if (value.type !== "constructor") {
            logger$F.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
    }
    class ConstructorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            if (format === FormatTypes.sighash) {
                logger$F.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
            }
            let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ConstructorFragment.fromString(value);
            }
            return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ConstructorFragment.isConstructorFragment(value)) {
                return value;
            }
            if (value.type !== "constructor") {
                logger$F.throwArgumentError("invalid constructor object", "value", value);
            }
            let state = verifyState(value);
            if (state.constant) {
                logger$F.throwArgumentError("constructor cannot be constant", "value", value);
            }
            const params = {
                name: null,
                type: value.type,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new ConstructorFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "constructor" };
            value = parseGas(value, params);
            let parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
                logger$F.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
            return (value && value._isFragment && value.type === "constructor");
        }
    }
    class FunctionFragment extends ConstructorFragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                    outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "function ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.stateMutability) {
                    if (this.stateMutability !== "nonpayable") {
                        result += (this.stateMutability + " ");
                    }
                }
                else if (this.constant) {
                    result += "view ";
                }
                if (this.outputs && this.outputs.length) {
                    result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
                }
                if (this.gas != null) {
                    result += "@" + this.gas.toString() + " ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return FunctionFragment.fromString(value);
            }
            return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
            if (FunctionFragment.isFunctionFragment(value)) {
                return value;
            }
            if (value.type !== "function") {
                logger$F.throwArgumentError("invalid function object", "value", value);
            }
            let state = verifyState(value);
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                constant: state.constant,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new FunctionFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "function" };
            value = parseGas(value, params);
            let comps = value.split(" returns ");
            if (comps.length > 2) {
                logger$F.throwArgumentError("invalid function string", "value", value);
            }
            let parens = comps[0].match(regexParen);
            if (!parens) {
                logger$F.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
                let returns = comps[1].match(regexParen);
                if (returns[1].trim() != "" || returns[3].trim() != "") {
                    logger$F.throwArgumentError("unexpected tokens", "value", value);
                }
                params.outputs = parseParams(returns[2], false);
            }
            else {
                params.outputs = [];
            }
            return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
            return (value && value._isFragment && value.type === "function");
        }
    }
    //export class StructFragment extends Fragment {
    //}
    function checkForbidden(fragment) {
        const sig = fragment.format();
        if (sig === "Error(string)" || sig === "Panic(uint256)") {
            logger$F.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
        }
        return fragment;
    }
    class ErrorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "error",
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "error ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ErrorFragment.fromString(value);
            }
            return ErrorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ErrorFragment.isErrorFragment(value)) {
                return value;
            }
            if (value.type !== "error") {
                logger$F.throwArgumentError("invalid error object", "value", value);
            }
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
            };
            return checkForbidden(new ErrorFragment(_constructorGuard$2, params));
        }
        static fromString(value) {
            let params = { type: "error" };
            let parens = value.match(regexParen);
            if (!parens) {
                logger$F.throwArgumentError("invalid error signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            return checkForbidden(ErrorFragment.fromObject(params));
        }
        static isErrorFragment(value) {
            return (value && value._isFragment && value.type === "error");
        }
    }
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
    }
    // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
    const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
            logger$F.throwArgumentError(`invalid identifier "${value}"`, "value", value);
        }
        return value;
    }
    const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
        value = value.trim();
        let result = [];
        let accum = "";
        let depth = 0;
        for (let offset = 0; offset < value.length; offset++) {
            let c = value[offset];
            if (c === "," && depth === 0) {
                result.push(accum);
                accum = "";
            }
            else {
                accum += c;
                if (c === "(") {
                    depth++;
                }
                else if (c === ")") {
                    depth--;
                    if (depth === -1) {
                        logger$F.throwArgumentError("unbalanced parenthesis", "value", value);
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }

    const logger$E = new Logger(version$o);
    function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (let key in object) {
                const childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    class Coder {
        constructor(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        _throwError(message, value) {
            logger$E.throwArgumentError(message, this.localName, value);
        }
    }
    class Writer {
        constructor(wordSize) {
            defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
        }
        get data() {
            return hexConcat(this._data);
        }
        get length() { return this._dataLength; }
        _writeData(data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
        }
        appendWriter(writer) {
            return this._writeData(concat$2(writer._data));
        }
        // Arrayish items; padded on the right to wordSize
        writeBytes(value) {
            let bytes = arrayify(value);
            const paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
                bytes = concat$2([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
        }
        _getValue(value) {
            let bytes = arrayify(BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger$E.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = concat$2([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        }
        // BigNumberish items; padded on the left to wordSize
        writeValue(value) {
            return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
            const offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return (value) => {
                this._data[offset] = this._getValue(value);
            };
        }
    }
    class Reader {
        constructor(data, wordSize, coerceFunc, allowLoose) {
            defineReadOnly(this, "_data", arrayify(data));
            defineReadOnly(this, "wordSize", wordSize || 32);
            defineReadOnly(this, "_coerceFunc", coerceFunc);
            defineReadOnly(this, "allowLoose", allowLoose);
            this._offset = 0;
        }
        get data() { return hexlify(this._data); }
        get consumed() { return this._offset; }
        // The default Coerce function
        static coerce(name, value) {
            let match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        }
        coerce(name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        }
        _peekBytes(offset, length, loose) {
            let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                    alignedLength = length;
                }
                else {
                    logger$E.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + alignedLength
                    });
                }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        }
        readBytes(length, loose) {
            let bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        }
        readValue() {
            return BigNumber.from(this.readBytes(this.wordSize));
        }
    }

    var global$1 = (typeof global !== "undefined" ? global :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$n = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config$1 = {};

    function noop$1() {}

    var on = noop$1;
    var addListener = noop$1;
    var once = noop$1;
    var off = noop$1;
    var removeListener = noop$1;
    var removeAllListeners = noop$1;
    var emit = noop$1;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var browser$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$n,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config$1,
      uptime: uptime
    };

    var sha3 = createCommonjsModule$2(function (module) {
    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof browser$1 === 'object' && browser$1.versions && browser$1.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal$1;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    function keccak256$1(data) {
        return '0x' + sha3.keccak_256(arrayify(data));
    }

    var lib_esm$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        keccak256: keccak256$1
    });

    const version$m = "rlp/5.6.1";

    const logger$D = new Logger(version$m);
    function arrayifyInteger(value) {
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        if (!isBytesLike(object)) {
            logger$D.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        const data = Array.prototype.slice.call(arrayify(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode$2(object) {
        return hexlify(_encode(object));
    }
    function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger$D.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            logger$D.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger$D.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$D.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
                logger$D.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: hexlify(data[offset]) };
    }
    function decode$2(data) {
        const bytes = arrayify(data);
        const decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger$D.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }

    var lib_esm$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        encode: encode$2,
        decode: decode$2
    });

    const version$l = "address/5.6.1";

    const logger$C = new Logger(version$l);
    function getChecksumAddress(address) {
        if (!isHexString(address, 20)) {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = arrayify(keccak256$1(expanded));
        for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    const MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    const ibanLookup = {};
    for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    function getAddress(address) {
        let result = null;
        if (typeof (address) !== "string") {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger$C.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger$C.throwArgumentError("bad icap checksum", "address", address);
            }
            result = _base36To16(address.substring(4));
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }
    function isAddress(address) {
        try {
            getAddress(address);
            return true;
        }
        catch (error) { }
        return false;
    }
    function getIcapAddress(address) {
        let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
        while (base36.length < 30) {
            base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        let from = null;
        try {
            from = getAddress(transaction.from);
        }
        catch (error) {
            logger$C.throwArgumentError("missing from address", "transaction", transaction);
        }
        const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
        return getAddress(hexDataSlice(keccak256$1(encode$2([from, nonce])), 12));
    }
    function getCreate2Address(from, salt, initCodeHash) {
        if (hexDataLength(salt) !== 32) {
            logger$C.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if (hexDataLength(initCodeHash) !== 32) {
            logger$C.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress(hexDataSlice(keccak256$1(concat$2(["0xff", getAddress(from), salt, initCodeHash])), 12));
    }

    var lib_esm$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getAddress: getAddress,
        isAddress: isAddress,
        getIcapAddress: getIcapAddress,
        getContractAddress: getContractAddress,
        getCreate2Address: getCreate2Address
    });

    class AddressCoder extends Coder {
        constructor(localName) {
            super("address", "address", localName, false);
        }
        defaultValue() {
            return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, value) {
            try {
                value = getAddress(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
        }
    }

    // Clones the functionality of an existing Coder, but without a localName
    class AnonymousCoder extends Coder {
        constructor(coder) {
            super(coder.name, coder.type, undefined, coder.dynamic);
            this.coder = coder;
        }
        defaultValue() {
            return this.coder.defaultValue();
        }
        encode(writer, value) {
            return this.coder.encode(writer, value);
        }
        decode(reader) {
            return this.coder.decode(reader);
        }
    }

    const logger$B = new Logger(version$o);
    function pack$1(writer, coders, values) {
        let arrayValues = null;
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            let unique = {};
            arrayValues = coders.map((coder) => {
                const name = coder.localName;
                if (!name) {
                    logger$B.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                if (unique[name]) {
                    logger$B.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                unique[name] = true;
                return values[name];
            });
        }
        else {
            logger$B.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
            logger$B.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        let staticWriter = new Writer(writer.wordSize);
        let dynamicWriter = new Writer(writer.wordSize);
        let updateFuncs = [];
        coders.forEach((coder, index) => {
            let value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                let dynamicOffset = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                let updateFunc = staticWriter.writeUpdatableValue();
                updateFuncs.push((baseOffset) => {
                    updateFunc(baseOffset + dynamicOffset);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => { func(staticWriter.length); });
        let length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    function unpack(reader, coders) {
        let values = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
                let offset = reader.readValue();
                let offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            const value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
        }
        return Object.freeze(values);
    }
    class ArrayCoder extends Coder {
        constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            this.coder = coder;
            this.length = length;
        }
        defaultValue() {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            const defaultChild = this.coder.defaultValue();
            const result = [];
            for (let i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        }
        encode(writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger$B.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack$1(writer, coders, value);
        }
        decode(reader) {
            let count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                if (count * 32 > reader._data.length) {
                    logger$B.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                        length: reader._data.length,
                        count: count
                    });
                }
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
                coders.push(new AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        }
    }

    class BooleanCoder extends Coder {
        constructor(localName) {
            super("bool", "bool", localName, false);
        }
        defaultValue() {
            return false;
        }
        encode(writer, value) {
            return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        }
    }

    class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
            super(type, type, localName, true);
        }
        defaultValue() {
            return "0x";
        }
        encode(writer, value) {
            value = arrayify(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        }
        decode(reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
        }
    }
    class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("bytes", localName);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(super.decode(reader)));
        }
    }

    // @TODO: Merge this with bytes
    class FixedBytesCoder extends Coder {
        constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            this.size = size;
        }
        defaultValue() {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        }
        encode(writer, value) {
            let data = arrayify(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
        }
    }

    class NullCoder extends Coder {
        constructor(localName) {
            super("null", "", localName, false);
        }
        defaultValue() {
            return null;
        }
        encode(writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        }
        decode(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        }
    }

    const AddressZero = "0x0000000000000000000000000000000000000000";

    const NegativeOne$1 = ( /*#__PURE__*/BigNumber.from(-1));
    const Zero$1 = ( /*#__PURE__*/BigNumber.from(0));
    const One$1 = ( /*#__PURE__*/BigNumber.from(1));
    const Two = ( /*#__PURE__*/BigNumber.from(2));
    const WeiPerEther = ( /*#__PURE__*/BigNumber.from("1000000000000000000"));
    const MaxUint256$1 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    const MinInt256 = ( /*#__PURE__*/BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
    const MaxInt256 = ( /*#__PURE__*/BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

    const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

    // NFKC (composed)             // (decomposed)
    const EtherSymbol = "\u039e"; // "\uD835\uDF63";

    var index$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddressZero: AddressZero,
        NegativeOne: NegativeOne$1,
        Zero: Zero$1,
        One: One$1,
        Two: Two,
        WeiPerEther: WeiPerEther,
        MaxUint256: MaxUint256$1,
        MinInt256: MinInt256,
        MaxInt256: MaxInt256,
        HashZero: HashZero,
        EtherSymbol: EtherSymbol
    });

    class NumberCoder extends Coder {
        constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            this.size = size;
            this.signed = signed;
        }
        defaultValue() {
            return 0;
        }
        encode(writer, value) {
            let v = BigNumber.from(value);
            // Check bounds are safe for encoding
            let maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
            if (this.signed) {
                let bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        }
        decode(reader) {
            let value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        }
    }

    const version$k = "strings/5.6.1";

    const logger$A = new Logger(version$k);
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    var Utf8ErrorReason;
    (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong representation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return logger$A.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes);
    }
    // Common error handing strategies
    const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
            onError = Utf8ErrorFuncs.error;
        }
        bytes = arrayify(bytes);
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                }
                else {
                    i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
                let nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                    res = null;
                    break;
                }
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
        if (form != UnicodeNormalizationForm.current) {
            logger$A.checkNormalize();
            str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                const c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error("invalid utf-8 string");
                }
                // Surrogate Pair
                const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return arrayify(result);
    }
    function escapeChar(value) {
        const hex = ("0000" + value.toString(16));
        return "\\u" + hex.substring(hex.length - 4);
    }
    function _toEscapedUtf8String(bytes, onError) {
        return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
            if (codePoint < 256) {
                switch (codePoint) {
                    case 8: return "\\b";
                    case 9: return "\\t";
                    case 10: return "\\n";
                    case 13: return "\\r";
                    case 34: return "\\\"";
                    case 92: return "\\\\";
                }
                if (codePoint >= 32 && codePoint < 127) {
                    return String.fromCharCode(codePoint);
                }
            }
            if (codePoint <= 0xffff) {
                return escapeChar(codePoint);
            }
            codePoint -= 0x10000;
            return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
        }).join("") + '"';
    }
    function _toUtf8String(codePoints) {
        return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
        return getUtf8CodePoints(toUtf8Bytes(str, form));
    }

    function formatBytes32String(text) {
        // Get the bytes
        const bytes = toUtf8Bytes(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
        }
        // Zero-pad (implicitly null-terminates)
        return hexlify(concat$2([bytes, HashZero]).slice(0, 32));
    }
    function parseBytes32String(bytes) {
        const data = arrayify(bytes);
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
        }
        // Find the null termination
        let length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return toUtf8String(data.slice(0, length));
    }

    function bytes2(data) {
        if ((data.length % 4) !== 0) {
            throw new Error("bad data");
        }
        let result = [];
        for (let i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
        }
        return result;
    }
    function createTable(data, func) {
        if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
        }
        let lo = 0;
        let result = {};
        data.split(",").forEach((pair) => {
            let comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
        });
        return result;
    }
    function createRangeTable(data) {
        let hi = 0;
        return data.split(",").map((v) => {
            let comps = v.split("-");
            if (comps.length === 1) {
                comps[1] = "0";
            }
            else if (comps[1] === "") {
                comps[1] = "1";
            }
            let lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
        });
    }
    function matchMap(value, ranges) {
        let lo = 0;
        for (let i = 0; i < ranges.length; i++) {
            let range = ranges[i];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
                if (range.e && range.e.indexOf(value - lo) !== -1) {
                    continue;
                }
                return range;
            }
        }
        return null;
    }
    const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    // @TODO: Make this relative...
    const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    const Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 }
    ];
    const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
    function flatten(values) {
        return values.reduce((accum, value) => {
            value.forEach((value) => { accum.push(value); });
            return accum;
        }, []);
    }
    function _nameprepTableA1(codepoint) {
        return !!matchMap(codepoint, Table_A_1_ranges);
    }
    function _nameprepTableB2(codepoint) {
        let range = matchMap(codepoint, Table_B_2_ranges);
        if (range) {
            return [codepoint + range.s];
        }
        let codes = Table_B_2_lut_abs[codepoint];
        if (codes) {
            return codes;
        }
        let shift = Table_B_2_lut_rel[codepoint];
        if (shift) {
            return [codepoint + shift[0]];
        }
        let complex = Table_B_2_complex[codepoint];
        if (complex) {
            return complex;
        }
        return null;
    }
    function _nameprepTableC(codepoint) {
        return !!matchMap(codepoint, Table_C_ranges);
    }
    function nameprep(value) {
        // This allows platforms with incomplete normalize to bypass
        // it for very basic names which the built-in toLowerCase
        // will certainly handle correctly
        if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
        }
        // Get the code points (keeping the current normalization)
        let codes = toUtf8CodePoints(value);
        codes = flatten(codes.map((code) => {
            // Substitute Table B.1 (Maps to Nothing)
            if (Table_B_1_flags.indexOf(code) >= 0) {
                return [];
            }
            if (code >= 0xfe00 && code <= 0xfe0f) {
                return [];
            }
            // Substitute Table B.2 (Case Folding)
            let codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
                return codesTableB2;
            }
            // No Substitution
            return [code];
        }));
        // Normalize using form KC
        codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
        // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
        codes.forEach((code) => {
            if (_nameprepTableC(code)) {
                throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
        });
        // Prohibit Unassigned Code Points (Table A.1)
        codes.forEach((code) => {
            if (_nameprepTableA1(code)) {
                throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
        });
        // IDNA extras
        let name = _toUtf8String(codes);
        // IDNA: 4.2.3.1
        if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
            throw new Error("invalid hyphen");
        }
        // IDNA: 4.2.4
        if (name.length > 63) {
            throw new Error("too long");
        }
        return name;
    }

    var lib_esm$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _toEscapedUtf8String: _toEscapedUtf8String,
        toUtf8Bytes: toUtf8Bytes,
        toUtf8CodePoints: toUtf8CodePoints,
        toUtf8String: toUtf8String,
        Utf8ErrorFuncs: Utf8ErrorFuncs,
        get Utf8ErrorReason () { return Utf8ErrorReason; },
        get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
        formatBytes32String: formatBytes32String,
        parseBytes32String: parseBytes32String,
        nameprep: nameprep
    });

    class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("string", localName);
        }
        defaultValue() {
            return "";
        }
        encode(writer, value) {
            return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
            return toUtf8String(super.decode(reader));
        }
    }

    class TupleCoder extends Coder {
        constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            this.coders = coders;
        }
        defaultValue() {
            const values = [];
            this.coders.forEach((coder) => {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            const uniqueNames = this.coders.reduce((accum, coder) => {
                const name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach((coder, index) => {
                let name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        }
        encode(writer, value) {
            return pack$1(writer, this.coders, value);
        }
        decode(reader) {
            return reader.coerce(this.name, unpack(reader, this.coders));
        }
    }

    const logger$z = new Logger(version$o);
    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    class AbiCoder {
        constructor(coerceFunc) {
            defineReadOnly(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
            switch (param.baseType) {
                case "address":
                    return new AddressCoder(param.name);
                case "bool":
                    return new BooleanCoder(param.name);
                case "string":
                    return new StringCoder(param.name);
                case "bytes":
                    return new BytesCoder(param.name);
                case "array":
                    return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new TupleCoder((param.components || []).map((component) => {
                        return this._getCoder(component);
                    }), param.name);
                case "":
                    return new NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
                let size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger$z.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                let size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger$z.throwArgumentError("invalid bytes length", "param", param);
                }
                return new FixedBytesCoder(size, param.name);
            }
            return logger$z.throwArgumentError("invalid type", "type", param.type);
        }
        _getWordSize() { return 32; }
        _getReader(data, allowLoose) {
            return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        }
        _getWriter() {
            return new Writer(this._getWordSize());
        }
        getDefaultValue(types) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.defaultValue();
        }
        encode(types, values) {
            if (types.length !== values.length) {
                logger$z.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = (new TupleCoder(coders, "_"));
            const writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        }
        decode(types, data, loose) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.decode(this._getReader(arrayify(data), loose));
        }
    }
    const defaultAbiCoder = new AbiCoder();

    function id(text) {
        return keccak256$1(toUtf8Bytes(text));
    }

    const version$j = "hash/5.6.1";

    const logger$y = new Logger(version$j);
    const Zeros$1 = new Uint8Array(32);
    Zeros$1.fill(0);
    const Partition = new RegExp("^((.*)\\.)?([^.]+)$");
    function isValidName(name) {
        try {
            const comps = name.split(".");
            for (let i = 0; i < comps.length; i++) {
                if (nameprep(comps[i]).length === 0) {
                    throw new Error("empty");
                }
            }
            return true;
        }
        catch (error) { }
        return false;
    }
    function namehash(name) {
        /* istanbul ignore if */
        if (typeof (name) !== "string") {
            logger$y.throwArgumentError("invalid ENS name; not a string", "name", name);
        }
        let current = name;
        let result = Zeros$1;
        while (current.length) {
            const partition = current.match(Partition);
            if (partition == null || partition[2] === "") {
                logger$y.throwArgumentError("invalid ENS address; missing component", "name", name);
            }
            const label = toUtf8Bytes(nameprep(partition[3]));
            result = keccak256$1(concat$2([result, keccak256$1(label)]));
            current = partition[2] || "";
        }
        return hexlify(result);
    }
    function dnsEncode(name) {
        return hexlify(concat$2(name.split(".").map((comp) => {
            // We jam in an _ prefix to fill in with the length later
            // Note: Nameprep throws if the component is over 63 bytes
            const bytes = toUtf8Bytes("_" + nameprep(comp));
            bytes[0] = bytes.length - 1;
            return bytes;
        }))) + "00";
    }

    const messagePrefix = "\x19Ethereum Signed Message:\n";
    function hashMessage(message) {
        if (typeof (message) === "string") {
            message = toUtf8Bytes(message);
        }
        return keccak256$1(concat$2([
            toUtf8Bytes(messagePrefix),
            toUtf8Bytes(String(message.length)),
            message
        ]));
    }

    var __awaiter$e = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$x = new Logger(version$j);
    const padding = new Uint8Array(32);
    padding.fill(0);
    const NegativeOne = BigNumber.from(-1);
    const Zero = BigNumber.from(0);
    const One = BigNumber.from(1);
    const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        const bytes = arrayify(value);
        const padOffset = bytes.length % 32;
        if (padOffset) {
            return hexConcat([bytes, padding.slice(padOffset)]);
        }
        return hexlify(bytes);
    }
    const hexTrue = hexZeroPad(One.toHexString(), 32);
    const hexFalse = hexZeroPad(Zero.toHexString(), 32);
    const domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    const domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            if (typeof (value) !== "string") {
                logger$x.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
            }
            return value;
        };
    }
    const domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
            try {
                return BigNumber.from(value).toString();
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
        },
        verifyingContract: function (value) {
            try {
                return getAddress(value).toLowerCase();
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
        },
        salt: function (value) {
            try {
                const bytes = arrayify(value);
                if (bytes.length !== 32) {
                    throw new Error("bad length");
                }
                return hexlify(bytes);
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            const match = type.match(/^(u?)int(\d*)$/);
            if (match) {
                const signed = (match[1] === "");
                const width = parseInt(match[2] || "256");
                if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                    logger$x.throwArgumentError("invalid numeric width", "type", type);
                }
                const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);
                const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
                return function (value) {
                    const v = BigNumber.from(value);
                    if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                        logger$x.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                    }
                    return hexZeroPad(v.toTwos(256).toHexString(), 32);
                };
            }
        }
        // bytesXX
        {
            const match = type.match(/^bytes(\d+)$/);
            if (match) {
                const width = parseInt(match[1]);
                if (width === 0 || width > 32 || match[1] !== String(width)) {
                    logger$x.throwArgumentError("invalid bytes width", "type", type);
                }
                return function (value) {
                    const bytes = arrayify(value);
                    if (bytes.length !== width) {
                        logger$x.throwArgumentError(`invalid length for ${type}`, "value", value);
                    }
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return hexZeroPad(getAddress(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return keccak256$1(value);
            };
            case "string": return function (value) {
                return id(value);
            };
        }
        return null;
    }
    function encodeType(name, fields) {
        return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
    }
    class TypedDataEncoder {
        constructor(types) {
            defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
            defineReadOnly(this, "_encoderCache", {});
            defineReadOnly(this, "_types", {});
            // Link struct types to their direct child structs
            const links = {};
            // Link structs to structs which contain them as a child
            const parents = {};
            // Link all subtypes within a given struct
            const subtypes = {};
            Object.keys(types).forEach((type) => {
                links[type] = {};
                parents[type] = [];
                subtypes[type] = {};
            });
            for (const name in types) {
                const uniqueNames = {};
                types[name].forEach((field) => {
                    // Check each field has a unique name
                    if (uniqueNames[field.name]) {
                        logger$x.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                    }
                    uniqueNames[field.name] = true;
                    // Get the base type (drop any array specifiers)
                    const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                    if (baseType === name) {
                        logger$x.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Is this a base encoding type?
                    const encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        return;
                    }
                    if (!parents[baseType]) {
                        logger$x.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Add linkage
                    parents[baseType].push(name);
                    links[name][baseType] = true;
                });
            }
            // Deduce the primary type
            const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));
            if (primaryTypes.length === 0) {
                logger$x.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
                logger$x.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", types);
            }
            defineReadOnly(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
                if (found[type]) {
                    logger$x.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
                }
                found[type] = true;
                Object.keys(links[type]).forEach((child) => {
                    if (!parents[child]) {
                        return;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    Object.keys(found).forEach((subtype) => {
                        subtypes[subtype][child] = true;
                    });
                });
                delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (const name in subtypes) {
                const st = Object.keys(subtypes[name]);
                st.sort();
                this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join("");
            }
        }
        getEncoder(type) {
            let encoder = this._encoderCache[type];
            if (!encoder) {
                encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
        }
        _getEncoder(type) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const subEncoder = this.getEncoder(subtype);
                const length = parseInt(match[3]);
                return (value) => {
                    if (length >= 0 && value.length !== length) {
                        logger$x.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                    }
                    let result = value.map(subEncoder);
                    if (this._types[subtype]) {
                        result = result.map(keccak256$1);
                    }
                    return keccak256$1(hexConcat(result));
                };
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                const encodedType = id(this._types[type]);
                return (value) => {
                    const values = fields.map(({ name, type }) => {
                        const result = this.getEncoder(type)(value[name]);
                        if (this._types[type]) {
                            return keccak256$1(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType);
                    return hexConcat(values);
                };
            }
            return logger$x.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        encodeType(name) {
            const result = this._types[name];
            if (!result) {
                logger$x.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
            }
            return result;
        }
        encodeData(type, value) {
            return this.getEncoder(type)(value);
        }
        hashStruct(name, value) {
            return keccak256$1(this.encodeData(name, value));
        }
        encode(value) {
            return this.encodeData(this.primaryType, value);
        }
        hash(value) {
            return this.hashStruct(this.primaryType, value);
        }
        _visit(type, value, callback) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const length = parseInt(match[3]);
                if (length >= 0 && value.length !== length) {
                    logger$x.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                return value.map((v) => this._visit(subtype, v, callback));
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                return fields.reduce((accum, { name, type }) => {
                    accum[name] = this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            return logger$x.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        visit(value, callback) {
            return this._visit(this.primaryType, value, callback);
        }
        static from(types) {
            return new TypedDataEncoder(types);
        }
        static getPrimaryType(types) {
            return TypedDataEncoder.from(types).primaryType;
        }
        static hashStruct(name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        }
        static hashDomain(domain) {
            const domainFields = [];
            for (const name in domain) {
                const type = domainFieldTypes[name];
                if (!type) {
                    logger$x.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
                }
                domainFields.push({ name, type });
            }
            domainFields.sort((a, b) => {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        }
        static encode(domain, types, value) {
            return hexConcat([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        }
        static hash(domain, types, value) {
            return keccak256$1(TypedDataEncoder.encode(domain, types, value));
        }
        // Replaces all address types with ENS names with their looked up address
        static resolveNames(domain, types, value, resolveName) {
            return __awaiter$e(this, void 0, void 0, function* () {
                // Make a copy to isolate it from the object passed in
                domain = shallowCopy(domain);
                // Look up all ENS names
                const ensCache = {};
                // Do we need to look up the domain's verifyingContract?
                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                    ensCache[domain.verifyingContract] = "0x";
                }
                // We are going to use the encoder to visit all the base values
                const encoder = TypedDataEncoder.from(types);
                // Get a list of all the addresses
                encoder.visit(value, (type, value) => {
                    if (type === "address" && !isHexString(value, 20)) {
                        ensCache[value] = "0x";
                    }
                    return value;
                });
                // Lookup each name
                for (const name in ensCache) {
                    ensCache[name] = yield resolveName(name);
                }
                // Replace the domain verifyingContract if needed
                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                    domain.verifyingContract = ensCache[domain.verifyingContract];
                }
                // Replace all ENS names with their address
                value = encoder.visit(value, (type, value) => {
                    if (type === "address" && ensCache[value]) {
                        return ensCache[value];
                    }
                    return value;
                });
                return { domain, value };
            });
        }
        static getPayload(domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            const domainValues = {};
            const domainTypes = [];
            domainFieldNames.forEach((name) => {
                const value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name, type: domainFieldTypes[name] });
            });
            const encoder = TypedDataEncoder.from(types);
            const typesWithDomain = shallowCopy(types);
            if (typesWithDomain.EIP712Domain) {
                logger$x.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
                typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, (type, value) => {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return hexlify(arrayify(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return BigNumber.from(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            if (typeof (value) !== "string") {
                                logger$x.throwArgumentError(`invalid string`, "value", value);
                            }
                            return value;
                    }
                    return logger$x.throwArgumentError("unsupported type", "type", type);
                })
            };
        }
    }

    var lib_esm$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        id: id,
        dnsEncode: dnsEncode,
        namehash: namehash,
        isValidName: isValidName,
        messagePrefix: messagePrefix,
        hashMessage: hashMessage,
        _TypedDataEncoder: TypedDataEncoder
    });

    const logger$w = new Logger(version$o);
    class LogDescription extends Description {
    }
    class TransactionDescription extends Description {
    }
    class ErrorDescription extends Description {
    }
    class Indexed extends Description {
        static isIndexed(value) {
            return !!(value && value._isIndexed);
        }
    }
    const BuiltinErrors = {
        "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
        "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    function wrapAccessError(property, error) {
        const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
        wrap.error = error;
        return wrap;
    }
    /*
    function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
        params.reduce((accum, param) => {
            if (param.name) {
                if (accum[param.name]) {
                    logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
                }
                accum[param.name] = true;
            }
            return accum;
        }, <{ [ name: string ]: boolean }>{ });
    }
    */
    class Interface {
        constructor(fragments) {
            let abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            defineReadOnly(this, "fragments", abi.map((fragment) => {
                return Fragment.from(fragment);
            }).filter((fragment) => (fragment != null)));
            defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "errors", {});
            defineReadOnly(this, "events", {});
            defineReadOnly(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach((fragment) => {
                let bucket = null;
                switch (fragment.type) {
                    case "constructor":
                        if (this.deploy) {
                            logger$w.warn("duplicate definition - constructor");
                            return;
                        }
                        //checkNames(fragment, "input", fragment.inputs);
                        defineReadOnly(this, "deploy", fragment);
                        return;
                    case "function":
                        //checkNames(fragment, "input", fragment.inputs);
                        //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                        bucket = this.functions;
                        break;
                    case "event":
                        //checkNames(fragment, "input", fragment.inputs);
                        bucket = this.events;
                        break;
                    case "error":
                        bucket = this.errors;
                        break;
                    default:
                        return;
                }
                let signature = fragment.format();
                if (bucket[signature]) {
                    logger$w.warn("duplicate definition - " + signature);
                    return;
                }
                bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                defineReadOnly(this, "deploy", ConstructorFragment.from({
                    payable: false,
                    type: "constructor"
                }));
            }
            defineReadOnly(this, "_isInterface", true);
        }
        format(format) {
            if (!format) {
                format = FormatTypes.full;
            }
            if (format === FormatTypes.sighash) {
                logger$w.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            const abi = this.fragments.map((fragment) => fragment.format(format));
            // We need to re-bundle the JSON fragments a bit
            if (format === FormatTypes.json) {
                return JSON.stringify(abi.map((j) => JSON.parse(j)));
            }
            return abi;
        }
        // Sub-classes can override these to handle other blockchains
        static getAbiCoder() {
            return defaultAbiCoder;
        }
        static getAddress(address) {
            return getAddress(address);
        }
        static getSighash(fragment) {
            return hexDataSlice(id(fragment.format()), 0, 4);
        }
        static getEventTopic(eventFragment) {
            return id(eventFragment.format());
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getFunction(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                for (const name in this.functions) {
                    if (nameOrSignatureOrSighash === this.getSighash(name)) {
                        return this.functions[name];
                    }
                }
                logger$w.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching function", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching functions", "name", name);
                }
                return this.functions[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Find an event definition by any means necessary (unless it is ambiguous)
        getEvent(nameOrSignatureOrTopic) {
            if (isHexString(nameOrSignatureOrTopic)) {
                const topichash = nameOrSignatureOrTopic.toLowerCase();
                for (const name in this.events) {
                    if (topichash === this.getEventTopic(name)) {
                        return this.events[name];
                    }
                }
                logger$w.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                const name = nameOrSignatureOrTopic.trim();
                const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching event", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching events", "name", name);
                }
                return this.events[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getError(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                const getSighash = getStatic(this.constructor, "getSighash");
                for (const name in this.errors) {
                    const error = this.errors[name];
                    if (nameOrSignatureOrSighash === getSighash(error)) {
                        return this.errors[name];
                    }
                }
                logger$w.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching error", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching errors", "name", name);
                }
                return this.errors[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Get the sighash (the bytes4 selector) used by Solidity to identify a function
        getSighash(fragment) {
            if (typeof (fragment) === "string") {
                try {
                    fragment = this.getFunction(fragment);
                }
                catch (error) {
                    try {
                        fragment = this.getError(fragment);
                    }
                    catch (_) {
                        throw error;
                    }
                }
            }
            return getStatic(this.constructor, "getSighash")(fragment);
        }
        // Get the topic (the bytes32 hash) used by Solidity to identify an event
        getEventTopic(eventFragment) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            return getStatic(this.constructor, "getEventTopic")(eventFragment);
        }
        _decodeParams(params, data) {
            return this._abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
            return this._abiCoder.encode(params, values);
        }
        encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        }
        decodeErrorResult(fragment, data) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
                logger$w.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(fragment.inputs, bytes.slice(4));
        }
        encodeErrorResult(fragment, values) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            return hexlify(concat$2([
                this.getSighash(fragment),
                this._encodeParams(fragment.inputs, values || [])
            ]));
        }
        // Decode the data for a function call (e.g. tx.data)
        decodeFunctionData(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                logger$w.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        }
        // Encode the data for a function call (e.g. tx.data)
        encodeFunctionData(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(concat$2([
                this.getSighash(functionFragment),
                this._encodeParams(functionFragment.inputs, values || [])
            ]));
        }
        // Decode the result from a function call (e.g. from eth_call)
        decodeFunctionResult(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            let bytes = arrayify(data);
            let reason = null;
            let message = "";
            let errorArgs = null;
            let errorName = null;
            let errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(functionFragment.outputs, bytes);
                    }
                    catch (error) { }
                    break;
                case 4: {
                    const selector = hexlify(bytes.slice(0, 4));
                    const builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) {
                            reason = errorArgs[0];
                        }
                        if (errorName === "Error") {
                            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                        }
                        else if (errorName === "Panic") {
                            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                        }
                    }
                    else {
                        try {
                            const error = this.getError(selector);
                            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                            errorName = error.name;
                            errorSignature = error.format();
                        }
                        catch (error) { }
                    }
                    break;
                }
            }
            return logger$w.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
                method: functionFragment.format(),
                data: hexlify(data), errorArgs, errorName, errorSignature, reason
            });
        }
        // Encode the result for a function call (e.g. for eth_call)
        encodeFunctionResult(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
        }
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
                logger$w.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: values
                });
            }
            let topics = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            const encodeTopic = (param, value) => {
                if (param.type === "string") {
                    return id(value);
                }
                else if (param.type === "bytes") {
                    return keccak256$1(hexlify(value));
                }
                if (param.type === "bool" && typeof (value) === "boolean") {
                    value = (value ? "0x01" : "0x00");
                }
                if (param.type.match(/^u?int/)) {
                    value = BigNumber.from(value).toHexString();
                }
                // Check addresses are valid
                if (param.type === "address") {
                    this._abiCoder.encode(["address"], [value]);
                }
                return hexZeroPad(hexlify(value), 32);
            };
            values.forEach((value, index) => {
                let param = eventFragment.inputs[index];
                if (!param.indexed) {
                    if (value != null) {
                        logger$w.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    }
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger$w.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        }
        encodeEventLog(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
                logger$w.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach((param, index) => {
                const value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push(id(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push(keccak256$1(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TODO
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(this._abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this._abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
                let topicHash = this.getEventTopic(eventFragment);
                if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                    logger$w.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                }
                topics = topics.slice(1);
            }
            let indexed = [];
            let nonIndexed = [];
            let dynamic = [];
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat$2(topics)) : null;
            let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
            let result = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (resultIndexed == null) {
                        result[index] = new Indexed({ _isIndexed: true, hash: null });
                    }
                    else if (dynamic[index]) {
                        result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                    }
                    else {
                        try {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            result[index] = error;
                        }
                    }
                }
                else {
                    try {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
                // Add the keyword argument if named and safe
                if (param.name && result[param.name] == null) {
                    const value = result[index];
                    // Make error named values throw on access
                    if (value instanceof Error) {
                        Object.defineProperty(result, param.name, {
                            enumerable: true,
                            get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                        });
                    }
                    else {
                        result[param.name] = value;
                    }
                }
            });
            // Make all error indexed values throw on access
            for (let i = 0; i < result.length; i++) {
                const value = result[i];
                if (value instanceof Error) {
                    Object.defineProperty(result, i, {
                        enumerable: true,
                        get: () => { throw wrapAccessError(`index ${i}`, value); }
                    });
                }
            }
            return Object.freeze(result);
        }
        // Given a transaction, find the matching function fragment (if any) and
        // determine all its properties and call parameters
        parseTransaction(tx) {
            let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new TransactionDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                functionFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
                value: BigNumber.from(tx.value || "0"),
            });
        }
        // @TODO
        //parseCallResult(data: BytesLike): ??
        // Given an event log, find the matching event fragment (if any) and
        // determine all its properties and values
        parseLog(log) {
            let fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new LogDescription({
                eventFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                topic: this.getEventTopic(fragment),
                args: this.decodeEventLog(fragment, log.data, log.topics)
            });
        }
        parseError(data) {
            const hexData = hexlify(data);
            let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new ErrorDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
                errorFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
            });
        }
        /*
        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
            if (Interface.isInterface(value)) {
                return value;
            }
            if (typeof(value) === "string") {
                return new Interface(JSON.parse(value));
            }
            return new Interface(value);
        }
        */
        static isInterface(value) {
            return !!(value && value._isInterface);
        }
    }

    var lib_esm$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ConstructorFragment: ConstructorFragment,
        ErrorFragment: ErrorFragment,
        EventFragment: EventFragment,
        Fragment: Fragment,
        FunctionFragment: FunctionFragment,
        ParamType: ParamType,
        FormatTypes: FormatTypes,
        AbiCoder: AbiCoder,
        defaultAbiCoder: defaultAbiCoder,
        Interface: Interface,
        Indexed: Indexed,
        checkResultErrors: checkResultErrors,
        LogDescription: LogDescription,
        TransactionDescription: TransactionDescription
    });

    const version$i = "abstract-provider/5.6.1";

    var __awaiter$d = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$v = new Logger(version$i);
    //export type CallTransactionable = {
    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
    //};
    class ForkEvent extends Description {
        static isForkEvent(value) {
            return !!(value && value._isForkEvent);
        }
    }
    ///////////////////////////////
    // Exported Abstracts
    class Provider {
        constructor() {
            logger$v.checkAbstract(new.target, Provider);
            defineReadOnly(this, "_isProvider", true);
        }
        getFeeData() {
            return __awaiter$d(this, void 0, void 0, function* () {
                const { block, gasPrice } = yield resolveProperties({
                    block: this.getBlock("latest"),
                    gasPrice: this.getGasPrice().catch((error) => {
                        // @TODO: Why is this now failing on Calaveras?
                        //console.log(error);
                        return null;
                    })
                });
                let maxFeePerGas = null, maxPriorityFeePerGas = null;
                if (block && block.baseFeePerGas) {
                    // We may want to compute this more accurately in the future,
                    // using the formula "check if the base fee is correct".
                    // See: https://eips.ethereum.org/EIPS/eip-1559
                    maxPriorityFeePerGas = BigNumber.from("1500000000");
                    maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                }
                return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
            });
        }
        // Alias for "on"
        addListener(eventName, listener) {
            return this.on(eventName, listener);
        }
        // Alias for "off"
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
        static isProvider(value) {
            return !!(value && value._isProvider);
        }
    }

    const version$h = "abstract-signer/5.6.2";

    var __awaiter$c = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$u = new Logger(version$h);
    const allowedTransactionKeys$3 = [
        "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
    ];
    const forwardErrors = [
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
    ];
    class Signer {
        ///////////////////
        // Sub-classes MUST call super
        constructor() {
            logger$u.checkAbstract(new.target, Signer);
            defineReadOnly(this, "_isSigner", true);
        }
        ///////////////////
        // Sub-classes MAY override these
        getBalance(blockTag) {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("getBalance");
                return yield this.provider.getBalance(this.getAddress(), blockTag);
            });
        }
        getTransactionCount(blockTag) {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("getTransactionCount");
                return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
            });
        }
        // Populates "from" if unspecified, and estimates the gas for the transaction
        estimateGas(transaction) {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("estimateGas");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.estimateGas(tx);
            });
        }
        // Populates "from" if unspecified, and calls with the transaction
        call(transaction, blockTag) {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("call");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.call(tx, blockTag);
            });
        }
        // Populates all fields in a transaction, signs it and sends it to the network
        sendTransaction(transaction) {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("sendTransaction");
                const tx = yield this.populateTransaction(transaction);
                const signedTx = yield this.signTransaction(tx);
                return yield this.provider.sendTransaction(signedTx);
            });
        }
        getChainId() {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("getChainId");
                const network = yield this.provider.getNetwork();
                return network.chainId;
            });
        }
        getGasPrice() {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("getGasPrice");
                return yield this.provider.getGasPrice();
            });
        }
        getFeeData() {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("getFeeData");
                return yield this.provider.getFeeData();
            });
        }
        resolveName(name) {
            return __awaiter$c(this, void 0, void 0, function* () {
                this._checkProvider("resolveName");
                return yield this.provider.resolveName(name);
            });
        }
        // Checks a transaction does not contain invalid keys and if
        // no "from" is provided, populates it.
        // - does NOT require a provider
        // - adds "from" is not present
        // - returns a COPY (safe to mutate the result)
        // By default called from: (overriding these prevents it)
        //   - call
        //   - estimateGas
        //   - populateTransaction (and therefor sendTransaction)
        checkTransaction(transaction) {
            for (const key in transaction) {
                if (allowedTransactionKeys$3.indexOf(key) === -1) {
                    logger$u.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                }
            }
            const tx = shallowCopy(transaction);
            if (tx.from == null) {
                tx.from = this.getAddress();
            }
            else {
                // Make sure any provided address matches this signer
                tx.from = Promise.all([
                    Promise.resolve(tx.from),
                    this.getAddress()
                ]).then((result) => {
                    if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                        logger$u.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                    return result[0];
                });
            }
            return tx;
        }
        // Populates ALL keys for a transaction and checks that "from" matches
        // this Signer. Should be used by sendTransaction but NOT by signTransaction.
        // By default called from: (overriding these prevents it)
        //   - sendTransaction
        //
        // Notes:
        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
        populateTransaction(transaction) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                if (tx.to != null) {
                    tx.to = Promise.resolve(tx.to).then((to) => __awaiter$c(this, void 0, void 0, function* () {
                        if (to == null) {
                            return null;
                        }
                        const address = yield this.resolveName(to);
                        if (address == null) {
                            logger$u.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        }
                        return address;
                    }));
                    // Prevent this error from causing an UnhandledPromiseException
                    tx.to.catch((error) => { });
                }
                // Do not allow mixing pre-eip-1559 and eip-1559 properties
                const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                    logger$u.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                }
                else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                    logger$u.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                }
                if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                    // Fully-formed EIP-1559 transaction (skip getFeeData)
                    tx.type = 2;
                }
                else if (tx.type === 0 || tx.type === 1) {
                    // Explicit Legacy or EIP-2930 transaction
                    // Populate missing gasPrice
                    if (tx.gasPrice == null) {
                        tx.gasPrice = this.getGasPrice();
                    }
                }
                else {
                    // We need to get fee data to determine things
                    const feeData = yield this.getFeeData();
                    if (tx.type == null) {
                        // We need to auto-detect the intended type of this transaction...
                        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                            // The network supports EIP-1559!
                            // Upgrade transaction from null to eip-1559
                            tx.type = 2;
                            if (tx.gasPrice != null) {
                                // Using legacy gasPrice property on an eip-1559 network,
                                // so use gasPrice as both fee properties
                                const gasPrice = tx.gasPrice;
                                delete tx.gasPrice;
                                tx.maxFeePerGas = gasPrice;
                                tx.maxPriorityFeePerGas = gasPrice;
                            }
                            else {
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                        }
                        else if (feeData.gasPrice != null) {
                            // Network doesn't support EIP-1559...
                            // ...but they are trying to use EIP-1559 properties
                            if (hasEip1559) {
                                logger$u.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "populateTransaction"
                                });
                            }
                            // Populate missing fee data
                            if (tx.gasPrice == null) {
                                tx.gasPrice = feeData.gasPrice;
                            }
                            // Explicitly set untyped transaction to legacy
                            tx.type = 0;
                        }
                        else {
                            // getFeeData has failed us.
                            logger$u.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "signer.getFeeData"
                            });
                        }
                    }
                    else if (tx.type === 2) {
                        // Explicitly using EIP-1559
                        // Populate missing fee data
                        if (tx.maxFeePerGas == null) {
                            tx.maxFeePerGas = feeData.maxFeePerGas;
                        }
                        if (tx.maxPriorityFeePerGas == null) {
                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                        }
                    }
                }
                if (tx.nonce == null) {
                    tx.nonce = this.getTransactionCount("pending");
                }
                if (tx.gasLimit == null) {
                    tx.gasLimit = this.estimateGas(tx).catch((error) => {
                        if (forwardErrors.indexOf(error.code) >= 0) {
                            throw error;
                        }
                        return logger$u.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                            error: error,
                            tx: tx
                        });
                    });
                }
                if (tx.chainId == null) {
                    tx.chainId = this.getChainId();
                }
                else {
                    tx.chainId = Promise.all([
                        Promise.resolve(tx.chainId),
                        this.getChainId()
                    ]).then((results) => {
                        if (results[1] !== 0 && results[0] !== results[1]) {
                            logger$u.throwArgumentError("chainId address mismatch", "transaction", transaction);
                        }
                        return results[0];
                    });
                }
                return yield resolveProperties(tx);
            });
        }
        ///////////////////
        // Sub-classes SHOULD leave these alone
        _checkProvider(operation) {
            if (!this.provider) {
                logger$u.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: (operation || "_checkProvider")
                });
            }
        }
        static isSigner(value) {
            return !!(value && value._isSigner);
        }
    }
    class VoidSigner extends Signer {
        constructor(address, provider) {
            super();
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "provider", provider || null);
        }
        getAddress() {
            return Promise.resolve(this.address);
        }
        _fail(message, operation) {
            return Promise.resolve().then(() => {
                logger$u.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
        }
        signMessage(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
        }
        signTransaction(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        }
        _signTypedData(domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        }
        connect(provider) {
            return new VoidSigner(this.address, provider);
        }
    }

    var bn$1 = createCommonjsModule$2(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0$3.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
    });

    var minimalisticAssert$1 = assert$b;

    function assert$b(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$b.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var inherits_browser$1 = createCommonjsModule$2(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var inherits_1 = inherits_browser$1;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    var toArray_1 = toArray;

    function toHex$1(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    var toHex_1 = toHex$1;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    var htonl_1 = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    var toHex32_1 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    var zero2_1 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    var zero8_1 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      minimalisticAssert$1(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    var join32_1 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    var split32_1 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    var rotr32_1 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    var rotl32_1 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    var sum32_1 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    var sum32_3_1 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    var sum32_4_1 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    var sum32_5_1 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    var sum64_1 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    var sum64_hi_1 = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    var sum64_lo_1 = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    var sum64_4_hi_1 = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    var sum64_4_lo_1 = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    var sum64_5_hi_1 = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    var sum64_5_lo_1 = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    var rotr64_hi_1 = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var rotr64_lo_1 = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    var shr64_hi_1 = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var shr64_lo_1 = shr64_lo$1;

    var utils$4 = {
    	inherits: inherits_1,
    	toArray: toArray_1,
    	toHex: toHex_1,
    	htonl: htonl_1,
    	toHex32: toHex32_1,
    	zero2: zero2_1,
    	zero8: zero8_1,
    	join32: join32_1,
    	split32: split32_1,
    	rotr32: rotr32_1,
    	rotl32: rotl32_1,
    	sum32: sum32_1,
    	sum32_3: sum32_3_1,
    	sum32_4: sum32_4_1,
    	sum32_5: sum32_5_1,
    	sum64: sum64_1,
    	sum64_hi: sum64_hi_1,
    	sum64_lo: sum64_lo_1,
    	sum64_4_hi: sum64_4_hi_1,
    	sum64_4_lo: sum64_4_lo_1,
    	sum64_5_hi: sum64_5_hi_1,
    	sum64_5_lo: sum64_5_lo_1,
    	rotr64_hi: rotr64_hi_1,
    	rotr64_lo: rotr64_lo_1,
    	shr64_hi: shr64_hi_1,
    	shr64_lo: shr64_lo_1
    };

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    var BlockHash_1 = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$4.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$4.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      minimalisticAssert$1(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var common$1 = {
    	BlockHash: BlockHash_1
    };

    var rotr32 = utils$4.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    var ft_1_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    var ch32_1 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    var maj32_1 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    var p32_1 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    var s0_256_1 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    var s1_256_1 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    var g0_256_1 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    var g1_256_1 = g1_256$1;

    var common = {
    	ft_1: ft_1_1,
    	ch32: ch32_1,
    	maj32: maj32_1,
    	p32: p32_1,
    	s0_256: s0_256_1,
    	s1_256: s1_256_1,
    	g0_256: g0_256_1,
    	g1_256: g1_256_1
    };

    var rotl32$1 = utils$4.rotl32;
    var sum32$2 = utils$4.sum32;
    var sum32_5$1 = utils$4.sum32_5;
    var ft_1 = common.ft_1;
    var BlockHash$3 = common$1.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$4.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$4.toHex32(this.h, 'big');
      else
        return utils$4.split32(this.h, 'big');
    };

    var sum32$1 = utils$4.sum32;
    var sum32_4$1 = utils$4.sum32_4;
    var sum32_5 = utils$4.sum32_5;
    var ch32 = common.ch32;
    var maj32 = common.maj32;
    var s0_256 = common.s0_256;
    var s1_256 = common.s1_256;
    var g0_256 = common.g0_256;
    var g1_256 = common.g1_256;

    var BlockHash$2 = common$1.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$4.inherits(SHA256, BlockHash$2);
    var _256 = SHA256;

    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      minimalisticAssert$1(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$4.toHex32(this.h, 'big');
      else
        return utils$4.split32(this.h, 'big');
    };

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      _256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$4.inherits(SHA224, _256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$4.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$4.split32(this.h.slice(0, 7), 'big');
    };

    var rotr64_hi = utils$4.rotr64_hi;
    var rotr64_lo = utils$4.rotr64_lo;
    var shr64_hi = utils$4.shr64_hi;
    var shr64_lo = utils$4.shr64_lo;
    var sum64 = utils$4.sum64;
    var sum64_hi = utils$4.sum64_hi;
    var sum64_lo = utils$4.sum64_lo;
    var sum64_4_hi = utils$4.sum64_4_hi;
    var sum64_4_lo = utils$4.sum64_4_lo;
    var sum64_5_hi = utils$4.sum64_5_hi;
    var sum64_5_lo = utils$4.sum64_5_lo;

    var BlockHash$1 = common$1.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$4.inherits(SHA512, BlockHash$1);
    var _512 = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      minimalisticAssert$1(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$4.toHex32(this.h, 'big');
      else
        return utils$4.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      _512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$4.inherits(SHA384, _512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$4.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$4.split32(this.h.slice(0, 12), 'big');
    };

    var sha1 = _1;
    var sha224 = _224;
    var sha256$2 = _256;
    var sha384 = _384;
    var sha512$1 = _512;

    var sha = {
    	sha1: sha1,
    	sha224: sha224,
    	sha256: sha256$2,
    	sha384: sha384,
    	sha512: sha512$1
    };

    var rotl32 = utils$4.rotl32;
    var sum32 = utils$4.sum32;
    var sum32_3 = utils$4.sum32_3;
    var sum32_4 = utils$4.sum32_4;
    var BlockHash = common$1.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$4.inherits(RIPEMD160, BlockHash);
    var ripemd160$1 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f$1(j, B, C, D), msg[r$2[j] + start], K(j)),
            s$1[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$4.toHex32(this.h, 'little');
      else
        return utils$4.split32(this.h, 'little');
    };

    function f$1(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r$2 = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s$1 = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var ripemd = {
    	ripemd160: ripemd160$1
    };

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$4.toArray(key, enc));
    }
    var hmac = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      minimalisticAssert$1(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    var hash_1$1 = createCommonjsModule$2(function (module, exports) {
    var hash = exports;

    hash.utils = utils$4;
    hash.common = common$1;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    });

    function createCommonjsModule$1(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var minimalisticAssert = assert$a;

    function assert$a(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$a.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils_1$2 = createCommonjsModule$1(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1$1$1 = createCommonjsModule$1(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert;
    utils.toArray = utils_1$2.toArray;
    utils.zero2 = utils_1$2.zero2;
    utils.toHex = utils_1$2.toHex;
    utils.encode = utils_1$2.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn$1(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });



    var getNAF$1 = utils_1$1$1.getNAF;
    var getJSF$1 = utils_1$1$1.getJSF;
    var assert$1$1 = utils_1$1$1.assert;

    function BaseCurve$1(type, conf) {
      this.type = type;
      this.p = new bn$1(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn$1.red(conf.prime) : bn$1.mont(this.p);

      // Useful for many curves
      this.zero = new bn$1(0).toRed(this.red);
      this.one = new bn$1(1).toRed(this.red);
      this.two = new bn$1(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn$1(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base$1 = BaseCurve$1;

    BaseCurve$1.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve$1.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve$1.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1$1(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF$1(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve$1.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF$1(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$1$1(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve$1.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF$1(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF$1(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF$1(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint$1(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve$1.BasePoint = BasePoint$1;

    BasePoint$1.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint$1.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve$1.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1$1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$1$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$1$1(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint$1.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint$1.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint$1.prototype.encode = function encode(enc, compact) {
      return utils_1$1$1.encode(this._encode(compact), enc);
    };

    BasePoint$1.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint$1.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint$1.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint$1.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint$1.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint$1.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits_browser = createCommonjsModule$1(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });






    var assert$2$1 = utils_1$1$1.assert;

    function ShortCurve$1(conf) {
      base$1.call(this, 'short', conf);

      this.a = new bn$1(conf.a, 16).toRed(this.red);
      this.b = new bn$1(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser(ShortCurve$1, base$1);
    var short_1$1 = ShortCurve$1;

    ShortCurve$1.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn$1(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn$1(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2$1(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn$1(vec.a, 16),
            b: new bn$1(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve$1.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn$1.mont(num);
      var tinv = new bn$1(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn$1(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve$1.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn$1(1);
      var y1 = new bn$1(0);
      var x2 = new bn$1(0);
      var y2 = new bn$1(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve$1.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve$1.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn$1(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve$1.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve$1.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point$3(curve, x, y, isRed) {
      base$1.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn$1(x, 16);
        this.y = new bn$1(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser(Point$3, base$1.BasePoint);

    ShortCurve$1.prototype.point = function point(x, y, isRed) {
      return new Point$3(this, x, y, isRed);
    };

    ShortCurve$1.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point$3.fromJSON(this, obj, red);
    };

    Point$3.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point$3.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point$3.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point$3.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point$3.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point$3.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$3.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$3.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point$3.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point$3.prototype.mul = function mul(k) {
      k = new bn$1(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point$3.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point$3.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point$3.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point$3.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point$3.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint$1(curve, x, y, z) {
      base$1.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn$1(0);
      } else {
        this.x = new bn$1(x, 16);
        this.y = new bn$1(y, 16);
        this.z = new bn$1(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser(JPoint$1, base$1.BasePoint);

    ShortCurve$1.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint$1(this, x, y, z);
    };

    JPoint$1.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint$1.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint$1.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint$1.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint$1.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint$1.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint$1.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint$1.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint$1.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint$1.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint$1.prototype.mul = function mul(k, kbase) {
      k = new bn$1(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint$1.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint$1.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint$1.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint$1.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    var curve_1$1 = createCommonjsModule$1(function (module, exports) {

    var curve = exports;

    curve.base = base$1;
    curve.short = short_1$1;
    curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
    curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
    });

    var curves_1$1 = createCommonjsModule$1(function (module, exports) {

    var curves = exports;





    var assert = utils_1$1$1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1$1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1$1.edwards(options);
      else
        this.curve = new curve_1$1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash_1$1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash_1$1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash_1$1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    });





    function HmacDRBG$1(options) {
      if (!(this instanceof HmacDRBG$1))
        return new HmacDRBG$1(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1$2.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1$2.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1$2.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg$1 = HmacDRBG$1;

    HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG$1.prototype._hmac = function hmac() {
      return new hash_1$1.hmac(this.hash, this.K);
    };

    HmacDRBG$1.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1$2.toArray(entropy, entropyEnc);
      add = utils_1$2.toArray(add, addEnc);

      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1$2.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1$2.encode(res, enc);
    };



    var assert$3$1 = utils_1$1$1.assert;

    function KeyPair$2(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key$2 = KeyPair$2;

    KeyPair$2.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair$2)
        return pub;

      return new KeyPair$2(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair$2.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair$2)
        return priv;

      return new KeyPair$2(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair$2.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair$2.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair$2.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair$2.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn$1(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair$2.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$3$1(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$3$1(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair$2.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$3$1(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair$2.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair$2.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair$2.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };




    var assert$4$1 = utils_1$1$1.assert;

    function Signature$2(options, enc) {
      if (options instanceof Signature$2)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$4$1(options.r && options.s, 'Signature without r or s');
      this.r = new bn$1(options.r, 16);
      this.s = new bn$1(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature$2 = Signature$2;

    function Position$1() {
      this.place = 0;
    }

    function getLength$1(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding$1(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature$2.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1$1.toArray(data, enc);
      var p = new Position$1();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength$1(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength$1(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength$1(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn$1(r);
      this.s = new bn$1(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength$1(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature$2.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding$1(r);
      s = rmPadding$1(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength$1(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength$1(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength$1(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1$1.encode(res, enc);
    };





    var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    var assert$5$1 = utils_1$1$1.assert;




    function EC$1(options) {
      if (!(this instanceof EC$1))
        return new EC$1(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$5$1(Object.prototype.hasOwnProperty.call(curves_1$1, options),
          'Unknown curve ' + options);

        options = curves_1$1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1$1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec$1 = EC$1;

    EC$1.prototype.keyPair = function keyPair(options) {
      return new key$2(this, options);
    };

    EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key$2.fromPrivate(this, priv, enc);
    };

    EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key$2.fromPublic(this, pub, enc);
    };

    EC$1.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg$1({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn$1(2));
      for (;;) {
        var priv = new bn$1(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC$1.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn$1(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg$1({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn$1(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new bn$1(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature$2({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC$1.prototype.verify = function verify(msg, signature$1, key, enc) {
      msg = this._truncateToN(new bn$1(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature$1 = new signature$2(signature$1, 'hex');

      // Perform primitive values validation
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC$1.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5$1((3 & j) === j, 'The recovery param is more than two bits');
      signature$1 = new signature$2(signature$1, enc);

      var n = this.n;
      var e = new bn$1(msg);
      var r = signature$1.r;
      var s = signature$1.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC$1.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature$2(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var elliptic_1$1 = createCommonjsModule$1(function (module, exports) {

    var elliptic = exports;

    elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
    elliptic.utils = utils_1$1$1;
    elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    elliptic.curve = curve_1$1;
    elliptic.curves = curves_1$1;

    // Protocols
    elliptic.ec = ec$1;
    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
    });

    var EC$1$1 = elliptic_1$1.ec;

    const version$g = "signing-key/5.6.2";

    const logger$t = new Logger(version$g);
    let _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new EC$1$1("secp256k1");
        }
        return _curve;
    }
    class SigningKey {
        constructor(privateKey) {
            defineReadOnly(this, "curve", "secp256k1");
            defineReadOnly(this, "privateKey", hexlify(privateKey));
            if (hexDataLength(this.privateKey) !== 32) {
                logger$t.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            }
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            defineReadOnly(this, "_isSigningKey", true);
        }
        _addPoint(other) {
            const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
            const p1 = getCurve().keyFromPublic(arrayify(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const digestBytes = arrayify(digest);
            if (digestBytes.length !== 32) {
                logger$t.throwArgumentError("bad digest length", "digest", digest);
            }
            const signature = keyPair.sign(digestBytes, { canonical: true });
            return splitSignature({
                recoveryParam: signature.recoveryParam,
                r: hexZeroPad("0x" + signature.r.toString(16), 32),
                s: hexZeroPad("0x" + signature.s.toString(16), 32),
            });
        }
        computeSharedSecret(otherKey) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
            return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        }
        static isSigningKey(value) {
            return !!(value && value._isSigningKey);
        }
    }
    function recoverPublicKey(digest, signature) {
        const sig = splitSignature(signature);
        const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
        return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    function computePublicKey(key, compressed) {
        const bytes = arrayify(key);
        if (bytes.length === 32) {
            const signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger$t.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }

    var lib_esm$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        SigningKey: SigningKey,
        recoverPublicKey: recoverPublicKey,
        computePublicKey: computePublicKey
    });

    const version$f = "transactions/5.6.2";

    const logger$s = new Logger(version$f);
    var TransactionTypes;
    (function (TransactionTypes) {
        TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
        TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
        TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    ///////////////////////////////
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return getAddress(value);
    }
    function handleNumber(value) {
        if (value === "0x") {
            return Zero$1;
        }
        return BigNumber.from(value);
    }
    // Legacy Transaction Fields
    const transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
    ];
    const allowedTransactionKeys$2 = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
    };
    function computeAddress(key) {
        const publicKey = computePublicKey(key);
        return getAddress(hexDataSlice(keccak256$1(hexDataSlice(publicKey, 1)), 12));
    }
    function recoverAddress(digest, signature) {
        return computeAddress(recoverPublicKey(arrayify(digest), signature));
    }
    function formatNumber(value, name) {
        const result = stripZeros(BigNumber.from(value).toHexString());
        if (result.length > 32) {
            logger$s.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
        }
        return result;
    }
    function accessSetify(addr, storageKeys) {
        return {
            address: getAddress(addr),
            storageKeys: (storageKeys || []).map((storageKey, index) => {
                if (hexDataLength(storageKey) !== 32) {
                    logger$s.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
                }
                return storageKey.toLowerCase();
            })
        };
    }
    function accessListify(value) {
        if (Array.isArray(value)) {
            return value.map((set, index) => {
                if (Array.isArray(set)) {
                    if (set.length > 2) {
                        logger$s.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                    }
                    return accessSetify(set[0], set[1]);
                }
                return accessSetify(set.address, set.storageKeys);
            });
        }
        const result = Object.keys(value).map((addr) => {
            const storageKeys = value[addr].reduce((accum, storageKey) => {
                accum[storageKey] = true;
                return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort((a, b) => (a.address.localeCompare(b.address)));
        return result;
    }
    function formatAccessList(value) {
        return accessListify(value).map((set) => [set.address, set.storageKeys]);
    }
    function _serializeEip1559(transaction, signature) {
        // If there is an explicit gasPrice, make sure it matches the
        // EIP-1559 fees; otherwise they may not understand what they
        // think they are setting in terms of fee.
        if (transaction.gasPrice != null) {
            const gasPrice = BigNumber.from(transaction.gasPrice);
            const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
            if (!gasPrice.eq(maxFeePerGas)) {
                logger$s.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                    gasPrice, maxFeePerGas
                });
            }
        }
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x02", encode$2(fields)]);
    }
    function _serializeEip2930(transaction, signature) {
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.gasPrice || 0, "gasPrice"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x01", encode$2(fields)]);
    }
    // Legacy Transactions and EIP-155
    function _serialize(transaction, signature) {
        checkProperties(transaction, allowedTransactionKeys$2);
        const raw = [];
        transactionFields.forEach(function (fieldInfo) {
            let value = transaction[fieldInfo.name] || ([]);
            const options = {};
            if (fieldInfo.numeric) {
                options.hexPad = "left";
            }
            value = arrayify(hexlify(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                logger$s.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
                value = stripZeros(value);
                if (value.length > fieldInfo.maxLength) {
                    logger$s.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                }
            }
            raw.push(hexlify(value));
        });
        let chainId = 0;
        if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
                logger$s.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
        }
        else if (signature && !isBytesLike(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
            raw.push(hexlify(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
        }
        // Requesting an unsigned transaction
        if (!signature) {
            return encode$2(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        const sig = splitSignature(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        let v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
                logger$s.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
        }
        else if (sig.v !== v) {
            logger$s.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push(hexlify(v));
        raw.push(stripZeros(arrayify(sig.r)));
        raw.push(stripZeros(arrayify(sig.s)));
        return encode$2(raw);
    }
    function serialize$1(transaction, signature) {
        // Legacy and EIP-155 Transactions
        if (transaction.type == null || transaction.type === 0) {
            if (transaction.accessList != null) {
                logger$s.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
            }
            return _serialize(transaction, signature);
        }
        // Typed Transactions (EIP-2718)
        switch (transaction.type) {
            case 1:
                return _serializeEip2930(transaction, signature);
            case 2:
                return _serializeEip1559(transaction, signature);
        }
        return logger$s.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "serializeTransaction",
            transactionType: transaction.type
        });
    }
    function _parseEipSignature(tx, fields, serialize) {
        try {
            const recid = handleNumber(fields[0]).toNumber();
            if (recid !== 0 && recid !== 1) {
                throw new Error("bad recid");
            }
            tx.v = recid;
        }
        catch (error) {
            logger$s.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = hexZeroPad(fields[1], 32);
        tx.s = hexZeroPad(fields[2], 32);
        try {
            const digest = keccak256$1(serialize(tx));
            tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        }
        catch (error) { }
    }
    function _parseEip1559(payload) {
        const transaction = decode$2(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
            logger$s.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
        }
        const maxPriorityFeePerGas = handleNumber(transaction[2]);
        const maxFeePerGas = handleNumber(transaction[3]);
        const tx = {
            type: 2,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasPrice: null,
            gasLimit: handleNumber(transaction[4]),
            to: handleAddress(transaction[5]),
            value: handleNumber(transaction[6]),
            data: transaction[7],
            accessList: accessListify(transaction[8]),
        };
        // Unsigned EIP-1559 Transaction
        if (transaction.length === 9) {
            return tx;
        }
        tx.hash = keccak256$1(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
    }
    function _parseEip2930(payload) {
        const transaction = decode$2(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
            logger$s.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
        }
        const tx = {
            type: 1,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            gasPrice: handleNumber(transaction[2]),
            gasLimit: handleNumber(transaction[3]),
            to: handleAddress(transaction[4]),
            value: handleNumber(transaction[5]),
            data: transaction[6],
            accessList: accessListify(transaction[7])
        };
        // Unsigned EIP-2930 Transaction
        if (transaction.length === 8) {
            return tx;
        }
        tx.hash = keccak256$1(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
    }
    // Legacy Transactions and EIP-155
    function _parse(rawTransaction) {
        const transaction = decode$2(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
            logger$s.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        const tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
            return tx;
        }
        try {
            tx.v = BigNumber.from(transaction[6]).toNumber();
        }
        catch (error) {
            // @TODO: What makes snese to do? The v is too big
            return tx;
        }
        tx.r = hexZeroPad(transaction[7], 32);
        tx.s = hexZeroPad(transaction[8], 32);
        if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
        }
        else {
            // Signed Transaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
                tx.chainId = 0;
            }
            let recoveryParam = tx.v - 27;
            const raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
                raw.push(hexlify(tx.chainId));
                raw.push("0x");
                raw.push("0x");
                recoveryParam -= tx.chainId * 2 + 8;
            }
            const digest = keccak256$1(encode$2(raw));
            try {
                tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) { }
            tx.hash = keccak256$1(rawTransaction);
        }
        tx.type = null;
        return tx;
    }
    function parse(rawTransaction) {
        const payload = arrayify(rawTransaction);
        // Legacy and EIP-155 Transactions
        if (payload[0] > 0x7f) {
            return _parse(payload);
        }
        // Typed Transaction (EIP-2718)
        switch (payload[0]) {
            case 1:
                return _parseEip2930(payload);
            case 2:
                return _parseEip1559(payload);
        }
        return logger$s.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "parseTransaction",
            transactionType: payload[0]
        });
    }

    var lib_esm$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get TransactionTypes () { return TransactionTypes; },
        computeAddress: computeAddress,
        recoverAddress: recoverAddress,
        accessListify: accessListify,
        serialize: serialize$1,
        parse: parse
    });

    const version$e = "contracts/5.6.2";

    var __awaiter$b = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$r = new Logger(version$e);
    ///////////////////////////////
    const allowedTransactionKeys$1 = {
        chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true,
        customData: true,
        ccipReadEnabled: true
    };
    function resolveName(resolver, nameOrPromise) {
        return __awaiter$b(this, void 0, void 0, function* () {
            const name = yield nameOrPromise;
            if (typeof (name) !== "string") {
                logger$r.throwArgumentError("invalid address or ENS name", "name", name);
            }
            // If it is already an address, just use it (after adding checksum)
            try {
                return getAddress(name);
            }
            catch (error) { }
            if (!resolver) {
                logger$r.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName"
                });
            }
            const address = yield resolver.resolveName(name);
            if (address == null) {
                logger$r.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }
            return address;
        });
    }
    // Recursively replaces ENS names with promises to resolve the name and resolves all properties
    function resolveAddresses(resolver, value, paramType) {
        return __awaiter$b(this, void 0, void 0, function* () {
            if (Array.isArray(paramType)) {
                return yield Promise.all(paramType.map((paramType, index) => {
                    return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                }));
            }
            if (paramType.type === "address") {
                return yield resolveName(resolver, value);
            }
            if (paramType.type === "tuple") {
                return yield resolveAddresses(resolver, value, paramType.components);
            }
            if (paramType.baseType === "array") {
                if (!Array.isArray(value)) {
                    return Promise.reject(logger$r.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
                        argument: "value",
                        value
                    }));
                }
                return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
            }
            return value;
        });
    }
    function populateTransaction(contract, fragment, args) {
        return __awaiter$b(this, void 0, void 0, function* () {
            // If an extra argument is given, it is overrides
            let overrides = {};
            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                overrides = shallowCopy(args.pop());
            }
            // Make sure the parameter count matches
            logger$r.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
            // Populate "from" override (allow promises)
            if (contract.signer) {
                if (overrides.from) {
                    // Contracts with a Signer are from the Signer's frame-of-reference;
                    // but we allow overriding "from" if it matches the signer
                    overrides.from = resolveProperties({
                        override: resolveName(contract.signer, overrides.from),
                        signer: contract.signer.getAddress()
                    }).then((check) => __awaiter$b(this, void 0, void 0, function* () {
                        if (getAddress(check.signer) !== check.override) {
                            logger$r.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                            });
                        }
                        return check.override;
                    }));
                }
                else {
                    overrides.from = contract.signer.getAddress();
                }
            }
            else if (overrides.from) {
                overrides.from = resolveName(contract.provider, overrides.from);
                //} else {
                // Contracts without a signer can override "from", and if
                // unspecified the zero address is used
                //overrides.from = AddressZero;
            }
            // Wait for all dependencies to be resolved (prefer the signer over the provider)
            const resolved = yield resolveProperties({
                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                address: contract.resolvedAddress,
                overrides: (resolveProperties(overrides) || {})
            });
            // The ABI coded transaction
            const data = contract.interface.encodeFunctionData(fragment, resolved.args);
            const tx = {
                data: data,
                to: resolved.address
            };
            // Resolved Overrides
            const ro = resolved.overrides;
            // Populate simple overrides
            if (ro.nonce != null) {
                tx.nonce = BigNumber.from(ro.nonce).toNumber();
            }
            if (ro.gasLimit != null) {
                tx.gasLimit = BigNumber.from(ro.gasLimit);
            }
            if (ro.gasPrice != null) {
                tx.gasPrice = BigNumber.from(ro.gasPrice);
            }
            if (ro.maxFeePerGas != null) {
                tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
            }
            if (ro.maxPriorityFeePerGas != null) {
                tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
            }
            if (ro.from != null) {
                tx.from = ro.from;
            }
            if (ro.type != null) {
                tx.type = ro.type;
            }
            if (ro.accessList != null) {
                tx.accessList = accessListify(ro.accessList);
            }
            // If there was no "gasLimit" override, but the ABI specifies a default, use it
            if (tx.gasLimit == null && fragment.gas != null) {
                // Compute the intrinsic gas cost for this transaction
                // @TODO: This is based on the yellow paper as of Petersburg; this is something
                // we may wish to parameterize in v6 as part of the Network object. Since this
                // is always a non-nil to address, we can ignore G_create, but may wish to add
                // similar logic to the ContractFactory.
                let intrinsic = 21000;
                const bytes = arrayify(data);
                for (let i = 0; i < bytes.length; i++) {
                    intrinsic += 4;
                    if (bytes[i]) {
                        intrinsic += 64;
                    }
                }
                tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
            }
            // Populate "value" override
            if (ro.value) {
                const roValue = BigNumber.from(ro.value);
                if (!roValue.isZero() && !fragment.payable) {
                    logger$r.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: overrides.value
                    });
                }
                tx.value = roValue;
            }
            if (ro.customData) {
                tx.customData = shallowCopy(ro.customData);
            }
            if (ro.ccipReadEnabled) {
                tx.ccipReadEnabled = !!ro.ccipReadEnabled;
            }
            // Remove the overrides
            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            delete overrides.type;
            delete overrides.accessList;
            delete overrides.maxFeePerGas;
            delete overrides.maxPriorityFeePerGas;
            delete overrides.customData;
            delete overrides.ccipReadEnabled;
            // Make sure there are no stray overrides, which may indicate a
            // typo or using an unsupported key.
            const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));
            if (leftovers.length) {
                logger$r.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides",
                    overrides: leftovers
                });
            }
            return tx;
        });
    }
    function buildPopulate(contract, fragment) {
        return function (...args) {
            return populateTransaction(contract, fragment, args);
        };
    }
    function buildEstimate(contract, fragment) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$b(this, void 0, void 0, function* () {
                if (!signerOrProvider) {
                    logger$r.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "estimateGas"
                    });
                }
                const tx = yield populateTransaction(contract, fragment, args);
                return yield signerOrProvider.estimateGas(tx);
            });
        };
    }
    function addContractWait(contract, tx) {
        const wait = tx.wait.bind(tx);
        tx.wait = (confirmations) => {
            return wait(confirmations).then((receipt) => {
                receipt.events = receipt.logs.map((log) => {
                    let event = deepCopy(log);
                    let parsed = null;
                    try {
                        parsed = contract.interface.parseLog(log);
                    }
                    catch (e) { }
                    // Successfully parsed the event log; include it
                    if (parsed) {
                        event.args = parsed.args;
                        event.decode = (data, topics) => {
                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                    }
                    // Useful operations
                    event.removeListener = () => { return contract.provider; };
                    event.getBlock = () => {
                        return contract.provider.getBlock(receipt.blockHash);
                    };
                    event.getTransaction = () => {
                        return contract.provider.getTransaction(receipt.transactionHash);
                    };
                    event.getTransactionReceipt = () => {
                        return Promise.resolve(receipt);
                    };
                    return event;
                });
                return receipt;
            });
        };
    }
    function buildCall(contract, fragment, collapseSimple) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$b(this, void 0, void 0, function* () {
                // Extract the "blockTag" override if present
                let blockTag = undefined;
                if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                    const overrides = shallowCopy(args.pop());
                    if (overrides.blockTag != null) {
                        blockTag = yield overrides.blockTag;
                    }
                    delete overrides.blockTag;
                    args.push(overrides);
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed(blockTag);
                }
                // Call a node and get the result
                const tx = yield populateTransaction(contract, fragment, args);
                const result = yield signerOrProvider.call(tx, blockTag);
                try {
                    let value = contract.interface.decodeFunctionResult(fragment, result);
                    if (collapseSimple && fragment.outputs.length === 1) {
                        value = value[0];
                    }
                    return value;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        error.address = contract.address;
                        error.args = args;
                        error.transaction = tx;
                    }
                    throw error;
                }
            });
        };
    }
    function buildSend(contract, fragment) {
        return function (...args) {
            return __awaiter$b(this, void 0, void 0, function* () {
                if (!contract.signer) {
                    logger$r.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction"
                    });
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed();
                }
                const txRequest = yield populateTransaction(contract, fragment, args);
                const tx = yield contract.signer.sendTransaction(txRequest);
                // Tweak the tx.wait so the receipt has extra properties
                addContractWait(contract, tx);
                return tx;
            });
        };
    }
    function buildDefault(contract, fragment, collapseSimple) {
        if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
        }
        return buildSend(contract, fragment);
    }
    function getEventTag$1(filter) {
        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
        }
        return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
            if (Array.isArray(topic)) {
                return topic.join("|");
            }
            return topic;
        }).join(":") : "");
    }
    class RunningEvent {
        constructor(tag, filter) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "filter", filter);
            this._listeners = [];
        }
        addListener(listener, once) {
            this._listeners.push({ listener: listener, once: once });
        }
        removeListener(listener) {
            let done = false;
            this._listeners = this._listeners.filter((item) => {
                if (done || item.listener !== listener) {
                    return true;
                }
                done = true;
                return false;
            });
        }
        removeAllListeners() {
            this._listeners = [];
        }
        listeners() {
            return this._listeners.map((i) => i.listener);
        }
        listenerCount() {
            return this._listeners.length;
        }
        run(args) {
            const listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter((item) => {
                const argsCopy = args.slice();
                // Call the callback in the next event loop
                setTimeout(() => {
                    item.listener.apply(this, argsCopy);
                }, 0);
                // Reschedule it if it not "once"
                return !(item.once);
            });
            return listenerCount;
        }
        prepareEvent(event) {
        }
        // Returns the array that will be applied to an emit
        getEmit(event) {
            return [event];
        }
    }
    class ErrorRunningEvent extends RunningEvent {
        constructor() {
            super("error", null);
        }
    }
    // @TODO Fragment should inherit Wildcard? and just override getEmit?
    //       or have a common abstract super class, with enough constructor
    //       options to configure both.
    // A Fragment Event will populate all the properties that Wildcard
    // will, and additionally dereference the arguments when emitting
    class FragmentRunningEvent extends RunningEvent {
        constructor(address, contractInterface, fragment, topics) {
            const filter = {
                address: address
            };
            let topic = contractInterface.getEventTopic(fragment);
            if (topics) {
                if (topic !== topics[0]) {
                    logger$r.throwArgumentError("topic mismatch", "topics", topics);
                }
                filter.topics = topics.slice();
            }
            else {
                filter.topics = [topic];
            }
            super(getEventTag$1(filter), filter);
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
            defineReadOnly(this, "fragment", fragment);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = (data, topics) => {
                return this.interface.decodeEventLog(this.fragment, data, topics);
            };
            try {
                event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
                event.args = null;
                event.decodeError = error;
            }
        }
        getEmit(event) {
            const errors = checkResultErrors(event.args);
            if (errors.length) {
                throw errors[0].error;
            }
            const args = (event.args || []).slice();
            args.push(event);
            return args;
        }
    }
    // A Wildcard Event will attempt to populate:
    //  - event            The name of the event name
    //  - eventSignature   The full signature of the event
    //  - decode           A function to decode data and topics
    //  - args             The decoded data and topics
    class WildcardRunningEvent extends RunningEvent {
        constructor(address, contractInterface) {
            super("*", { address: address });
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            try {
                const parsed = this.interface.parseLog(event);
                event.event = parsed.name;
                event.eventSignature = parsed.signature;
                event.decode = (data, topics) => {
                    return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
                };
                event.args = parsed.args;
            }
            catch (error) {
                // No matching event
            }
        }
    }
    class BaseContract {
        constructor(addressOrName, contractInterface, signerOrProvider) {
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
                defineReadOnly(this, "provider", null);
                defineReadOnly(this, "signer", null);
            }
            else if (Signer.isSigner(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider.provider || null);
                defineReadOnly(this, "signer", signerOrProvider);
            }
            else if (Provider.isProvider(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider);
                defineReadOnly(this, "signer", null);
            }
            else {
                logger$r.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            defineReadOnly(this, "callStatic", {});
            defineReadOnly(this, "estimateGas", {});
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "populateTransaction", {});
            defineReadOnly(this, "filters", {});
            {
                const uniqueFilters = {};
                Object.keys(this.interface.events).forEach((eventSignature) => {
                    const event = this.interface.events[eventSignature];
                    defineReadOnly(this.filters, eventSignature, (...args) => {
                        return {
                            address: this.address,
                            topics: this.interface.encodeFilterTopics(event, args)
                        };
                    });
                    if (!uniqueFilters[event.name]) {
                        uniqueFilters[event.name] = [];
                    }
                    uniqueFilters[event.name].push(eventSignature);
                });
                Object.keys(uniqueFilters).forEach((name) => {
                    const filters = uniqueFilters[name];
                    if (filters.length === 1) {
                        defineReadOnly(this.filters, name, this.filters[filters[0]]);
                    }
                    else {
                        logger$r.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                    }
                });
            }
            defineReadOnly(this, "_runningEvents", {});
            defineReadOnly(this, "_wrappedEmits", {});
            if (addressOrName == null) {
                logger$r.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            defineReadOnly(this, "address", addressOrName);
            if (this.provider) {
                defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
            }
            else {
                try {
                    defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
                }
                catch (error) {
                    // Without a provider, we cannot use ENS names
                    logger$r.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Contract"
                    });
                }
            }
            // Swallow bad ENS names to prevent Unhandled Exceptions
            this.resolvedAddress.catch((e) => { });
            const uniqueNames = {};
            const uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach((signature) => {
                const fragment = this.interface.functions[signature];
                // Check that the signature is unique; if not the ABI generation has
                // not been cleaned or may be incorrectly generated
                if (uniqueSignatures[signature]) {
                    logger$r.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                    return;
                }
                uniqueSignatures[signature] = true;
                // Track unique names; we only expose bare named functions if they
                // are ambiguous
                {
                    const name = fragment.name;
                    if (!uniqueNames[`%${name}`]) {
                        uniqueNames[`%${name}`] = [];
                    }
                    uniqueNames[`%${name}`].push(signature);
                }
                if (this[signature] == null) {
                    defineReadOnly(this, signature, buildDefault(this, fragment, true));
                }
                // We do not collapse simple calls on this bucket, which allows
                // frameworks to safely use this without introspection as well as
                // allows decoding error recovery.
                if (this.functions[signature] == null) {
                    defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
                }
                if (this.callStatic[signature] == null) {
                    defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
                }
                if (this.populateTransaction[signature] == null) {
                    defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
                }
                if (this.estimateGas[signature] == null) {
                    defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
                }
            });
            Object.keys(uniqueNames).forEach((name) => {
                // Ambiguous names to not get attached as bare names
                const signatures = uniqueNames[name];
                if (signatures.length > 1) {
                    return;
                }
                // Strip off the leading "%" used for prototype protection
                name = name.substring(1);
                const signature = signatures[0];
                // If overwriting a member property that is null, swallow the error
                try {
                    if (this[name] == null) {
                        defineReadOnly(this, name, this[signature]);
                    }
                }
                catch (e) { }
                if (this.functions[name] == null) {
                    defineReadOnly(this.functions, name, this.functions[signature]);
                }
                if (this.callStatic[name] == null) {
                    defineReadOnly(this.callStatic, name, this.callStatic[signature]);
                }
                if (this.populateTransaction[name] == null) {
                    defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
                }
                if (this.estimateGas[name] == null) {
                    defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
                }
            });
        }
        static getContractAddress(transaction) {
            return getContractAddress(transaction);
        }
        static getInterface(contractInterface) {
            if (Interface.isInterface(contractInterface)) {
                return contractInterface;
            }
            return new Interface(contractInterface);
        }
        // @TODO: Allow timeout?
        deployed() {
            return this._deployed();
        }
        _deployed(blockTag) {
            if (!this._deployedPromise) {
                // If we were just deployed, we know the transaction we should occur in
                if (this.deployTransaction) {
                    this._deployedPromise = this.deployTransaction.wait().then(() => {
                        return this;
                    });
                }
                else {
                    // @TODO: Once we allow a timeout to be passed in, we will wait
                    // up to that many blocks for getCode
                    // Otherwise, poll for our code to be deployed
                    this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
                        if (code === "0x") {
                            logger$r.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                                contractAddress: this.address,
                                operation: "getDeployed"
                            });
                        }
                        return this;
                    });
                }
            }
            return this._deployedPromise;
        }
        // @TODO:
        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
        // @TODO:
        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
        fallback(overrides) {
            if (!this.signer) {
                logger$r.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            const tx = shallowCopy(overrides || {});
            ["from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger$r.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(() => {
                return this.signer.sendTransaction(tx);
            });
        }
        // Reconnect to a different signer or provider
        connect(signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
                signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
            }
            const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
                defineReadOnly(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
        }
        // Re-attach to a different on-chain instance of this contract
        attach(addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
        }
        static isIndexed(value) {
            return Indexed.isIndexed(value);
        }
        _normalizeRunningEvent(runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
                return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
        }
        _getRunningEvent(eventName) {
            if (typeof (eventName) === "string") {
                // Listen for "error" events (if your contract has an error event, include
                // the full signature to bypass this special event keyword)
                if (eventName === "error") {
                    return this._normalizeRunningEvent(new ErrorRunningEvent());
                }
                // Listen for any event that is registered
                if (eventName === "event") {
                    return this._normalizeRunningEvent(new RunningEvent("event", null));
                }
                // Listen for any event
                if (eventName === "*") {
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                // Get the event Fragment (throws if ambiguous/unknown event)
                const fragment = this.interface.getEvent(eventName);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
                // Is it a known topichash? (throws if no matching topichash)
                try {
                    const topic = eventName.topics[0];
                    if (typeof (topic) !== "string") {
                        throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                    }
                    const fragment = this.interface.getEvent(topic);
                    return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                }
                catch (error) { }
                // Filter by the unknown topichash
                const filter = {
                    address: this.address,
                    topics: eventName.topics
                };
                return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }
        _checkRunningEvents(runningEvent) {
            if (runningEvent.listenerCount() === 0) {
                delete this._runningEvents[runningEvent.tag];
                // If we have a poller for this, remove it
                const emit = this._wrappedEmits[runningEvent.tag];
                if (emit && runningEvent.filter) {
                    this.provider.off(runningEvent.filter, emit);
                    delete this._wrappedEmits[runningEvent.tag];
                }
            }
        }
        // Subclasses can override this to gracefully recover
        // from parse errors if they wish
        _wrapEvent(runningEvent, log, listener) {
            const event = deepCopy(log);
            event.removeListener = () => {
                if (!listener) {
                    return;
                }
                runningEvent.removeListener(listener);
                this._checkRunningEvents(runningEvent);
            };
            event.getBlock = () => { return this.provider.getBlock(log.blockHash); };
            event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
        }
        _addEventListener(runningEvent, listener, once) {
            if (!this.provider) {
                logger$r.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
                const wrappedEmit = (log) => {
                    let event = this._wrapEvent(runningEvent, log, listener);
                    // Try to emit the result for the parameterized event...
                    if (event.decodeError == null) {
                        try {
                            const args = runningEvent.getEmit(event);
                            this.emit(runningEvent.filter, ...args);
                        }
                        catch (error) {
                            event.decodeError = error.error;
                        }
                    }
                    // Always emit "event" for fragment-base events
                    if (runningEvent.filter != null) {
                        this.emit("event", event);
                    }
                    // Emit "error" if there was an error
                    if (event.decodeError != null) {
                        this.emit("error", event.decodeError, event);
                    }
                };
                this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                // Special events, like "error" do not have a filter
                if (runningEvent.filter != null) {
                    this.provider.on(runningEvent.filter, wrappedEmit);
                }
            }
        }
        queryFilter(event, fromBlockOrBlockhash, toBlock) {
            const runningEvent = this._getRunningEvent(event);
            const filter = shallowCopy(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && isHexString(fromBlockOrBlockhash, 32)) {
                if (toBlock != null) {
                    logger$r.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                }
                filter.blockHash = fromBlockOrBlockhash;
            }
            else {
                filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then((logs) => {
                return logs.map((log) => this._wrapEvent(runningEvent, log, null));
            });
        }
        on(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
        }
        once(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
        }
        emit(eventName, ...args) {
            if (!this.provider) {
                return false;
            }
            const runningEvent = this._getRunningEvent(eventName);
            const result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
        }
        listenerCount(eventName) {
            if (!this.provider) {
                return 0;
            }
            if (eventName == null) {
                return Object.keys(this._runningEvents).reduce((accum, key) => {
                    return accum + this._runningEvents[key].listenerCount();
                }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
        }
        listeners(eventName) {
            if (!this.provider) {
                return [];
            }
            if (eventName == null) {
                const result = [];
                for (let tag in this._runningEvents) {
                    this._runningEvents[tag].listeners().forEach((listener) => {
                        result.push(listener);
                    });
                }
                return result;
            }
            return this._getRunningEvent(eventName).listeners();
        }
        removeAllListeners(eventName) {
            if (!this.provider) {
                return this;
            }
            if (eventName == null) {
                for (const tag in this._runningEvents) {
                    const runningEvent = this._runningEvents[tag];
                    runningEvent.removeAllListeners();
                    this._checkRunningEvents(runningEvent);
                }
                return this;
            }
            // Delete any listeners
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
        }
        off(eventName, listener) {
            if (!this.provider) {
                return this;
            }
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
        }
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
    }
    class Contract extends BaseContract {
    }
    class ContractFactory {
        constructor(contractInterface, bytecode, signer) {
            let bytecodeHex = null;
            if (typeof (bytecode) === "string") {
                bytecodeHex = bytecode;
            }
            else if (isBytes(bytecode)) {
                bytecodeHex = hexlify(bytecode);
            }
            else if (bytecode && typeof (bytecode.object) === "string") {
                // Allow the bytecode object from the Solidity compiler
                bytecodeHex = bytecode.object;
            }
            else {
                // Crash in the next verification step
                bytecodeHex = "!";
            }
            // Make sure it is 0x prefixed
            if (bytecodeHex.substring(0, 2) !== "0x") {
                bytecodeHex = "0x" + bytecodeHex;
            }
            // Make sure the final result is valid bytecode
            if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {
                logger$r.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            // If we have a signer, make sure it is valid
            if (signer && !Signer.isSigner(signer)) {
                logger$r.throwArgumentError("invalid signer", "signer", signer);
            }
            defineReadOnly(this, "bytecode", bytecodeHex);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            defineReadOnly(this, "signer", signer || null);
        }
        // @TODO: Future; rename to populateTransaction?
        getDeployTransaction(...args) {
            let tx = {};
            // If we have 1 additional argument, we allow transaction overrides
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                tx = shallowCopy(args.pop());
                for (const key in tx) {
                    if (!allowedTransactionKeys$1[key]) {
                        throw new Error("unknown transaction override " + key);
                    }
                }
            }
            // Do not allow these to be overridden in a deployment transaction
            ["data", "from", "to"].forEach((key) => {
                if (tx[key] == null) {
                    return;
                }
                logger$r.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            if (tx.value) {
                const value = BigNumber.from(tx.value);
                if (!value.isZero() && !this.interface.deploy.payable) {
                    logger$r.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: tx.value
                    });
                }
            }
            // Make sure the call matches the constructor signature
            logger$r.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Set the data to the bytecode + the encoded constructor arguments
            tx.data = hexlify(concat$2([
                this.bytecode,
                this.interface.encodeDeploy(args)
            ]));
            return tx;
        }
        deploy(...args) {
            return __awaiter$b(this, void 0, void 0, function* () {
                let overrides = {};
                // If 1 extra parameter was passed in, it contains overrides
                if (args.length === this.interface.deploy.inputs.length + 1) {
                    overrides = args.pop();
                }
                // Make sure the call matches the constructor signature
                logger$r.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                // Resolve ENS names and promises in the arguments
                const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
                params.push(overrides);
                // Get the deployment transaction (with optional overrides)
                const unsignedTx = this.getDeployTransaction(...params);
                // Send the deployment transaction
                const tx = yield this.signer.sendTransaction(unsignedTx);
                const address = getStatic(this.constructor, "getContractAddress")(tx);
                const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
                // Add the modified wait that wraps events
                addContractWait(contract, tx);
                defineReadOnly(contract, "deployTransaction", tx);
                return contract;
            });
        }
        attach(address) {
            return (this.constructor).getContract(address, this.interface, this.signer);
        }
        connect(signer) {
            return new (this.constructor)(this.interface, this.bytecode, signer);
        }
        static fromSolidity(compilerOutput, signer) {
            if (compilerOutput == null) {
                logger$r.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
            }
            if (typeof (compilerOutput) === "string") {
                compilerOutput = JSON.parse(compilerOutput);
            }
            const abi = compilerOutput.abi;
            let bytecode = null;
            if (compilerOutput.bytecode) {
                bytecode = compilerOutput.bytecode;
            }
            else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
                bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
        }
        static getInterface(contractInterface) {
            return Contract.getInterface(contractInterface);
        }
        static getContractAddress(tx) {
            return getContractAddress(tx);
        }
        static getContract(address, contractInterface, signer) {
            return new Contract(address, contractInterface, signer);
        }
    }

    /**
     * var basex = require("base-x");
     *
     * This implementation is heavily based on base-x. The main reason to
     * deviate was to prevent the dependency of Buffer.
     *
     * Contributors:
     *
     * base-x encoding
     * Forked from https://github.com/cryptocoinjs/bs58
     * Originally written by Mike Hearn for BitcoinJ
     * Copyright (c) 2011 Google Inc
     * Ported to JavaScript by Stefan Thomas
     * Merged Buffer refactorings from base58-native by Stephen Pair
     * Copyright (c) 2013 BitPay Inc
     *
     * The MIT License (MIT)
     *
     * Copyright base-x contributors (c) 2016
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.

     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     */
    class BaseX {
        constructor(alphabet) {
            defineReadOnly(this, "alphabet", alphabet);
            defineReadOnly(this, "base", alphabet.length);
            defineReadOnly(this, "_alphabetMap", {});
            defineReadOnly(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (let i = 0; i < alphabet.length; i++) {
                this._alphabetMap[alphabet.charAt(i)] = i;
            }
        }
        encode(value) {
            let source = arrayify(value);
            if (source.length === 0) {
                return "";
            }
            let digits = [0];
            for (let i = 0; i < source.length; ++i) {
                let carry = source[i];
                for (let j = 0; j < digits.length; ++j) {
                    carry += digits[j] << 8;
                    digits[j] = carry % this.base;
                    carry = (carry / this.base) | 0;
                }
                while (carry > 0) {
                    digits.push(carry % this.base);
                    carry = (carry / this.base) | 0;
                }
            }
            let string = "";
            // deal with leading zeros
            for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                string += this._leader;
            }
            // convert digits to a string
            for (let q = digits.length - 1; q >= 0; --q) {
                string += this.alphabet[digits[q]];
            }
            return string;
        }
        decode(value) {
            if (typeof (value) !== "string") {
                throw new TypeError("Expected String");
            }
            let bytes = [];
            if (value.length === 0) {
                return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (let i = 0; i < value.length; i++) {
                let byte = this._alphabetMap[value[i]];
                if (byte === undefined) {
                    throw new Error("Non-base" + this.base + " character");
                }
                let carry = byte;
                for (let j = 0; j < bytes.length; ++j) {
                    carry += bytes[j] * this.base;
                    bytes[j] = carry & 0xff;
                    carry >>= 8;
                }
                while (carry > 0) {
                    bytes.push(carry & 0xff);
                    carry >>= 8;
                }
            }
            // deal with leading zeros
            for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                bytes.push(0);
            }
            return arrayify(new Uint8Array(bytes.reverse()));
        }
    }
    const Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
    //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

    var lib_esm$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseX: BaseX,
        Base32: Base32,
        Base58: Base58
    });

    var SupportedAlgorithm;
    (function (SupportedAlgorithm) {
        SupportedAlgorithm["sha256"] = "sha256";
        SupportedAlgorithm["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));

    const version$d = "sha2/5.6.1";

    const logger$q = new Logger(version$d);
    function ripemd160(data) {
        return "0x" + (hash_1$1.ripemd160().update(arrayify(data)).digest("hex"));
    }
    function sha256$1(data) {
        return "0x" + (hash_1$1.sha256().update(arrayify(data)).digest("hex"));
    }
    function sha512(data) {
        return "0x" + (hash_1$1.sha512().update(arrayify(data)).digest("hex"));
    }
    function computeHmac(algorithm, key, data) {
        if (!SupportedAlgorithm[algorithm]) {
            logger$q.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: algorithm
            });
        }
        return "0x" + hash_1$1.hmac(hash_1$1[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
    }

    var lib_esm$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        computeHmac: computeHmac,
        ripemd160: ripemd160,
        sha256: sha256$1,
        sha512: sha512,
        get SupportedAlgorithm () { return SupportedAlgorithm; }
    });

    function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
        password = arrayify(password);
        salt = arrayify(salt);
        let hLen;
        let l = 1;
        const DK = new Uint8Array(keylen);
        const block1 = new Uint8Array(salt.length + 4);
        block1.set(salt);
        //salt.copy(block1, 0, 0, salt.length)
        let r;
        let T;
        for (let i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            let U = arrayify(computeHmac(hashAlgorithm, password, block1));
            if (!hLen) {
                hLen = U.length;
                T = new Uint8Array(hLen);
                l = Math.ceil(keylen / hLen);
                r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (let j = 1; j < iterations; j++) {
                //U = createHmac(password).update(U).digest();
                U = arrayify(computeHmac(hashAlgorithm, password, U));
                for (let k = 0; k < hLen; k++)
                    T[k] ^= U[k];
            }
            const destPos = (i - 1) * hLen;
            const len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set(arrayify(T).slice(0, len), destPos);
        }
        return hexlify(DK);
    }

    const version$c = "wordlists/5.6.1";

    const logger$p = new Logger(version$c);
    class Wordlist {
        constructor(locale) {
            logger$p.checkAbstract(new.target, Wordlist);
            defineReadOnly(this, "locale", locale);
        }
        // Subclasses may override this
        split(mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
        }
        // Subclasses may override this
        join(words) {
            return words.join(" ");
        }
        static check(wordlist) {
            const words = [];
            for (let i = 0; i < 2048; i++) {
                const word = wordlist.getWord(i);
                /* istanbul ignore if */
                if (i !== wordlist.getWordIndex(word)) {
                    return "0x";
                }
                words.push(word);
            }
            return id(words.join("\n") + "\n");
        }
        static register(lang, name) {
        }
    }

    const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    let wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    class LangEn extends Wordlist {
        constructor() {
            super("en");
        }
        getWord(index) {
            loadWords(this);
            return wordlist[index];
        }
        getWordIndex(word) {
            loadWords(this);
            return wordlist.indexOf(word);
        }
    }
    const langEn = new LangEn();
    Wordlist.register(langEn);

    const wordlists = {
        en: langEn
    };

    const version$b = "hdnode/5.6.2";

    const logger$o = new Logger(version$b);
    const N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    // "Bitcoin seed"
    const MasterSecret = toUtf8Bytes("Bitcoin seed");
    const HardenedBit = 0x80000000;
    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits);
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return (1 << bits) - 1;
    }
    function bytes32(value) {
        return hexZeroPad(hexlify(value), 32);
    }
    function base58check(data) {
        return Base58.encode(concat$2([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
        if (wordlist == null) {
            return wordlists["en"];
        }
        if (typeof (wordlist) === "string") {
            const words = wordlists[wordlist];
            if (words == null) {
                logger$o.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
        }
        return wordlist;
    }
    const _constructorGuard$1 = {};
    const defaultPath = "m/44'/60'/0'/0/0";
    class HDNode {
        /**
         *  This constructor should not be called directly.
         *
         *  Please use:
         *   - fromMnemonic
         *   - fromSeed
         */
        constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            /* istanbul ignore if */
            if (constructorGuard !== _constructorGuard$1) {
                throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
                const signingKey = new SigningKey(privateKey);
                defineReadOnly(this, "privateKey", signingKey.privateKey);
                defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
                defineReadOnly(this, "privateKey", null);
                defineReadOnly(this, "publicKey", hexlify(publicKey));
            }
            defineReadOnly(this, "parentFingerprint", parentFingerprint);
            defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$1(this.publicKey)), 0, 4));
            defineReadOnly(this, "address", computeAddress(this.publicKey));
            defineReadOnly(this, "chainCode", chainCode);
            defineReadOnly(this, "index", index);
            defineReadOnly(this, "depth", depth);
            if (mnemonicOrPath == null) {
                // From a source that does not preserve the path (e.g. extended keys)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
                // From a source that does not preserve the mnemonic (e.g. neutered)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", mnemonicOrPath);
            }
            else {
                // From a fully qualified source
                defineReadOnly(this, "mnemonic", mnemonicOrPath);
                defineReadOnly(this, "path", mnemonicOrPath.path);
            }
        }
        get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            if (this.depth >= 256) {
                throw new Error("Depth too large!");
            }
            return base58check(concat$2([
                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                hexlify(this.depth),
                this.parentFingerprint,
                hexZeroPad(hexlify(this.index), 4),
                this.chainCode,
                ((this.privateKey != null) ? concat$2(["0x00", this.privateKey]) : this.publicKey),
            ]));
        }
        neuter() {
            return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        }
        _derive(index) {
            if (index > 0xffffffff) {
                throw new Error("invalid index - " + String(index));
            }
            // Base path
            let path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
            }
            const data = new Uint8Array(37);
            if (index & HardenedBit) {
                if (!this.privateKey) {
                    throw new Error("cannot derive child of neutered node");
                }
                // Data = 0x00 || ser_256(k_par)
                data.set(arrayify(this.privateKey), 1);
                // Hardened path
                if (path) {
                    path += "'";
                }
            }
            else {
                // Data = ser_p(point(k_par))
                data.set(arrayify(this.publicKey));
            }
            // Data += ser_32(i)
            for (let i = 24; i >= 0; i -= 8) {
                data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            // The private key
            let ki = null;
            // The public key
            let Ki = null;
            if (this.privateKey) {
                ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
            }
            else {
                const ek = new SigningKey(hexlify(IL));
                Ki = ek._addPoint(this.publicKey);
            }
            let mnemonicOrPath = path;
            const srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
                mnemonicOrPath = Object.freeze({
                    phrase: srcMnemonic.phrase,
                    path: path,
                    locale: (srcMnemonic.locale || "en")
                });
            }
            return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        }
        derivePath(path) {
            const components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
                components.shift();
            }
            let result = this;
            for (let i = 0; i < components.length; i++) {
                const component = components[i];
                if (component.match(/^[0-9]+'$/)) {
                    const index = parseInt(component.substring(0, component.length - 1));
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(HardenedBit + index);
                }
                else if (component.match(/^[0-9]+$/)) {
                    const index = parseInt(component);
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(index);
                }
                else {
                    throw new Error("invalid path component - " + component);
                }
            }
            return result;
        }
        static _fromSeed(seed, mnemonic) {
            const seedArray = arrayify(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
                throw new Error("invalid seed");
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        }
        static fromMnemonic(mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                phrase: mnemonic,
                path: "m",
                locale: wordlist.locale
            });
        }
        static fromSeed(seed) {
            return HDNode._fromSeed(seed, null);
        }
        static fromExtendedKey(extendedKey) {
            const bytes = Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                logger$o.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            const depth = bytes[4];
            const parentFingerprint = hexlify(bytes.slice(5, 9));
            const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
            const chainCode = hexlify(bytes.slice(13, 45));
            const key = bytes.slice(45, 78);
            switch (hexlify(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf":
                    return new HDNode(_constructorGuard$1, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNode(_constructorGuard$1, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return logger$o.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
    }
    function mnemonicToSeed(mnemonic, password) {
        if (!password) {
            password = "";
        }
        const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
        return pbkdf2$1(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = getWordlist(wordlist);
        logger$o.checkNormalize();
        const words = wordlist.split(mnemonic);
        if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
        }
        const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
        let offset = 0;
        for (let i = 0; i < words.length; i++) {
            let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
                throw new Error("invalid mnemonic");
            }
            for (let bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        const entropyBits = 32 * words.length / 3;
        const checksumBits = words.length / 3;
        const checksumMask = getUpperMask(checksumBits);
        const checksum = arrayify(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
        }
        return hexlify(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
        wordlist = getWordlist(wordlist);
        entropy = arrayify(entropy);
        if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
        }
        const indices = [0];
        let remainingBits = 11;
        for (let i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        const checksumBits = entropy.length / 4;
        const checksum = arrayify(sha256$1(entropy))[0] & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    function isValidMnemonic(mnemonic, wordlist) {
        try {
            mnemonicToEntropy(mnemonic, wordlist);
            return true;
        }
        catch (error) { }
        return false;
    }
    function getAccountPath(index) {
        if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
            logger$o.throwArgumentError("invalid account index", "index", index);
        }
        return `m/44'/60'/${index}'/0/0`;
    }

    var lib_esm$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        defaultPath: defaultPath,
        HDNode: HDNode,
        mnemonicToSeed: mnemonicToSeed,
        mnemonicToEntropy: mnemonicToEntropy,
        entropyToMnemonic: entropyToMnemonic,
        isValidMnemonic: isValidMnemonic,
        getAccountPath: getAccountPath
    });

    const version$a = "random/5.6.1";

    const logger$n = new Logger(version$a);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global$1 !== 'undefined') {
            return global$1;
        }
        throw new Error('unable to locate global object');
    }
    const anyGlobal = getGlobal();
    let crypto$2 = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto$2 || !crypto$2.getRandomValues) {
        logger$n.warn("WARNING: Missing strong random number source");
        crypto$2 = {
            getRandomValues: function (buffer) {
                return logger$n.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger$n.throwArgumentError("invalid length", "length", length);
        }
        const result = new Uint8Array(length);
        crypto$2.getRandomValues(result);
        return arrayify(result);
    }

    function shuffled(array) {
        array = array.slice();
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
        }
        return array;
    }

    var lib_esm$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        randomBytes: randomBytes,
        shuffled: shuffled
    });

    var aesJs = createCommonjsModule$2(function (module, exports) {

    (function(root) {

        function checkInt(value) {
            return (parseInt(value) === value);
        }

        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }

            for (var i = 0; i < arrayish.length; i++) {
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }

            return true;
        }

        function coerceArray(arg, copy) {

            // ArrayBuffer view
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }

                return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error('Array contains invalid value: ' + arg);
                }

                return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }

            throw new Error('unsupported array-like object');
        }

        function createArray(length) {
            return new Uint8Array(length);
        }

        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }



        var convertUtf8 = (function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);

                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;

                    // otherwise, just the actual byte
                    } else {
                        result.push(c);
                    }
                }

                return coerceArray(result);
            }

            function fromBytes(bytes) {
                var result = [], i = 0;

                while (i < bytes.length) {
                    var c = bytes[i];

                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                        i += 3;
                    }
                }

                return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();

        var convertHex = (function() {
            function toBytes(text) {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }

                return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';

            function fromBytes(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i++) {
                        var v = bytes[i];
                        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                    }
                    return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();


        // Number of rounds by keysize
        var numberOfRounds = {16: 10, 24: 12, 32: 14};

        // Round constant words
        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

        // S-box and Inverse S-box (S is for Substitution)
        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
        var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

        // Transformations for encryption
        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

        // Transformations for decryption
        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

        // Transformations for decryption key expansion
        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

        function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
                result.push(
                    (bytes[i    ] << 24) |
                    (bytes[i + 1] << 16) |
                    (bytes[i + 2] <<  8) |
                     bytes[i + 3]
                );
            }
            return result;
        }

        var AES = function(key) {
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }

            Object.defineProperty(this, 'key', {
                value: coerceArray(key, true)
            });

            this._prepare();
        };


        AES.prototype._prepare = function() {

            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
                this._Ke.push([0, 0, 0, 0]);
                this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                          (S[(tt >>  8) & 0xFF] << 16) ^
                          (S[ tt        & 0xFF] <<  8) ^
                           S[(tt >> 24) & 0xFF]        ^
                          (rcon[rconpointer] << 24));
                rconpointer += 1;

                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (var i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
                } else {
                    for (var i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];

                    tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                  (S[(tt >>  8) & 0xFF] <<  8) ^
                                  (S[(tt >> 16) & 0xFF] << 16) ^
                                  (S[(tt >> 24) & 0xFF] << 24));

                    for (var i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }

                // copy values into round key arrays
                var i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
                for (var c = 0; c < 4; c++) {
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                      U2[(tt >> 16) & 0xFF] ^
                                      U3[(tt >>  8) & 0xFF] ^
                                      U4[ tt        & 0xFF]);
                }
            }
        };

        AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error('invalid plaintext size (must be 16 bytes)');
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                            T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                            T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T4[ t[(i + 3) % 4]        & 0xff] ^
                            this._Ke[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Ke[rounds][i];
                result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };

        AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error('invalid ciphertext size (must be 16 bytes)');
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                            T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                            T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T8[ t[(i + 1) % 4]        & 0xff] ^
                            this._Kd[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Kd[rounds][i];
                result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };


        /**
         *  Mode Of Operation - Electonic Codebook (ECB)
         */
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
        };

        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Block Chaining (CBC)
         */
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);

                for (var j = 0; j < 16; j++) {
                    block[j] ^= this._lastCipherblock[j];
                }

                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);

                for (var j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }

                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Feedback (CFB)
         */
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 size)');
            }

            if (!segmentSize) { segmentSize = 1; }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
                throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for (var j = 0; j < this.segmentSize; j++) {
                    encrypted[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return encrypted;
        };

        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
                throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);

                for (var j = 0; j < this.segmentSize; j++) {
                    plaintext[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return plaintext;
        };

        /**
         *  Mode Of Operation - Output Feedback (OFB)
         */
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


        /**
         *  Counter object for CTR common mode of operation
         */
        var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
                throw Error('Counter must be instanitated with `new`');
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }

            if (typeof(initialValue) === 'number') {
                this._counter = createArray(16);
                this.setValue(initialValue);

            } else {
                this.setBytes(initialValue);
            }
        };

        Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
                throw new Error('invalid counter value (must be an integer)');
            }

            for (var index = 15; index >= 0; --index) {
                this._counter[index] = value % 256;
                value = value >> 8;
            }
        };

        Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
                throw new Error('invalid counter bytes size (must be 16 bytes)');
            }

            this._counter = bytes;
        };

        Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        };


        /**
         *  Mode Of Operation - Counter (CTR)
         */
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
                counter = new Counter(counter);
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


        ///////////////////////
        // Padding

        // See:https://tools.ietf.org/html/rfc2315
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
                result[i] = padder;
            }
            return result;
        }

        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
                if (data[length + i] !== padder) {
                    throw new Error('PKCS#7 invalid padding byte');
                }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }

        ///////////////////////
        // Exporting


        // The block cipher
        var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },

            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },

            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },

            _arrayTest: {
                coerceArray: coerceArray,
                createArray: createArray,
                copyArray: copyArray,
            }
        };


        // node.js
        {
            module.exports = aesjs;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }


    })();
    });

    const version$9 = "json-wallets/5.6.1";

    function looseArrayify(hexString) {
        if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }
        return arrayify(hexString);
    }
    function zpad(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
        }
        return arrayify(password);
    }
    function searchPath(object, path) {
        let currentChild = object;
        const comps = path.toLowerCase().split('/');
        for (let i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            let matchingChild = null;
            for (const key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
                return null;
            }
            // Now check this child...
            currentChild = matchingChild;
        }
        return currentChild;
    }
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    function uuidV4(randomBytes) {
        const bytes = arrayify(randomBytes);
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        const value = hexlify(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }

    const logger$m = new Logger(version$9);
    class CrowdsaleAccount extends Description {
        isCrowdsaleAccount(value) {
            return !!(value && value._isCrowdsaleAccount);
        }
    }
    // See: https://github.com/ethereum/pyethsaletool
    function decrypt$2(json, password) {
        const data = JSON.parse(json);
        password = getPassword(password);
        // Ethereum Address
        const ethaddr = getAddress(searchPath(data, "ethaddr"));
        // Encrypted Seed
        const encseed = looseArrayify(searchPath(data, "encseed"));
        if (!encseed || (encseed.length % 16) !== 0) {
            logger$m.throwArgumentError("invalid encseed", "json", json);
        }
        const key = arrayify(pbkdf2$1(password, password, 2000, 32, "sha256")).slice(0, 16);
        const iv = encseed.slice(0, 16);
        const encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        const aesCbc = new aesJs.ModeOfOperation.cbc(key, iv);
        const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        let seedHex = "";
        for (let i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        const seedHexBytes = toUtf8Bytes(seedHex);
        const privateKey = keccak256$1(seedHexBytes);
        return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
        });
    }

    function isCrowdsaleWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        return (data.encseed && data.ethaddr);
    }
    function isKeystoreWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }
        // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
        return true;
    }
    //export function isJsonWallet(json: string): boolean {
    //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
    //}
    function getJsonWalletAddress(json) {
        if (isCrowdsaleWallet(json)) {
            try {
                return getAddress(JSON.parse(json).ethaddr);
            }
            catch (error) {
                return null;
            }
        }
        if (isKeystoreWallet(json)) {
            try {
                return getAddress(JSON.parse(json).address);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }

    var scrypt = createCommonjsModule$2(function (module, exports) {

    (function(root) {
        const MAX_VALUE = 0x7fffffff;

        // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
        // See: https://github.com/dchest/scrypt-async-js
        function SHA256(m) {
            const K = new Uint32Array([
               0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
               0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
               0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
               0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
               0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
               0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
               0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
               0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
               0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
               0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
               0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
               0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
               0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
           ]);

            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);

            function blocks(p) {
                let off = 0, len = p.length;
                while (len >= 64) {
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                    for (i = 0; i < 16; i++) {
                        j = off + i*4;
                        w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                        ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                    }

                    for (i = 16; i < 64; i++) {
                        u = w[i-2];
                        t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                        u = w[i-15];
                        t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                        w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                    }

                    for (i = 0; i < 64; i++) {
                        t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                 ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                              ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                        t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                        h = g;
                        g = f;
                        f = e;
                        e = (d + t1) | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = (t1 + t2) | 0;
                    }

                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                    h4 = (h4 + e) | 0;
                    h5 = (h5 + f) | 0;
                    h6 = (h6 + g) | 0;
                    h7 = (h7 + h) | 0;

                    off += 64;
                    len -= 64;
                }
            }

            blocks(m);

            let i, bytesLeft = m.length % 64,
            bitLenHi = (m.length / 0x20000000) | 0,
            bitLenLo = m.length << 3,
            numZeros = (bytesLeft < 56) ? 56 : 120,
            p = m.slice(m.length - bytesLeft, m.length);

            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);

            blocks(p);

            return [
                (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
        }

        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);

            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);

            let i;
            let dk = [];

            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

            // increments counter inside inner
            function incrementCounter() {
                for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                    inner[i]++;
                    if (inner[i] <= 0xff) return;
                    inner[i] = 0;
                }
            }

            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }

            return dk;
        }

        // The following is an adaptation of scryptsy
        // See: https://www.npmjs.com/package/scryptsy
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;

            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }

        function R(a, b) {
            return (a << b) | (a >>> (32 - b));
        }

        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);

            for (let i = 8; i > 0; i -= 2) {
                x[ 4] ^= R(x[ 0] + x[12], 7);
                x[ 8] ^= R(x[ 4] + x[ 0], 9);
                x[12] ^= R(x[ 8] + x[ 4], 13);
                x[ 0] ^= R(x[12] + x[ 8], 18);
                x[ 9] ^= R(x[ 5] + x[ 1], 7);
                x[13] ^= R(x[ 9] + x[ 5], 9);
                x[ 1] ^= R(x[13] + x[ 9], 13);
                x[ 5] ^= R(x[ 1] + x[13], 18);
                x[14] ^= R(x[10] + x[ 6], 7);
                x[ 2] ^= R(x[14] + x[10], 9);
                x[ 6] ^= R(x[ 2] + x[14], 13);
                x[10] ^= R(x[ 6] + x[ 2], 18);
                x[ 3] ^= R(x[15] + x[11], 7);
                x[ 7] ^= R(x[ 3] + x[15], 9);
                x[11] ^= R(x[ 7] + x[ 3], 13);
                x[15] ^= R(x[11] + x[ 7], 18);
                x[ 1] ^= R(x[ 0] + x[ 3], 7);
                x[ 2] ^= R(x[ 1] + x[ 0], 9);
                x[ 3] ^= R(x[ 2] + x[ 1], 13);
                x[ 0] ^= R(x[ 3] + x[ 2], 18);
                x[ 6] ^= R(x[ 5] + x[ 4], 7);
                x[ 7] ^= R(x[ 6] + x[ 5], 9);
                x[ 4] ^= R(x[ 7] + x[ 6], 13);
                x[ 5] ^= R(x[ 4] + x[ 7], 18);
                x[11] ^= R(x[10] + x[ 9], 7);
                x[ 8] ^= R(x[11] + x[10], 9);
                x[ 9] ^= R(x[ 8] + x[11], 13);
                x[10] ^= R(x[ 9] + x[ 8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }

            for (let i = 0; i < 16; ++i) {
                B[i] += x[i];
            }
        }

        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
                D[i] ^= S[Si + i];
            }
        }

        function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
                dest[destPos++] = src[srcPos++];
            }
        }

        function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }

            for (let i = 0; i < o.length; i++) {
                const v = o[i];
                if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }

            return true;
        }

        function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
        }

        // N = Cpu cost, r = Memory cost, p = parallelization cost
        // callback(error, progress, key)
        function _scrypt(password, salt, N, r, p, dkLen, callback) {

            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');

            dkLen = ensureInteger(dkLen, 'dkLen');

            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

            if (!checkBufferish(password)) {
                throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);

            if (!checkBufferish(salt)) {
                throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);

            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r);
            for (let i = 0; i < B.length; i++) {
                const j = i * 4;
                B[i] = ((b[j + 3] & 0xff) << 24) |
                       ((b[j + 2] & 0xff) << 16) |
                       ((b[j + 1] & 0xff) << 8) |
                       ((b[j + 0] & 0xff) << 0);
            }

            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);

            const Yi = 32 * r;

            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8

            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;

            // Set this to true to abandon the scrypt on the next step
            let stop = false;

            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;

            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;

            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error('cancelled'), currentOp / totalOps);
                }

                let steps;

                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;

                        arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                        state = 1;                                         // Move to ROMix 2
                        i1 = 0;

                        // Fall through

                    case 1:

                        // Run up to 1000 steps of the first inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                  // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                        }

                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;

                        if (callback) {
                            // Call the callback with the progress (optionally stopping us)
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        i1 = 0;                                          // Move to ROMix 6
                        state = 2;

                        // Fall through

                    case 2:

                        // Run up to 1000 steps of the second inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                // ROMix - 6
                            const offset = (2 * r - 1) * 16;             // ROMix - 7
                            const j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                        }

                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;

                        // Call the callback with the progress (optionally stopping us)
                        if (callback) {
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }

                        b = [];
                        for (let i = 0; i < B.length; i++) {
                            b.push((B[i] >>  0) & 0xff);
                            b.push((B[i] >>  8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }

                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                        // Send the result to the callback
                        if (callback) { callback(null, 1.0, derivedKey); }

                        // Done; don't break (which would reschedule)
                        return derivedKey;
                }

                // Schedule the next steps
                if (callback) { nextTick(incrementalSMix); }
            };

            // Run the smix state machine until completion
            if (!callback) {
                while (true) {
                    const derivedKey = incrementalSMix();
                    if (derivedKey != undefined) { return derivedKey; }
                }
            }

            // Bootstrap the async incremental smix
            incrementalSMix();
        }

        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) { progressCallback(0); }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };

        // node.js
        {
           module.exports = lib;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }

    })();
    });

    var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$l = new Logger(version$9);
    // Exported Types
    function hasMnemonic$1(value) {
        return (value != null && value.mnemonic && value.mnemonic.phrase);
    }
    class KeystoreAccount extends Description {
        isKeystoreAccount(value) {
            return !!(value && value._isKeystoreAccount);
        }
    }
    function _decrypt(data, key, ciphertext) {
        const cipher = searchPath(data, "crypto/cipher");
        if (cipher === "aes-128-ctr") {
            const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(key, counter);
            return arrayify(aesCtr.decrypt(ciphertext));
        }
        return null;
    }
    function _getAccount(data, key) {
        const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
        const computedMAC = hexlify(keccak256$1(concat$2([key.slice(16, 32), ciphertext]))).substring(2);
        if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
        }
        const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
        if (!privateKey) {
            logger$l.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
        }
        const mnemonicKey = key.slice(32, 64);
        const address = computeAddress(privateKey);
        if (data.address) {
            let check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
                check = "0x" + check;
            }
            if (getAddress(check) !== address) {
                throw new Error("address mismatch");
            }
        }
        const account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: hexlify(privateKey)
        };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if (searchPath(data, "x-ethers/version") === "0.1") {
            const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
            const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
            const mnemonicCounter = new aesJs.Counter(mnemonicIv);
            const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const path = searchPath(data, "x-ethers/path") || defaultPath;
            const locale = searchPath(data, "x-ethers/locale") || "en";
            const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
                const mnemonic = entropyToMnemonic(entropy, locale);
                const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
                account.mnemonic = node.mnemonic;
            }
            catch (error) {
                // If we don't have the locale wordlist installed to
                // read this mnemonic, just bail and don't set the
                // mnemonic
                if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                    throw error;
                }
            }
        }
        return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
        return arrayify(pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
        return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
        const passwordBytes = getPassword(password);
        const kdf = searchPath(data, "crypto/kdf");
        if (kdf && typeof (kdf) === "string") {
            const throwError = function (name, value) {
                return logger$l.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
                const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
                const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
                // Check for all required parameters
                if (!N || !r || !p) {
                    throwError("kdf", kdf);
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    throwError("N", N);
                }
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                let prfFunc = null;
                const prf = searchPath(data, "crypto/kdfparams/prf");
                if (prf === "hmac-sha256") {
                    prfFunc = "sha256";
                }
                else if (prf === "hmac-sha512") {
                    prfFunc = "sha512";
                }
                else {
                    throwError("prf", prf);
                }
                const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
        }
        return logger$l.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
        const data = JSON.parse(json);
        const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);
        return _getAccount(data, key);
    }
    function decrypt$1(json, password, progressCallback) {
        return __awaiter$a(this, void 0, void 0, function* () {
            const data = JSON.parse(json);
            const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);
            return _getAccount(data, key);
        });
    }
    function encrypt$1(account, password, options, progressCallback) {
        try {
            // Check the address matches the private key
            if (getAddress(account.address) !== computeAddress(account.privateKey)) {
                throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic$1(account)) {
                const mnemonic = account.mnemonic;
                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        // The options are optional, so adjust the call as needed
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        const privateKey = arrayify(account.privateKey);
        const passwordBytes = getPassword(password);
        let entropy = null;
        let path = null;
        let locale = null;
        if (hasMnemonic$1(account)) {
            const srcMnemonic = account.mnemonic;
            entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || defaultPath;
            locale = srcMnemonic.locale || "en";
        }
        let client = options.client;
        if (!client) {
            client = "ethers.js";
        }
        // Check/generate the salt
        let salt = null;
        if (options.salt) {
            salt = arrayify(options.salt);
        }
        else {
            salt = randomBytes(32);
        }
        // Override initialization vector
        let iv = null;
        if (options.iv) {
            iv = arrayify(options.iv);
            if (iv.length !== 16) {
                throw new Error("invalid iv");
            }
        }
        else {
            iv = randomBytes(16);
        }
        // Override the uuid
        let uuidRandom = null;
        if (options.uuid) {
            uuidRandom = arrayify(options.uuid);
            if (uuidRandom.length !== 16) {
                throw new Error("invalid uuid");
            }
        }
        else {
            uuidRandom = randomBytes(16);
        }
        // Override the scrypt password-based key derivation function parameters
        let N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {
            key = arrayify(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            const derivedKey = key.slice(0, 16);
            const macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            const mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
            const ciphertext = arrayify(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            const mac = keccak256$1(concat$2([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            const data = {
                address: account.address.substring(2).toLowerCase(),
                id: uuidV4(uuidRandom),
                version: 3,
                Crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: hexlify(iv).substring(2),
                    },
                    ciphertext: hexlify(ciphertext).substring(2),
                    kdf: "scrypt",
                    kdfparams: {
                        salt: hexlify(salt).substring(2),
                        n: N,
                        dklen: 32,
                        p: p,
                        r: r
                    },
                    mac: mac.substring(2)
                }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
                const mnemonicIv = randomBytes(16);
                const mnemonicCounter = new aesJs.Counter(mnemonicIv);
                const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
                const now = new Date();
                const timestamp = (now.getUTCFullYear() + "-" +
                    zpad(now.getUTCMonth() + 1, 2) + "-" +
                    zpad(now.getUTCDate(), 2) + "T" +
                    zpad(now.getUTCHours(), 2) + "-" +
                    zpad(now.getUTCMinutes(), 2) + "-" +
                    zpad(now.getUTCSeconds(), 2) + ".0Z");
                data["x-ethers"] = {
                    client: client,
                    gethFilename: ("UTC--" + timestamp + "--" + data.address),
                    mnemonicCounter: hexlify(mnemonicIv).substring(2),
                    mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                    path: path,
                    locale: locale,
                    version: "0.1"
                };
            }
            return JSON.stringify(data);
        });
    }

    function decryptJsonWallet(json, password, progressCallback) {
        if (isCrowdsaleWallet(json)) {
            if (progressCallback) {
                progressCallback(0);
            }
            const account = decrypt$2(json, password);
            if (progressCallback) {
                progressCallback(1);
            }
            return Promise.resolve(account);
        }
        if (isKeystoreWallet(json)) {
            return decrypt$1(json, password, progressCallback);
        }
        return Promise.reject(new Error("invalid JSON wallet"));
    }
    function decryptJsonWalletSync(json, password) {
        if (isCrowdsaleWallet(json)) {
            return decrypt$2(json, password);
        }
        if (isKeystoreWallet(json)) {
            return decryptSync(json, password);
        }
        throw new Error("invalid JSON wallet");
    }

    var lib_esm$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        decryptCrowdsale: decrypt$2,
        decryptKeystore: decrypt$1,
        decryptKeystoreSync: decryptSync,
        encryptKeystore: encrypt$1,
        isCrowdsaleWallet: isCrowdsaleWallet,
        isKeystoreWallet: isKeystoreWallet,
        getJsonWalletAddress: getJsonWalletAddress,
        decryptJsonWallet: decryptJsonWallet,
        decryptJsonWalletSync: decryptJsonWalletSync
    });

    const version$8 = "wallet/5.6.2";

    var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$k = new Logger(version$8);
    function isAccount(value) {
        return (value != null && isHexString(value.privateKey, 32) && value.address != null);
    }
    function hasMnemonic(value) {
        const mnemonic = value.mnemonic;
        return (mnemonic && mnemonic.phrase);
    }
    class Wallet extends Signer {
        constructor(privateKey, provider) {
            super();
            if (isAccount(privateKey)) {
                const signingKey = new SigningKey(privateKey.privateKey);
                defineReadOnly(this, "_signingKey", () => signingKey);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
                if (this.address !== getAddress(privateKey.address)) {
                    logger$k.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                }
                if (hasMnemonic(privateKey)) {
                    const srcMnemonic = privateKey.mnemonic;
                    defineReadOnly(this, "_mnemonic", () => ({
                        phrase: srcMnemonic.phrase,
                        path: srcMnemonic.path || defaultPath,
                        locale: srcMnemonic.locale || "en"
                    }));
                    const mnemonic = this.mnemonic;
                    const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                    if (computeAddress(node.privateKey) !== this.address) {
                        logger$k.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                    }
                }
                else {
                    defineReadOnly(this, "_mnemonic", () => null);
                }
            }
            else {
                if (SigningKey.isSigningKey(privateKey)) {
                    /* istanbul ignore if */
                    if (privateKey.curve !== "secp256k1") {
                        logger$k.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                    }
                    defineReadOnly(this, "_signingKey", () => privateKey);
                }
                else {
                    // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                    if (typeof (privateKey) === "string") {
                        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                            privateKey = "0x" + privateKey;
                        }
                    }
                    const signingKey = new SigningKey(privateKey);
                    defineReadOnly(this, "_signingKey", () => signingKey);
                }
                defineReadOnly(this, "_mnemonic", () => null);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !Provider.isProvider(provider)) {
                logger$k.throwArgumentError("invalid provider", "provider", provider);
            }
            defineReadOnly(this, "provider", provider || null);
        }
        get mnemonic() { return this._mnemonic(); }
        get privateKey() { return this._signingKey().privateKey; }
        get publicKey() { return this._signingKey().publicKey; }
        getAddress() {
            return Promise.resolve(this.address);
        }
        connect(provider) {
            return new Wallet(this, provider);
        }
        signTransaction(transaction) {
            return resolveProperties(transaction).then((tx) => {
                if (tx.from != null) {
                    if (getAddress(tx.from) !== this.address) {
                        logger$k.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                    }
                    delete tx.from;
                }
                const signature = this._signingKey().signDigest(keccak256$1(serialize$1(tx)));
                return serialize$1(tx, signature);
            });
        }
        signMessage(message) {
            return __awaiter$9(this, void 0, void 0, function* () {
                return joinSignature(this._signingKey().signDigest(hashMessage(message)));
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$9(this, void 0, void 0, function* () {
                // Populate any ENS names
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    if (this.provider == null) {
                        logger$k.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "resolveName",
                            value: name
                        });
                    }
                    return this.provider.resolveName(name);
                });
                return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
            });
        }
        encrypt(password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
                progressCallback = options;
                options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
                throw new Error("invalid callback");
            }
            if (!options) {
                options = {};
            }
            return encrypt$1(this, password, options, progressCallback);
        }
        /**
         *  Static methods to create Wallet instances.
         */
        static createRandom(options) {
            let entropy = randomBytes(16);
            if (!options) {
                options = {};
            }
            if (options.extraEntropy) {
                entropy = arrayify(hexDataSlice(keccak256$1(concat$2([entropy, options.extraEntropy])), 0, 16));
            }
            const mnemonic = entropyToMnemonic(entropy, options.locale);
            return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        }
        static fromEncryptedJson(json, password, progressCallback) {
            return decryptJsonWallet(json, password, progressCallback).then((account) => {
                return new Wallet(account);
            });
        }
        static fromEncryptedJsonSync(json, password) {
            return new Wallet(decryptJsonWalletSync(json, password));
        }
        static fromMnemonic(mnemonic, path, wordlist) {
            if (!path) {
                path = defaultPath;
            }
            return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        }
    }
    function verifyMessage(message, signature) {
        return recoverAddress(hashMessage(message), signature);
    }
    function verifyTypedData(domain, types, value, signature) {
        return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
    }

    var lib_esm$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Wallet: Wallet,
        verifyMessage: verifyMessage,
        verifyTypedData: verifyTypedData
    });

    const version$7 = "networks/5.6.4";

    const logger$j = new Logger(version$7);
    function isRenetworkable(value) {
        return (value && typeof (value.renetwork) === "function");
    }
    function ethDefaultProvider(network) {
        const func = function (providers, options) {
            if (options == null) {
                options = {};
            }
            const providerList = [];
            if (providers.InfuraProvider && options.infura !== "-") {
                try {
                    providerList.push(new providers.InfuraProvider(network, options.infura));
                }
                catch (error) { }
            }
            if (providers.EtherscanProvider && options.etherscan !== "-") {
                try {
                    providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                }
                catch (error) { }
            }
            if (providers.AlchemyProvider && options.alchemy !== "-") {
                try {
                    providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                }
                catch (error) { }
            }
            if (providers.PocketProvider && options.pocket !== "-") {
                // These networks are currently faulty on Pocket as their
                // network does not handle the Berlin hardfork, which is
                // live on these ones.
                // @TODO: This goes away once Pocket has upgraded their nodes
                const skip = ["goerli", "ropsten", "rinkeby"];
                try {
                    const provider = new providers.PocketProvider(network, options.pocket);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providers.CloudflareProvider && options.cloudflare !== "-") {
                try {
                    providerList.push(new providers.CloudflareProvider(network));
                }
                catch (error) { }
            }
            if (providers.AnkrProvider && options.ankr !== "-") {
                try {
                    const skip = ["ropsten"];
                    const provider = new providers.AnkrProvider(network, options.ankr);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providerList.length === 0) {
                return null;
            }
            if (providers.FallbackProvider) {
                let quorum = 1;
                if (options.quorum != null) {
                    quorum = options.quorum;
                }
                else if (network === "homestead") {
                    quorum = 2;
                }
                return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
        };
        func.renetwork = function (network) {
            return ethDefaultProvider(network);
        };
        return func;
    }
    function etcDefaultProvider(url, network) {
        const func = function (providers, options) {
            if (providers.JsonRpcProvider) {
                return new providers.JsonRpcProvider(url, network);
            }
            return null;
        };
        func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
        };
        return func;
    }
    const homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
    };
    const ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
    };
    const classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    // See: https://chainlist.org
    const networks = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead: homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten: ropsten,
        testnet: ropsten,
        rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        // ETC (See: #351)
        classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor: classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: {
            chainId: 137,
            name: "matic",
            _defaultProvider: ethDefaultProvider("matic")
        },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: {
            chainId: 10,
            name: "optimism",
            _defaultProvider: ethDefaultProvider("optimism")
        },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
    };
    /**
     *  getNetwork
     *
     *  Converts a named common networks or chain ID (network ID) to a Network
     *  and verifies a network is a valid Network..
     */
    function getNetwork(network) {
        // No network (null)
        if (network == null) {
            return null;
        }
        if (typeof (network) === "number") {
            for (const name in networks) {
                const standard = networks[name];
                if (standard.chainId === network) {
                    return {
                        name: standard.name,
                        chainId: standard.chainId,
                        ensAddress: (standard.ensAddress || null),
                        _defaultProvider: (standard._defaultProvider || null)
                    };
                }
            }
            return {
                chainId: network,
                name: "unknown"
            };
        }
        if (typeof (network) === "string") {
            const standard = networks[network];
            if (standard == null) {
                return null;
            }
            return {
                name: standard.name,
                chainId: standard.chainId,
                ensAddress: standard.ensAddress,
                _defaultProvider: (standard._defaultProvider || null)
            };
        }
        const standard = networks[network.name];
        // Not a standard network; check that it is a valid network in general
        if (!standard) {
            if (typeof (network.chainId) !== "number") {
                logger$j.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
        }
        // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger$j.throwArgumentError("network chainId mismatch", "network", network);
        }
        // @TODO: In the next major version add an attach function to a defaultProvider
        // class and move the _defaultProvider internal to this file (extend Network)
        let defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
                defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
                defaultProvider = standard._defaultProvider;
            }
        }
        // Standard Network (allow overriding the ENS address)
        return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
        };
    }

    function decode$1(textData) {
        textData = atob(textData);
        const data = [];
        for (let i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
        }
        return arrayify(data);
    }
    function encode$1(data) {
        data = arrayify(data);
        let textData = "";
        for (let i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }

    var lib_esm$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        decode: decode$1,
        encode: encode$1
    });

    const version$6 = "web/5.6.1";

    var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function getUrl(href, options) {
        return __awaiter$8(this, void 0, void 0, function* () {
            if (options == null) {
                options = {};
            }
            const request = {
                method: (options.method || "GET"),
                headers: (options.headers || {}),
                body: (options.body || undefined),
            };
            if (options.skipFetchSetup !== true) {
                request.mode = "cors"; // no-cors, cors, *same-origin
                request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                request.credentials = "same-origin"; // include, *same-origin, omit
                request.redirect = "follow"; // manual, *follow, error
                request.referrer = "client"; // no-referrer, *client
            }
            const response = yield fetch(href, request);
            const body = yield response.arrayBuffer();
            const headers = {};
            if (response.headers.forEach) {
                response.headers.forEach((value, key) => {
                    headers[key.toLowerCase()] = value;
                });
            }
            else {
                ((response.headers).keys)().forEach((key) => {
                    headers[key.toLowerCase()] = response.headers.get(key);
                });
            }
            return {
                headers: headers,
                statusCode: response.status,
                statusMessage: response.statusText,
                body: arrayify(new Uint8Array(body)),
            };
        });
    }

    var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$i = new Logger(version$6);
    function staller(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    function bodyify(value, type) {
        if (value == null) {
            return null;
        }
        if (typeof (value) === "string") {
            return value;
        }
        if (isBytesLike(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                try {
                    return toUtf8String(value);
                }
                catch (error) { }
            }
            return hexlify(value);
        }
        return value;
    }
    // This API is still a work in progress; the future changes will likely be:
    // - ConnectionInfo => FetchDataRequest<T = any>
    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
    // For this reason, it should be considered internal until the API is finalized
    function _fetchData(connection, body, processFunc) {
        // How many times to retry in the event of a throttle
        const attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
        logger$i.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        const throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
        const throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
        logger$i.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        const errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
        const headers = {};
        let url = null;
        // @TODO: Allow ConnectionInfo to override some of these values
        const options = {
            method: "GET",
        };
        let allow304 = false;
        let timeout = 2 * 60 * 1000;
        if (typeof (connection) === "string") {
            url = connection;
        }
        else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
                logger$i.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                timeout = connection.timeout;
            }
            if (connection.headers) {
                for (const key in connection.headers) {
                    headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                    if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                        allow304 = true;
                    }
                }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
                if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                    logger$i.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                }
                const authorization = connection.user + ":" + connection.password;
                headers["authorization"] = {
                    key: "Authorization",
                    value: "Basic " + encode$1(toUtf8Bytes(authorization))
                };
            }
            if (connection.skipFetchSetup != null) {
                options.skipFetchSetup = !!connection.skipFetchSetup;
            }
        }
        const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
        const dataMatch = ((url) ? url.match(reData) : null);
        if (dataMatch) {
            try {
                const response = {
                    statusCode: 200,
                    statusMessage: "OK",
                    headers: { "content-type": dataMatch[1] },
                    body: decode$1(dataMatch[2])
                };
                let result = response.body;
                if (processFunc) {
                    result = processFunc(response.body, response);
                }
                return Promise.resolve(result);
            }
            catch (error) {
                logger$i.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                    body: bodyify(dataMatch[1], dataMatch[2]),
                    error: error,
                    requestBody: null,
                    requestMethod: "GET",
                    url: url
                });
            }
        }
        if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
                headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
                headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
        }
        const flatHeaders = {};
        Object.keys(headers).forEach((key) => {
            const header = headers[key];
            flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        const runningTimeout = (function () {
            let timer = null;
            const promise = new Promise(function (resolve, reject) {
                if (timeout) {
                    timer = setTimeout(() => {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        reject(logger$i.makeError("timeout", Logger.errors.TIMEOUT, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            timeout: timeout,
                            url: url
                        }));
                    }, timeout);
                }
            });
            const cancel = function () {
                if (timer == null) {
                    return;
                }
                clearTimeout(timer);
                timer = null;
            };
            return { promise, cancel };
        })();
        const runningFetch = (function () {
            return __awaiter$7(this, void 0, void 0, function* () {
                for (let attempt = 0; attempt < attemptLimit; attempt++) {
                    let response = null;
                    try {
                        response = yield getUrl(url, options);
                        if (attempt < attemptLimit) {
                            if (response.statusCode === 301 || response.statusCode === 302) {
                                // Redirection; for now we only support absolute locataions
                                const location = response.headers.location || "";
                                if (options.method === "GET" && location.match(/^https:/)) {
                                    url = response.headers.location;
                                    continue;
                                }
                            }
                            else if (response.statusCode === 429) {
                                // Exponential back-off throttling
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    let stall = 0;
                                    const retryAfter = response.headers["retry-after"];
                                    if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                        stall = parseInt(retryAfter) * 1000;
                                    }
                                    else {
                                        stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    }
                                    //console.log("Stalling 429");
                                    yield staller(stall);
                                    continue;
                                }
                            }
                        }
                    }
                    catch (error) {
                        response = error.response;
                        if (response == null) {
                            runningTimeout.cancel();
                            logger$i.throwError("missing response", Logger.errors.SERVER_ERROR, {
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                serverError: error,
                                url: url
                            });
                        }
                    }
                    let body = response.body;
                    if (allow304 && response.statusCode === 304) {
                        body = null;
                    }
                    else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                        runningTimeout.cancel();
                        logger$i.throwError("bad response", Logger.errors.SERVER_ERROR, {
                            status: response.statusCode,
                            headers: response.headers,
                            body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            url: url
                        });
                    }
                    if (processFunc) {
                        try {
                            const result = yield processFunc(body, response);
                            runningTimeout.cancel();
                            return result;
                        }
                        catch (error) {
                            // Allow the processFunc to trigger a throttle
                            if (error.throttleRetry && attempt < attemptLimit) {
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    //console.log("Stalling callback");
                                    yield staller(timeout);
                                    continue;
                                }
                            }
                            runningTimeout.cancel();
                            logger$i.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                                body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                                error: error,
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            });
                        }
                    }
                    runningTimeout.cancel();
                    // If we had a processFunc, it either returned a T or threw above.
                    // The "body" is now a Uint8Array.
                    return body;
                }
                return logger$i.throwError("failed response", Logger.errors.SERVER_ERROR, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url
                });
            });
        })();
        return Promise.race([runningTimeout.promise, runningFetch]);
    }
    function fetchJson(connection, json, processFunc) {
        let processJsonFunc = (value, response) => {
            let result = null;
            if (value != null) {
                try {
                    result = JSON.parse(toUtf8String(value));
                }
                catch (error) {
                    logger$i.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
                        body: value,
                        error: error
                    });
                }
            }
            if (processFunc) {
                result = processFunc(result, response);
            }
            return result;
        };
        // If we have json to send, we must
        // - add content-type of application/json (unless already overridden)
        // - convert the json to bytes
        let body = null;
        if (json != null) {
            body = toUtf8Bytes(json);
            // Create a connection with the content-type set for JSON
            const updated = (typeof (connection) === "string") ? ({ url: connection }) : shallowCopy(connection);
            if (updated.headers) {
                const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === "content-type")).length) !== 0;
                if (!hasContentType) {
                    updated.headers = shallowCopy(updated.headers);
                    updated.headers["content-type"] = "application/json";
                }
            }
            else {
                updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
    }
    function poll(func, options) {
        if (!options) {
            options = {};
        }
        options = shallowCopy(options);
        if (options.floor == null) {
            options.floor = 0;
        }
        if (options.ceiling == null) {
            options.ceiling = 10000;
        }
        if (options.interval == null) {
            options.interval = 250;
        }
        return new Promise(function (resolve, reject) {
            let timer = null;
            let done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            const cancel = () => {
                if (done) {
                    return false;
                }
                done = true;
                if (timer) {
                    clearTimeout(timer);
                }
                return true;
            };
            if (options.timeout) {
                timer = setTimeout(() => {
                    if (cancel()) {
                        reject(new Error("timeout"));
                    }
                }, options.timeout);
            }
            const retryLimit = options.retryLimit;
            let attempt = 0;
            function check() {
                return func().then(function (result) {
                    // If we have a result, or are allowed null then we're done
                    if (result !== undefined) {
                        if (cancel()) {
                            resolve(result);
                        }
                    }
                    else if (options.oncePoll) {
                        options.oncePoll.once("poll", check);
                    }
                    else if (options.onceBlock) {
                        options.onceBlock.once("block", check);
                        // Otherwise, exponential back-off (up to 10s) our next request
                    }
                    else if (!done) {
                        attempt++;
                        if (attempt > retryLimit) {
                            if (cancel()) {
                                reject(new Error("retry limit reached"));
                            }
                            return;
                        }
                        let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        if (timeout < options.floor) {
                            timeout = options.floor;
                        }
                        if (timeout > options.ceiling) {
                            timeout = options.ceiling;
                        }
                        setTimeout(check, timeout);
                    }
                    return null;
                }, function (error) {
                    if (cancel()) {
                        reject(error);
                    }
                });
            }
            check();
        });
    }

    var lib_esm$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        _fetchData: _fetchData,
        fetchJson: fetchJson,
        poll: poll
    });

    var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

    // pre-compute lookup table
    var ALPHABET_MAP = {};
    for (var z = 0; z < ALPHABET.length; z++) {
      var x$1 = ALPHABET.charAt(z);

      if (ALPHABET_MAP[x$1] !== undefined) throw new TypeError(x$1 + ' is ambiguous')
      ALPHABET_MAP[x$1] = z;
    }

    function polymodStep (pre) {
      var b = pre >> 25;
      return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3)
    }

    function prefixChk (prefix) {
      var chk = 1;
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

        chk = polymodStep(chk) ^ (c >> 5);
      }
      chk = polymodStep(chk);

      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
      }
      return chk
    }

    function encode (prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

      prefix = prefix.toLowerCase();

      // determine chk mod
      var chk = prefixChk(prefix);
      if (typeof chk === 'string') throw new Error(chk)

      var result = prefix + '1';
      for (var i = 0; i < words.length; ++i) {
        var x = words[i];
        if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

        chk = polymodStep(chk) ^ x;
        result += ALPHABET.charAt(x);
      }

      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;

      for (i = 0; i < 6; ++i) {
        var v = (chk >> ((5 - i) * 5)) & 0x1f;
        result += ALPHABET.charAt(v);
      }

      return result
    }

    function __decode (str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8) return str + ' too short'
      if (str.length > LIMIT) return 'Exceeds length limit'

      // don't allow mixed case
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
      str = lowered;

      var split = str.lastIndexOf('1');
      if (split === -1) return 'No separator character for ' + str
      if (split === 0) return 'Missing prefix for ' + str

      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6) return 'Data too short'

      var chk = prefixChk(prefix);
      if (typeof chk === 'string') return chk

      var words = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === undefined) return 'Unknown character ' + c
        chk = polymodStep(chk) ^ v;

        // not in the checksum?
        if (i + 6 >= wordChars.length) continue
        words.push(v);
      }

      if (chk !== 1) return 'Invalid checksum for ' + str
      return { prefix: prefix, words: words }
    }

    function decodeUnsafe () {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res
    }

    function decode (str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res

      throw new Error(res)
    }

    function convert (data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;

      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;

        while (bits >= outBits) {
          bits -= outBits;
          result.push((value >> bits) & maxV);
        }
      }

      if (pad) {
        if (bits > 0) {
          result.push((value << (outBits - bits)) & maxV);
        }
      } else {
        if (bits >= inBits) return 'Excess padding'
        if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
      }

      return result
    }

    function toWordsUnsafe (bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res
    }

    function toWords (bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    function fromWordsUnsafe (words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res
    }

    function fromWords (words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    var bech32 = {
      decodeUnsafe: decodeUnsafe,
      decode: decode,
      encode: encode,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
    };

    const version$5 = "providers/5.6.8";

    const logger$h = new Logger(version$5);
    class Formatter {
        constructor() {
            this.formats = this.getDefaultFormats();
        }
        getDefaultFormats() {
            const formats = ({});
            const address = this.address.bind(this);
            const bigNumber = this.bigNumber.bind(this);
            const blockTag = this.blockTag.bind(this);
            const data = this.data.bind(this);
            const hash = this.hash.bind(this);
            const hex = this.hex.bind(this);
            const number = this.number.bind(this);
            const type = this.type.bind(this);
            const strictData = (v) => { return this.data(v, true); };
            formats.transaction = {
                hash: hash,
                type: type,
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
                blockHash: Formatter.allowNull(hash, null),
                blockNumber: Formatter.allowNull(number, null),
                transactionIndex: Formatter.allowNull(number, null),
                confirmations: Formatter.allowNull(number, null),
                from: address,
                // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                // must be set
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                gasLimit: bigNumber,
                to: Formatter.allowNull(address, null),
                value: bigNumber,
                nonce: number,
                data: data,
                r: Formatter.allowNull(this.uint256),
                s: Formatter.allowNull(this.uint256),
                v: Formatter.allowNull(number),
                creates: Formatter.allowNull(address, null),
                raw: Formatter.allowNull(data),
            };
            formats.transactionRequest = {
                from: Formatter.allowNull(address),
                nonce: Formatter.allowNull(number),
                gasLimit: Formatter.allowNull(bigNumber),
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                to: Formatter.allowNull(address),
                value: Formatter.allowNull(bigNumber),
                data: Formatter.allowNull(strictData),
                type: Formatter.allowNull(number),
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
                transactionIndex: number,
                blockNumber: number,
                transactionHash: hash,
                address: address,
                topics: Formatter.arrayOf(hash),
                data: data,
                logIndex: number,
                blockHash: hash,
            };
            formats.receipt = {
                to: Formatter.allowNull(this.address, null),
                from: Formatter.allowNull(this.address, null),
                contractAddress: Formatter.allowNull(address, null),
                transactionIndex: number,
                // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                root: Formatter.allowNull(hex),
                gasUsed: bigNumber,
                logsBloom: Formatter.allowNull(data),
                blockHash: hash,
                transactionHash: hash,
                logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                blockNumber: number,
                confirmations: Formatter.allowNull(number, null),
                cumulativeGasUsed: bigNumber,
                effectiveGasPrice: Formatter.allowNull(bigNumber),
                status: Formatter.allowNull(number),
                type: type
            };
            formats.block = {
                hash: Formatter.allowNull(hash),
                parentHash: hash,
                number: number,
                timestamp: number,
                nonce: Formatter.allowNull(hex),
                difficulty: this.difficulty.bind(this),
                gasLimit: bigNumber,
                gasUsed: bigNumber,
                miner: Formatter.allowNull(address),
                extraData: data,
                transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                baseFeePerGas: Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = shallowCopy(formats.block);
            formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
                fromBlock: Formatter.allowNull(blockTag, undefined),
                toBlock: Formatter.allowNull(blockTag, undefined),
                blockHash: Formatter.allowNull(hash, undefined),
                address: Formatter.allowNull(address, undefined),
                topics: Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
                blockNumber: Formatter.allowNull(number),
                blockHash: Formatter.allowNull(hash),
                transactionIndex: number,
                removed: Formatter.allowNull(this.boolean.bind(this)),
                address: address,
                data: Formatter.allowFalsish(data, "0x"),
                topics: Formatter.arrayOf(hash),
                transactionHash: hash,
                logIndex: number,
            };
            return formats;
        }
        accessList(accessList) {
            return accessListify(accessList || []);
        }
        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
        // Strict! Used on input.
        number(number) {
            if (number === "0x") {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        type(number) {
            if (number === "0x" || number == null) {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        // Strict! Used on input.
        bigNumber(value) {
            return BigNumber.from(value);
        }
        // Requires a boolean, "true" or  "false"; returns a boolean
        boolean(value) {
            if (typeof (value) === "boolean") {
                return value;
            }
            if (typeof (value) === "string") {
                value = value.toLowerCase();
                if (value === "true") {
                    return true;
                }
                if (value === "false") {
                    return false;
                }
            }
            throw new Error("invalid boolean - " + value);
        }
        hex(value, strict) {
            if (typeof (value) === "string") {
                if (!strict && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if (isHexString(value)) {
                    return value.toLowerCase();
                }
            }
            return logger$h.throwArgumentError("invalid hash", "value", value);
        }
        data(value, strict) {
            const result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
                throw new Error("invalid data; odd-length - " + value);
            }
            return result;
        }
        // Requires an address
        // Strict! Used on input.
        address(value) {
            return getAddress(value);
        }
        callAddress(value) {
            if (!isHexString(value, 32)) {
                return null;
            }
            const address = getAddress(hexDataSlice(value, 12));
            return (address === AddressZero) ? null : address;
        }
        contractAddress(value) {
            return getContractAddress(value);
        }
        // Strict! Used on input.
        blockTag(blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            if (blockTag === "earliest") {
                return "0x0";
            }
            if (blockTag === "latest" || blockTag === "pending") {
                return blockTag;
            }
            if (typeof (blockTag) === "number" || isHexString(blockTag)) {
                return hexValue(blockTag);
            }
            throw new Error("invalid blockTag");
        }
        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
        hash(value, strict) {
            const result = this.hex(value, strict);
            if (hexDataLength(result) !== 32) {
                return logger$h.throwArgumentError("invalid hash", "value", value);
            }
            return result;
        }
        // Returns the difficulty as a number, or if too large (i.e. PoA network) null
        difficulty(value) {
            if (value == null) {
                return null;
            }
            const v = BigNumber.from(value);
            try {
                return v.toNumber();
            }
            catch (error) { }
            return null;
        }
        uint256(value) {
            if (!isHexString(value)) {
                throw new Error("invalid uint256");
            }
            return hexZeroPad(value, 32);
        }
        _block(value, format) {
            if (value.author != null && value.miner == null) {
                value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            const result = Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));
            return result;
        }
        block(value) {
            return this._block(value, this.formats.block);
        }
        blockWithTransactions(value) {
            return this._block(value, this.formats.blockWithTransactions);
        }
        // Strict! Used on input.
        transactionRequest(value) {
            return Formatter.check(this.formats.transactionRequest, value);
        }
        transactionResponse(transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
                transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && BigNumber.from(transaction.to).isZero()) {
                transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
                transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
                transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                transaction.accessList = [];
            }
            const result = Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
                let chainId = transaction.chainId;
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                result.chainId = chainId;
            }
            else {
                let chainId = transaction.networkId;
                // geth-etc returns chainId
                if (chainId == null && result.v == null) {
                    chainId = transaction.chainId;
                }
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                if (typeof (chainId) !== "number" && result.v != null) {
                    chainId = (result.v - 35) / 2;
                    if (chainId < 0) {
                        chainId = 0;
                    }
                    chainId = parseInt(chainId);
                }
                if (typeof (chainId) !== "number") {
                    chainId = 0;
                }
                result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                result.blockHash = null;
            }
            return result;
        }
        transaction(value) {
            return parse(value);
        }
        receiptLog(value) {
            return Formatter.check(this.formats.receiptLog, value);
        }
        receipt(value) {
            const result = Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
                if (result.root.length <= 4) {
                    // Could be 0x00, 0x0, 0x01 or 0x1
                    const value = BigNumber.from(result.root).toNumber();
                    if (value === 0 || value === 1) {
                        // Make sure if both are specified, they match
                        if (result.status != null && (result.status !== value)) {
                            logger$h.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                        }
                        result.status = value;
                        delete result.root;
                    }
                    else {
                        logger$h.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                    }
                }
                else if (result.root.length !== 66) {
                    // Must be a valid bytes32
                    logger$h.throwArgumentError("invalid root hash", "value.root", result.root);
                }
            }
            if (result.status != null) {
                result.byzantium = true;
            }
            return result;
        }
        topics(value) {
            if (Array.isArray(value)) {
                return value.map((v) => this.topics(v));
            }
            else if (value != null) {
                return this.hash(value, true);
            }
            return null;
        }
        filter(value) {
            return Formatter.check(this.formats.filter, value);
        }
        filterLog(value) {
            return Formatter.check(this.formats.filterLog, value);
        }
        static check(format, object) {
            const result = {};
            for (const key in format) {
                try {
                    const value = format[key](object[key]);
                    if (value !== undefined) {
                        result[key] = value;
                    }
                }
                catch (error) {
                    error.checkKey = key;
                    error.checkValue = object[key];
                    throw error;
                }
            }
            return result;
        }
        // if value is null-ish, nullValue is returned
        static allowNull(format, nullValue) {
            return (function (value) {
                if (value == null) {
                    return nullValue;
                }
                return format(value);
            });
        }
        // If value is false-ish, replaceValue is returned
        static allowFalsish(format, replaceValue) {
            return (function (value) {
                if (!value) {
                    return replaceValue;
                }
                return format(value);
            });
        }
        // Requires an Array satisfying check
        static arrayOf(format) {
            return (function (array) {
                if (!Array.isArray(array)) {
                    throw new Error("not an array");
                }
                const result = [];
                array.forEach(function (value) {
                    result.push(format(value));
                });
                return result;
            });
        }
    }
    function isCommunityResourcable(value) {
        return (value && typeof (value.isCommunityResource) === "function");
    }
    function isCommunityResource(value) {
        return (isCommunityResourcable(value) && value.isCommunityResource());
    }
    // Show the throttle message only once
    let throttleMessage = false;
    function showThrottleMessage() {
        if (throttleMessage) {
            return;
        }
        throttleMessage = true;
        console.log("========= NOTICE =========");
        console.log("Request-Rate Exceeded  (this message will not be repeated)");
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https:/\/docs.ethers.io/api-keys/");
        console.log("==========================");
    }

    var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$g = new Logger(version$5);
    const MAX_CCIP_REDIRECTS = 10;
    //////////////////////////////
    // Event Serializeing
    function checkTopic(topic) {
        if (topic == null) {
            return "null";
        }
        if (hexDataLength(topic) !== 32) {
            logger$g.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
    }
    function serializeTopics(topics) {
        // Remove trailing null AND-topics; they are redundant
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
        }
        return topics.map((topic) => {
            if (Array.isArray(topic)) {
                // Only track unique OR-topics
                const unique = {};
                topic.forEach((topic) => {
                    unique[checkTopic(topic)] = true;
                });
                // The order of OR-topics does not matter
                const sorted = Object.keys(unique);
                sorted.sort();
                return sorted.join("|");
            }
            else {
                return checkTopic(topic);
            }
        }).join("&");
    }
    function deserializeTopics(data) {
        if (data === "") {
            return [];
        }
        return data.split(/&/g).map((topic) => {
            if (topic === "") {
                return [];
            }
            const comps = topic.split("|").map((topic) => {
                return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
        });
    }
    function getEventTag(eventName) {
        if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if (hexDataLength(eventName) === 32) {
                return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
                return eventName;
            }
        }
        else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
        }
        else if (ForkEvent.isForkEvent(eventName)) {
            logger$g.warn("not implemented");
            throw new Error("not implemented");
        }
        else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
    }
    //////////////////////////////
    // Helper Object
    function getTime() {
        return (new Date()).getTime();
    }
    function stall$1(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    //////////////////////////////
    // Provider Object
    /**
     *  EventType
     *   - "block"
     *   - "poll"
     *   - "didPoll"
     *   - "pending"
     *   - "error"
     *   - "network"
     *   - filter
     *   - topics array
     *   - transaction hash
     */
    const PollableEvents = ["block", "network", "pending", "poll"];
    class Event {
        constructor(tag, listener, once) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "listener", listener);
            defineReadOnly(this, "once", once);
            this._lastBlockNumber = -2;
            this._inflight = false;
        }
        get event() {
            switch (this.type) {
                case "tx":
                    return this.hash;
                case "filter":
                    return this.filter;
            }
            return this.tag;
        }
        get type() {
            return this.tag.split(":")[0];
        }
        get hash() {
            const comps = this.tag.split(":");
            if (comps[0] !== "tx") {
                return null;
            }
            return comps[1];
        }
        get filter() {
            const comps = this.tag.split(":");
            if (comps[0] !== "filter") {
                return null;
            }
            const address = comps[1];
            const topics = deserializeTopics(comps[2]);
            const filter = {};
            if (topics.length > 0) {
                filter.topics = topics;
            }
            if (address && address !== "*") {
                filter.address = address;
            }
            return filter;
        }
        pollable() {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
        }
    }
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    const coinInfos = {
        "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" },
    };
    function bytes32ify(value) {
        return hexZeroPad(BigNumber.from(value).toHexString(), 32);
    }
    // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
    function base58Encode(data) {
        return Base58.encode(concat$2([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
    }
    const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    const matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    function _parseString(result, start) {
        try {
            return toUtf8String(_parseBytes(result, start));
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result, start) {
        if (result === "0x") {
            return null;
        }
        const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
        return hexDataSlice(result, offset + 32, offset + 32 + length);
    }
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            logger$g.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return `https:/\/gateway.ipfs.io/ipfs/${link}`;
    }
    function numPad(value) {
        const result = arrayify(value);
        if (result.length > 32) {
            throw new Error("internal; should not happen");
        }
        const padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
    }
    function bytesPad(value) {
        if ((value.length % 32) === 0) {
            return value;
        }
        const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
    }
    // ABI Encodes a series of (bytes, bytes, ...)
    function encodeBytes(datas) {
        const result = [];
        let byteCount = 0;
        // Add place-holders for pointers as we add items
        for (let i = 0; i < datas.length; i++) {
            result.push(null);
            byteCount += 32;
        }
        for (let i = 0; i < datas.length; i++) {
            const data = arrayify(datas[i]);
            // Update the bytes offset
            result[i] = numPad(byteCount);
            // The length and padded value of data
            result.push(numPad(data.length));
            result.push(bytesPad(data));
            byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return hexConcat(result);
    }
    class Resolver {
        // The resolvedAddress is only for creating a ReverseLookup resolver
        constructor(provider, address, name, resolvedAddress) {
            defineReadOnly(this, "provider", provider);
            defineReadOnly(this, "name", name);
            defineReadOnly(this, "address", provider.formatter.address(address));
            defineReadOnly(this, "_resolvedAddress", resolvedAddress);
        }
        supportsWildcard() {
            if (!this._supportsEip2544) {
                // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
                this._supportsEip2544 = this.provider.call({
                    to: this.address,
                    data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                }).then((result) => {
                    return BigNumber.from(result).eq(1);
                }).catch((error) => {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return false;
                    }
                    // Rethrow the error: link is down, etc. Let future attempts retry.
                    this._supportsEip2544 = null;
                    throw error;
                });
            }
            return this._supportsEip2544;
        }
        _fetch(selector, parameters) {
            return __awaiter$6(this, void 0, void 0, function* () {
                // e.g. keccak256("addr(bytes32,uint256)")
                const tx = {
                    to: this.address,
                    ccipReadEnabled: true,
                    data: hexConcat([selector, namehash(this.name), (parameters || "0x")])
                };
                // Wildcard support; use EIP-2544 to resolve the request
                let parseBytes = false;
                if (yield this.supportsWildcard()) {
                    parseBytes = true;
                    // selector("resolve(bytes,bytes)")
                    tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
                }
                try {
                    let result = yield this.provider.call(tx);
                    if ((arrayify(result).length % 32) === 4) {
                        logger$g.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                            transaction: tx, data: result
                        });
                    }
                    if (parseBytes) {
                        result = _parseBytes(result, 0);
                    }
                    return result;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return null;
                    }
                    throw error;
                }
            });
        }
        _fetchBytes(selector, parameters) {
            return __awaiter$6(this, void 0, void 0, function* () {
                const result = yield this._fetch(selector, parameters);
                if (result != null) {
                    return _parseBytes(result, 0);
                }
                return null;
            });
        }
        _getAddress(coinType, hexBytes) {
            const coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
                logger$g.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `getAddress(${coinType})`
                });
            }
            if (coinInfo.ilk === "eth") {
                return this.provider.formatter.address(hexBytes);
            }
            const bytes = arrayify(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
                const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                if (p2pkh) {
                    const length = parseInt(p2pkh[1], 16);
                    if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat$2([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                    }
                }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
                const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                if (p2sh) {
                    const length = parseInt(p2sh[1], 16);
                    if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat$2([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                    }
                }
            }
            // Bech32
            if (coinInfo.prefix != null) {
                const length = bytes[1];
                // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                let version = bytes[0];
                if (version === 0x00) {
                    if (length !== 20 && length !== 32) {
                        version = -1;
                    }
                }
                else {
                    version = -1;
                }
                if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                    const words = bech32.toWords(bytes.slice(2));
                    words.unshift(version);
                    return bech32.encode(coinInfo.prefix, words);
                }
            }
            return null;
        }
        getAddress(coinType) {
            return __awaiter$6(this, void 0, void 0, function* () {
                if (coinType == null) {
                    coinType = 60;
                }
                // If Ethereum, use the standard `addr(bytes32)`
                if (coinType === 60) {
                    try {
                        // keccak256("addr(bytes32)")
                        const result = yield this._fetch("0x3b3b57de");
                        // No address
                        if (result === "0x" || result === HashZero) {
                            return null;
                        }
                        return this.provider.formatter.callAddress(result);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.CALL_EXCEPTION) {
                            return null;
                        }
                        throw error;
                    }
                }
                // keccak256("addr(bytes32,uint256")
                const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
                // No address
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // Compute the address
                const address = this._getAddress(coinType, hexBytes);
                if (address == null) {
                    logger$g.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `getAddress(${coinType})`,
                        coinType: coinType,
                        data: hexBytes
                    });
                }
                return address;
            });
        }
        getAvatar() {
            return __awaiter$6(this, void 0, void 0, function* () {
                const linkage = [{ type: "name", content: this.name }];
                try {
                    // test data for ricmoo.eth
                    //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                    const avatar = yield this.getText("avatar");
                    if (avatar == null) {
                        return null;
                    }
                    for (let i = 0; i < matchers.length; i++) {
                        const match = avatar.match(matchers[i]);
                        if (match == null) {
                            continue;
                        }
                        const scheme = match[1].toLowerCase();
                        switch (scheme) {
                            case "https":
                                linkage.push({ type: "url", content: avatar });
                                return { linkage, url: avatar };
                            case "data":
                                linkage.push({ type: "data", content: avatar });
                                return { linkage, url: avatar };
                            case "ipfs":
                                linkage.push({ type: "ipfs", content: avatar });
                                return { linkage, url: getIpfsLink(avatar) };
                            case "erc721":
                            case "erc1155": {
                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                const selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                                linkage.push({ type: scheme, content: avatar });
                                // The owner of this name
                                const owner = (this._resolvedAddress || (yield this.getAddress()));
                                const comps = (match[2] || "").split("/");
                                if (comps.length !== 2) {
                                    return null;
                                }
                                const addr = yield this.provider.formatter.address(comps[0]);
                                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                                // Check that this account owns the token
                                if (scheme === "erc721") {
                                    // ownerOf(uint256 tokenId)
                                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x6352211e", tokenId])
                                    }));
                                    if (owner !== tokenOwner) {
                                        return null;
                                    }
                                    linkage.push({ type: "owner", content: tokenOwner });
                                }
                                else if (scheme === "erc1155") {
                                    // balanceOf(address owner, uint256 tokenId)
                                    const balance = BigNumber.from(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                                    }));
                                    if (balance.isZero()) {
                                        return null;
                                    }
                                    linkage.push({ type: "balance", content: balance.toString() });
                                }
                                // Call the token contract for the metadata URL
                                const tx = {
                                    to: this.provider.formatter.address(comps[0]),
                                    data: hexConcat([selector, tokenId])
                                };
                                let metadataUrl = _parseString(yield this.provider.call(tx), 0);
                                if (metadataUrl == null) {
                                    return null;
                                }
                                linkage.push({ type: "metadata-url-base", content: metadataUrl });
                                // ERC-1155 allows a generic {id} in the URL
                                if (scheme === "erc1155") {
                                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                                }
                                // Transform IPFS metadata links
                                if (metadataUrl.match(/^ipfs:/i)) {
                                    metadataUrl = getIpfsLink(metadataUrl);
                                }
                                linkage.push({ type: "metadata-url", content: metadataUrl });
                                // Get the token metadata
                                const metadata = yield fetchJson(metadataUrl);
                                if (!metadata) {
                                    return null;
                                }
                                linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                                // Pull the image URL out
                                let imageUrl = metadata.image;
                                if (typeof (imageUrl) !== "string") {
                                    return null;
                                }
                                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                    // Allow
                                }
                                else {
                                    // Transform IPFS link to gateway
                                    const ipfs = imageUrl.match(matcherIpfs);
                                    if (ipfs == null) {
                                        return null;
                                    }
                                    linkage.push({ type: "url-ipfs", content: imageUrl });
                                    imageUrl = getIpfsLink(imageUrl);
                                }
                                linkage.push({ type: "url", content: imageUrl });
                                return { linkage, url: imageUrl };
                            }
                        }
                    }
                }
                catch (error) { }
                return null;
            });
        }
        getContentHash() {
            return __awaiter$6(this, void 0, void 0, function* () {
                // keccak256("contenthash()")
                const hexBytes = yield this._fetchBytes("0xbc1c58d1");
                // No contenthash
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // IPFS (CID: 1, Type: DAG-PB)
                const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipfs) {
                    const length = parseInt(ipfs[3], 16);
                    if (ipfs[4].length === length * 2) {
                        return "ipfs:/\/" + Base58.encode("0x" + ipfs[1]);
                    }
                }
                // IPNS (CID: 1, Type: libp2p-key)
                const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipns) {
                    const length = parseInt(ipns[3], 16);
                    if (ipns[4].length === length * 2) {
                        return "ipns:/\/" + Base58.encode("0x" + ipns[1]);
                    }
                }
                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
                const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                if (swarm) {
                    if (swarm[1].length === (32 * 2)) {
                        return "bzz:/\/" + swarm[1];
                    }
                }
                const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                if (skynet) {
                    if (skynet[1].length === (34 * 2)) {
                        // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                        const urlSafe = { "=": "", "+": "-", "/": "_" };
                        const hash = encode$1("0x" + skynet[1]).replace(/[=+\/]/g, (a) => (urlSafe[a]));
                        return "sia:/\/" + hash;
                    }
                }
                return logger$g.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getContentHash()",
                    data: hexBytes
                });
            });
        }
        getText(key) {
            return __awaiter$6(this, void 0, void 0, function* () {
                // The key encoded as parameter to fetchBytes
                let keyBytes = toUtf8Bytes(key);
                // The nodehash consumes the first slot, so the string pointer targets
                // offset 64, with the length at offset 64 and data starting at offset 96
                keyBytes = concat$2([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                // Pad to word-size (32 bytes)
                if ((keyBytes.length % 32) !== 0) {
                    keyBytes = concat$2([keyBytes, hexZeroPad("0x", 32 - (key.length % 32))]);
                }
                const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                return toUtf8String(hexBytes);
            });
        }
    }
    let defaultFormatter = null;
    let nextPollId = 1;
    class BaseProvider extends Provider {
        /**
         *  ready
         *
         *  A Promise<Network> that resolves only once the provider is ready.
         *
         *  Sub-classes that call the super with a network without a chainId
         *  MUST set this. Standard named networks have a known chainId.
         *
         */
        constructor(network) {
            super();
            // Events being listened to
            this._events = [];
            this._emitted = { block: -2 };
            this.disableCcipRead = false;
            this.formatter = new.target.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            defineReadOnly(this, "anyNetwork", (network === "any"));
            if (this.anyNetwork) {
                network = this.detectNetwork();
            }
            if (network instanceof Promise) {
                this._networkPromise = network;
                // Squash any "unhandled promise" errors; that do not need to be handled
                network.catch((error) => { });
                // Trigger initial network setting (async)
                this._ready().catch((error) => { });
            }
            else {
                const knownNetwork = getStatic(new.target, "getNetwork")(network);
                if (knownNetwork) {
                    defineReadOnly(this, "_network", knownNetwork);
                    this.emit("network", knownNetwork, null);
                }
                else {
                    logger$g.throwArgumentError("invalid network", "network", network);
                }
            }
            this._maxInternalBlockNumber = -1024;
            this._lastBlockNumber = -2;
            this._maxFilterBlockRange = 10;
            this._pollingInterval = 4000;
            this._fastQueryDate = 0;
        }
        _ready() {
            return __awaiter$6(this, void 0, void 0, function* () {
                if (this._network == null) {
                    let network = null;
                    if (this._networkPromise) {
                        try {
                            network = yield this._networkPromise;
                        }
                        catch (error) { }
                    }
                    // Try the Provider's network detection (this MUST throw if it cannot)
                    if (network == null) {
                        network = yield this.detectNetwork();
                    }
                    // This should never happen; every Provider sub-class should have
                    // suggested a network by here (or have thrown).
                    if (!network) {
                        logger$g.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // Possible this call stacked so do not call defineReadOnly again
                    if (this._network == null) {
                        if (this.anyNetwork) {
                            this._network = network;
                        }
                        else {
                            defineReadOnly(this, "_network", network);
                        }
                        this.emit("network", network, null);
                    }
                }
                return this._network;
            });
        }
        // This will always return the most recently established network.
        // For "any", this can change (a "network" event is emitted before
        // any change is reflected); otherwise this cannot change
        get ready() {
            return poll(() => {
                return this._ready().then((network) => {
                    return network;
                }, (error) => {
                    // If the network isn't running yet, we will wait
                    if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                        return undefined;
                    }
                    throw error;
                });
            });
        }
        // @TODO: Remove this and just create a singleton formatter
        static getFormatter() {
            if (defaultFormatter == null) {
                defaultFormatter = new Formatter();
            }
            return defaultFormatter;
        }
        // @TODO: Remove this and just use getNetwork
        static getNetwork(network) {
            return getNetwork((network == null) ? "homestead" : network);
        }
        ccipReadFetch(tx, calldata, urls) {
            return __awaiter$6(this, void 0, void 0, function* () {
                if (this.disableCcipRead || urls.length === 0) {
                    return null;
                }
                const sender = tx.to.toLowerCase();
                const data = calldata.toLowerCase();
                const errorMessages = [];
                for (let i = 0; i < urls.length; i++) {
                    const url = urls[i];
                    // URL expansion
                    const href = url.replace("{sender}", sender).replace("{data}", data);
                    // If no {data} is present, use POST; otherwise GET
                    const json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data, sender });
                    const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
                        value.status = response.statusCode;
                        return value;
                    });
                    if (result.data) {
                        return result.data;
                    }
                    const errorMessage = (result.message || "unknown error");
                    // 4xx indicates the result is not present; stop
                    if (result.status >= 400 && result.status < 500) {
                        return logger$g.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
                    }
                    // 5xx indicates server issue; try the next url
                    errorMessages.push(errorMessage);
                }
                return logger$g.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, Logger.errors.SERVER_ERROR, {
                    urls, errorMessages
                });
            });
        }
        // Fetches the blockNumber, but will reuse any result that is less
        // than maxAge old or has been requested since the last request
        _getInternalBlockNumber(maxAge) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this._ready();
                // Allowing stale data up to maxAge old
                if (maxAge > 0) {
                    // While there are pending internal block requests...
                    while (this._internalBlockNumber) {
                        // ..."remember" which fetch we started with
                        const internalBlockNumber = this._internalBlockNumber;
                        try {
                            // Check the result is not too stale
                            const result = yield internalBlockNumber;
                            if ((getTime() - result.respTime) <= maxAge) {
                                return result.blockNumber;
                            }
                            // Too old; fetch a new value
                            break;
                        }
                        catch (error) {
                            // The fetch rejected; if we are the first to get the
                            // rejection, drop through so we replace it with a new
                            // fetch; all others blocked will then get that fetch
                            // which won't match the one they "remembered" and loop
                            if (this._internalBlockNumber === internalBlockNumber) {
                                break;
                            }
                        }
                    }
                }
                const reqTime = getTime();
                const checkInternalBlockNumber = resolveProperties({
                    blockNumber: this.perform("getBlockNumber", {}),
                    networkError: this.getNetwork().then((network) => (null), (error) => (error))
                }).then(({ blockNumber, networkError }) => {
                    if (networkError) {
                        // Unremember this bad internal block number
                        if (this._internalBlockNumber === checkInternalBlockNumber) {
                            this._internalBlockNumber = null;
                        }
                        throw networkError;
                    }
                    const respTime = getTime();
                    blockNumber = BigNumber.from(blockNumber).toNumber();
                    if (blockNumber < this._maxInternalBlockNumber) {
                        blockNumber = this._maxInternalBlockNumber;
                    }
                    this._maxInternalBlockNumber = blockNumber;
                    this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                    return { blockNumber, reqTime, respTime };
                });
                this._internalBlockNumber = checkInternalBlockNumber;
                // Swallow unhandled exceptions; if needed they are handled else where
                checkInternalBlockNumber.catch((error) => {
                    // Don't null the dead (rejected) fetch, if it has already been updated
                    if (this._internalBlockNumber === checkInternalBlockNumber) {
                        this._internalBlockNumber = null;
                    }
                });
                return (yield checkInternalBlockNumber).blockNumber;
            });
        }
        poll() {
            return __awaiter$6(this, void 0, void 0, function* () {
                const pollId = nextPollId++;
                // Track all running promises, so we can trigger a post-poll once they are complete
                const runners = [];
                let blockNumber = null;
                try {
                    blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                }
                catch (error) {
                    this.emit("error", error);
                    return;
                }
                this._setFastBlockNumber(blockNumber);
                // Emit a poll event after we have the latest (fast) block number
                this.emit("poll", pollId, blockNumber);
                // If the block has not changed, meh.
                if (blockNumber === this._lastBlockNumber) {
                    this.emit("didPoll", pollId);
                    return;
                }
                // First polling cycle, trigger a "block" events
                if (this._emitted.block === -2) {
                    this._emitted.block = blockNumber - 1;
                }
                if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                    logger$g.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                    this.emit("error", logger$g.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                        blockNumber: blockNumber,
                        event: "blockSkew",
                        previousBlockNumber: this._emitted.block
                    }));
                    this.emit("block", blockNumber);
                }
                else {
                    // Notify all listener for each block that has passed
                    for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                        this.emit("block", i);
                    }
                }
                // The emitted block was updated, check for obsolete events
                if (this._emitted.block !== blockNumber) {
                    this._emitted.block = blockNumber;
                    Object.keys(this._emitted).forEach((key) => {
                        // The block event does not expire
                        if (key === "block") {
                            return;
                        }
                        // The block we were at when we emitted this event
                        const eventBlockNumber = this._emitted[key];
                        // We cannot garbage collect pending transactions or blocks here
                        // They should be garbage collected by the Provider when setting
                        // "pending" events
                        if (eventBlockNumber === "pending") {
                            return;
                        }
                        // Evict any transaction hashes or block hashes over 12 blocks
                        // old, since they should not return null anyways
                        if (blockNumber - eventBlockNumber > 12) {
                            delete this._emitted[key];
                        }
                    });
                }
                // First polling cycle
                if (this._lastBlockNumber === -2) {
                    this._lastBlockNumber = blockNumber - 1;
                }
                // Find all transaction hashes we are waiting on
                this._events.forEach((event) => {
                    switch (event.type) {
                        case "tx": {
                            const hash = event.hash;
                            let runner = this.getTransactionReceipt(hash).then((receipt) => {
                                if (!receipt || receipt.blockNumber == null) {
                                    return null;
                                }
                                this._emitted["t:" + hash] = receipt.blockNumber;
                                this.emit(hash, receipt);
                                return null;
                            }).catch((error) => { this.emit("error", error); });
                            runners.push(runner);
                            break;
                        }
                        case "filter": {
                            // We only allow a single getLogs to be in-flight at a time
                            if (!event._inflight) {
                                event._inflight = true;
                                // Filter from the last known event; due to load-balancing
                                // and some nodes returning updated block numbers before
                                // indexing events, a logs result with 0 entries cannot be
                                // trusted and we must retry a range which includes it again
                                const filter = event.filter;
                                filter.fromBlock = event._lastBlockNumber + 1;
                                filter.toBlock = blockNumber;
                                // Prevent fitler ranges from growing too wild
                                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {
                                    filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
                                }
                                const runner = this.getLogs(filter).then((logs) => {
                                    // Allow the next getLogs
                                    event._inflight = false;
                                    if (logs.length === 0) {
                                        return;
                                    }
                                    logs.forEach((log) => {
                                        // Only when we get an event for a given block number
                                        // can we trust the events are indexed
                                        if (log.blockNumber > event._lastBlockNumber) {
                                            event._lastBlockNumber = log.blockNumber;
                                        }
                                        // Make sure we stall requests to fetch blocks and txs
                                        this._emitted["b:" + log.blockHash] = log.blockNumber;
                                        this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                        this.emit(filter, log);
                                    });
                                }).catch((error) => {
                                    this.emit("error", error);
                                    // Allow another getLogs (the range was not updated)
                                    event._inflight = false;
                                });
                                runners.push(runner);
                            }
                            break;
                        }
                    }
                });
                this._lastBlockNumber = blockNumber;
                // Once all events for this loop have been processed, emit "didPoll"
                Promise.all(runners).then(() => {
                    this.emit("didPoll", pollId);
                }).catch((error) => { this.emit("error", error); });
                return;
            });
        }
        // Deprecated; do not use this
        resetEventsBlock(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
                this.poll();
            }
        }
        get network() {
            return this._network;
        }
        // This method should query the network if the underlying network
        // can change, such as when connected to a JSON-RPC backend
        detectNetwork() {
            return __awaiter$6(this, void 0, void 0, function* () {
                return logger$g.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "provider.detectNetwork"
                });
            });
        }
        getNetwork() {
            return __awaiter$6(this, void 0, void 0, function* () {
                const network = yield this._ready();
                // Make sure we are still connected to the same network; this is
                // only an external call for backends which can have the underlying
                // network change spontaneously
                const currentNetwork = yield this.detectNetwork();
                if (network.chainId !== currentNetwork.chainId) {
                    // We are allowing network changes, things can get complex fast;
                    // make sure you know what you are doing if you use "any"
                    if (this.anyNetwork) {
                        this._network = currentNetwork;
                        // Reset all internal block number guards and caches
                        this._lastBlockNumber = -2;
                        this._fastBlockNumber = null;
                        this._fastBlockNumberPromise = null;
                        this._fastQueryDate = 0;
                        this._emitted.block = -2;
                        this._maxInternalBlockNumber = -1024;
                        this._internalBlockNumber = null;
                        // The "network" event MUST happen before this method resolves
                        // so any events have a chance to unregister, so we stall an
                        // additional event loop before returning from /this/ call
                        this.emit("network", currentNetwork, network);
                        yield stall$1(0);
                        return this._network;
                    }
                    const error = logger$g.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                        event: "changed",
                        network: network,
                        detectedNetwork: currentNetwork
                    });
                    this.emit("error", error);
                    throw error;
                }
                return network;
            });
        }
        get blockNumber() {
            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
                this._setFastBlockNumber(blockNumber);
            }, (error) => { });
            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
        }
        get polling() {
            return (this._poller != null);
        }
        set polling(value) {
            if (value && !this._poller) {
                this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);
                if (!this._bootstrapPoll) {
                    this._bootstrapPoll = setTimeout(() => {
                        this.poll();
                        // We block additional polls until the polling interval
                        // is done, to prevent overwhelming the poll function
                        this._bootstrapPoll = setTimeout(() => {
                            // If polling was disabled, something may require a poke
                            // since starting the bootstrap poll and it was disabled
                            if (!this._poller) {
                                this.poll();
                            }
                            // Clear out the bootstrap so we can do another
                            this._bootstrapPoll = null;
                        }, this.pollingInterval);
                    }, 0);
                }
            }
            else if (!value && this._poller) {
                clearInterval(this._poller);
                this._poller = null;
            }
        }
        get pollingInterval() {
            return this._pollingInterval;
        }
        set pollingInterval(value) {
            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                throw new Error("invalid polling interval");
            }
            this._pollingInterval = value;
            if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);
            }
        }
        _getFastBlockNumber() {
            const now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                this._fastQueryDate = now;
                this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
                    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                        this._fastBlockNumber = blockNumber;
                    }
                    return this._fastBlockNumber;
                });
            }
            return this._fastBlockNumberPromise;
        }
        _setFastBlockNumber(blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                this._fastBlockNumber = blockNumber;
                this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
        }
        waitForTransaction(transactionHash, confirmations, timeout) {
            return __awaiter$6(this, void 0, void 0, function* () {
                return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);
            });
        }
        _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
            return __awaiter$6(this, void 0, void 0, function* () {
                const receipt = yield this.getTransactionReceipt(transactionHash);
                // Receipt is already good
                if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                    return receipt;
                }
                // Poll until the receipt is good...
                return new Promise((resolve, reject) => {
                    const cancelFuncs = [];
                    let done = false;
                    const alreadyDone = function () {
                        if (done) {
                            return true;
                        }
                        done = true;
                        cancelFuncs.forEach((func) => { func(); });
                        return false;
                    };
                    const minedHandler = (receipt) => {
                        if (receipt.confirmations < confirmations) {
                            return;
                        }
                        if (alreadyDone()) {
                            return;
                        }
                        resolve(receipt);
                    };
                    this.on(transactionHash, minedHandler);
                    cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });
                    if (replaceable) {
                        let lastBlockNumber = replaceable.startBlock;
                        let scannedBlock = null;
                        const replaceHandler = (blockNumber) => __awaiter$6(this, void 0, void 0, function* () {
                            if (done) {
                                return;
                            }
                            // Wait 1 second; this is only used in the case of a fault, so
                            // we will trade off a little bit of latency for more consistent
                            // results and fewer JSON-RPC calls
                            yield stall$1(1000);
                            this.getTransactionCount(replaceable.from).then((nonce) => __awaiter$6(this, void 0, void 0, function* () {
                                if (done) {
                                    return;
                                }
                                if (nonce <= replaceable.nonce) {
                                    lastBlockNumber = blockNumber;
                                }
                                else {
                                    // First check if the transaction was mined
                                    {
                                        const mined = yield this.getTransaction(transactionHash);
                                        if (mined && mined.blockNumber != null) {
                                            return;
                                        }
                                    }
                                    // First time scanning. We start a little earlier for some
                                    // wiggle room here to handle the eventually consistent nature
                                    // of blockchain (e.g. the getTransactionCount was for a
                                    // different block)
                                    if (scannedBlock == null) {
                                        scannedBlock = lastBlockNumber - 3;
                                        if (scannedBlock < replaceable.startBlock) {
                                            scannedBlock = replaceable.startBlock;
                                        }
                                    }
                                    while (scannedBlock <= blockNumber) {
                                        if (done) {
                                            return;
                                        }
                                        const block = yield this.getBlockWithTransactions(scannedBlock);
                                        for (let ti = 0; ti < block.transactions.length; ti++) {
                                            const tx = block.transactions[ti];
                                            // Successfully mined!
                                            if (tx.hash === transactionHash) {
                                                return;
                                            }
                                            // Matches our transaction from and nonce; its a replacement
                                            if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                if (done) {
                                                    return;
                                                }
                                                // Get the receipt of the replacement
                                                const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                // Already resolved or rejected (prolly a timeout)
                                                if (alreadyDone()) {
                                                    return;
                                                }
                                                // The reason we were replaced
                                                let reason = "replaced";
                                                if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                    reason = "repriced";
                                                }
                                                else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                    reason = "cancelled";
                                                }
                                                // Explain why we were replaced
                                                reject(logger$g.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                                    cancelled: (reason === "replaced" || reason === "cancelled"),
                                                    reason,
                                                    replacement: this._wrapTransaction(tx),
                                                    hash: transactionHash,
                                                    receipt
                                                }));
                                                return;
                                            }
                                        }
                                        scannedBlock++;
                                    }
                                }
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            }), (error) => {
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            });
                        });
                        if (done) {
                            return;
                        }
                        this.once("block", replaceHandler);
                        cancelFuncs.push(() => {
                            this.removeListener("block", replaceHandler);
                        });
                    }
                    if (typeof (timeout) === "number" && timeout > 0) {
                        const timer = setTimeout(() => {
                            if (alreadyDone()) {
                                return;
                            }
                            reject(logger$g.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout: timeout }));
                        }, timeout);
                        if (timer.unref) {
                            timer.unref();
                        }
                        cancelFuncs.push(() => { clearTimeout(timer); });
                    }
                });
            });
        }
        getBlockNumber() {
            return __awaiter$6(this, void 0, void 0, function* () {
                return this._getInternalBlockNumber(0);
            });
        }
        getGasPrice() {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const result = yield this.perform("getGasPrice", {});
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getGasPrice",
                        result, error
                    });
                }
            });
        }
        getBalance(addressOrName, blockTag) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getBalance", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getBalance",
                        params, result, error
                    });
                }
            });
        }
        getTransactionCount(addressOrName, blockTag) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getTransactionCount", params);
                try {
                    return BigNumber.from(result).toNumber();
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getTransactionCount",
                        params, result, error
                    });
                }
            });
        }
        getCode(addressOrName, blockTag) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getCode", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getCode",
                        params, result, error
                    });
                }
            });
        }
        getStorageAt(addressOrName, position, blockTag) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag),
                    position: Promise.resolve(position).then((p) => hexValue(p))
                });
                const result = yield this.perform("getStorageAt", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getStorageAt",
                        params, result, error
                    });
                }
            });
        }
        // This should be called by any subclass wrapping a TransactionResponse
        _wrapTransaction(tx, hash, startBlock) {
            if (hash != null && hexDataLength(hash) !== 32) {
                throw new Error("invalid response - sendTransaction");
            }
            const result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
                logger$g.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = (confirms, timeout) => __awaiter$6(this, void 0, void 0, function* () {
                if (confirms == null) {
                    confirms = 1;
                }
                if (timeout == null) {
                    timeout = 0;
                }
                // Get the details to detect replacement
                let replacement = undefined;
                if (confirms !== 0 && startBlock != null) {
                    replacement = {
                        data: tx.data,
                        from: tx.from,
                        nonce: tx.nonce,
                        to: tx.to,
                        value: tx.value,
                        startBlock
                    };
                }
                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                if (receipt == null && confirms === 0) {
                    return null;
                }
                // No longer pending, allow the polling loop to garbage collect this
                this._emitted["t:" + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) {
                    logger$g.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx,
                        receipt: receipt
                    });
                }
                return receipt;
            });
            return result;
        }
        sendTransaction(signedTransaction) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));
                const tx = this.formatter.transaction(signedTransaction);
                if (tx.confirmations == null) {
                    tx.confirmations = 0;
                }
                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                try {
                    const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
                    return this._wrapTransaction(tx, hash, blockNumber);
                }
                catch (error) {
                    error.transaction = tx;
                    error.transactionHash = tx.hash;
                    throw error;
                }
            });
        }
        _getTransactionRequest(transaction) {
            return __awaiter$6(this, void 0, void 0, function* () {
                const values = yield transaction;
                const tx = {};
                ["from", "to"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));
                });
                ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));
                });
                ["type"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));
                });
                if (values.accessList) {
                    tx.accessList = this.formatter.accessList(values.accessList);
                }
                ["data"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));
                });
                return this.formatter.transactionRequest(yield resolveProperties(tx));
            });
        }
        _getFilter(filter) {
            return __awaiter$6(this, void 0, void 0, function* () {
                filter = yield filter;
                const result = {};
                if (filter.address != null) {
                    result.address = this._getAddress(filter.address);
                }
                ["blockHash", "topics"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = filter[key];
                });
                ["fromBlock", "toBlock"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = this._getBlockTag(filter[key]);
                });
                return this.formatter.filter(yield resolveProperties(result));
            });
        }
        _call(transaction, blockTag, attempt) {
            return __awaiter$6(this, void 0, void 0, function* () {
                if (attempt >= MAX_CCIP_REDIRECTS) {
                    logger$g.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
                        redirects: attempt, transaction
                    });
                }
                const txSender = transaction.to;
                const result = yield this.perform("call", { transaction, blockTag });
                // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)
                if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (hexDataLength(result) % 32 === 4)) {
                    try {
                        const data = hexDataSlice(result, 4);
                        // Check the sender of the OffchainLookup matches the transaction
                        const sender = hexDataSlice(data, 0, 32);
                        if (!BigNumber.from(sender).eq(txSender)) {
                            logger$g.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        // Read the URLs from the response
                        const urls = [];
                        const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
                        const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
                        const urlsData = hexDataSlice(data, urlsOffset + 32);
                        for (let u = 0; u < urlsLength; u++) {
                            const url = _parseString(urlsData, u * 32);
                            if (url == null) {
                                logger$g.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction, data: result
                                });
                            }
                            urls.push(url);
                        }
                        // Get the CCIP calldata to forward
                        const calldata = _parseBytes(data, 64);
                        // Get the callbackSelector (bytes4)
                        if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                            logger$g.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const callbackSelector = hexDataSlice(data, 96, 100);
                        // Get the extra data to send back to the contract as context
                        const extraData = _parseBytes(data, 128);
                        const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                        if (ccipResult == null) {
                            logger$g.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const tx = {
                            to: txSender,
                            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
                        };
                        return this._call(tx, blockTag, attempt + 1);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.SERVER_ERROR) {
                            throw error;
                        }
                    }
                }
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "call",
                        params: { transaction, blockTag }, result, error
                    });
                }
            });
        }
        call(transaction, blockTag) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const resolved = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction),
                    blockTag: this._getBlockTag(blockTag),
                    ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                });
                return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
            });
        }
        estimateGas(transaction) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction)
                });
                const result = yield this.perform("estimateGas", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "estimateGas",
                        params, result, error
                    });
                }
            });
        }
        _getAddress(addressOrName) {
            return __awaiter$6(this, void 0, void 0, function* () {
                addressOrName = yield addressOrName;
                if (typeof (addressOrName) !== "string") {
                    logger$g.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                }
                const address = yield this.resolveName(addressOrName);
                if (address == null) {
                    logger$g.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `resolveName(${JSON.stringify(addressOrName)})`
                    });
                }
                return address;
            });
        }
        _getBlock(blockHashOrBlockTag, includeTransactions) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                blockHashOrBlockTag = yield blockHashOrBlockTag;
                // If blockTag is a number (not "latest", etc), this is the block number
                let blockNumber = -128;
                const params = {
                    includeTransactions: !!includeTransactions
                };
                if (isHexString(blockHashOrBlockTag, 32)) {
                    params.blockHash = blockHashOrBlockTag;
                }
                else {
                    try {
                        params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                        if (isHexString(params.blockTag)) {
                            blockNumber = parseInt(params.blockTag.substring(2), 16);
                        }
                    }
                    catch (error) {
                        logger$g.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                    }
                }
                return poll(() => __awaiter$6(this, void 0, void 0, function* () {
                    const block = yield this.perform("getBlock", params);
                    // Block was not found
                    if (block == null) {
                        // For blockhashes, if we didn't say it existed, that blockhash may
                        // not exist. If we did see it though, perhaps from a log, we know
                        // it exists, and this node is just not caught up yet.
                        if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) {
                                return null;
                            }
                        }
                        // For block tags, if we are asking for a future block, we return null
                        if (params.blockTag != null) {
                            if (blockNumber > this._emitted.block) {
                                return null;
                            }
                        }
                        // Retry on the next block
                        return undefined;
                    }
                    // Add transactions
                    if (includeTransactions) {
                        let blockNumber = null;
                        for (let i = 0; i < block.transactions.length; i++) {
                            const tx = block.transactions[i];
                            if (tx.blockNumber == null) {
                                tx.confirmations = 0;
                            }
                            else if (tx.confirmations == null) {
                                if (blockNumber == null) {
                                    blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                }
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = (blockNumber - tx.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                            }
                        }
                        const blockWithTxs = this.formatter.blockWithTransactions(block);
                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
                        return blockWithTxs;
                    }
                    return this.formatter.block(block);
                }), { oncePoll: this });
            });
        }
        getBlock(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
        }
        getBlockWithTransactions(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
        }
        getTransaction(transactionHash) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$6(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransaction", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    const tx = this.formatter.transactionResponse(result);
                    if (tx.blockNumber == null) {
                        tx.confirmations = 0;
                    }
                    else if (tx.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - tx.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        tx.confirmations = confirmations;
                    }
                    return this._wrapTransaction(tx);
                }), { oncePoll: this });
            });
        }
        getTransactionReceipt(transactionHash) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$6(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransactionReceipt", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    // "geth-etc" returns receipts before they are ready
                    if (result.blockHash == null) {
                        return undefined;
                    }
                    const receipt = this.formatter.receipt(result);
                    if (receipt.blockNumber == null) {
                        receipt.confirmations = 0;
                    }
                    else if (receipt.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - receipt.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        receipt.confirmations = confirmations;
                    }
                    return receipt;
                }), { oncePoll: this });
            });
        }
        getLogs(filter) {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({ filter: this._getFilter(filter) });
                const logs = yield this.perform("getLogs", params);
                logs.forEach((log) => {
                    if (log.removed == null) {
                        log.removed = false;
                    }
                });
                return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
            });
        }
        getEtherPrice() {
            return __awaiter$6(this, void 0, void 0, function* () {
                yield this.getNetwork();
                return this.perform("getEtherPrice", {});
            });
        }
        _getBlockTag(blockTag) {
            return __awaiter$6(this, void 0, void 0, function* () {
                blockTag = yield blockTag;
                if (typeof (blockTag) === "number" && blockTag < 0) {
                    if (blockTag % 1) {
                        logger$g.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                    }
                    let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                    blockNumber += blockTag;
                    if (blockNumber < 0) {
                        blockNumber = 0;
                    }
                    return this.formatter.blockTag(blockNumber);
                }
                return this.formatter.blockTag(blockTag);
            });
        }
        getResolver(name) {
            return __awaiter$6(this, void 0, void 0, function* () {
                let currentName = name;
                while (true) {
                    if (currentName === "" || currentName === ".") {
                        return null;
                    }
                    // Optimization since the eth node cannot change and does
                    // not have a wildcard resolver
                    if (name !== "eth" && currentName === "eth") {
                        return null;
                    }
                    // Check the current node for a resolver
                    const addr = yield this._getResolver(currentName, "getResolver");
                    // Found a resolver!
                    if (addr != null) {
                        const resolver = new Resolver(this, addr, name);
                        // Legacy resolver found, using EIP-2544 so it isn't safe to use
                        if (currentName !== name && !(yield resolver.supportsWildcard())) {
                            return null;
                        }
                        return resolver;
                    }
                    // Get the parent node
                    currentName = currentName.split(".").slice(1).join(".");
                }
            });
        }
        _getResolver(name, operation) {
            return __awaiter$6(this, void 0, void 0, function* () {
                if (operation == null) {
                    operation = "ENS";
                }
                const network = yield this.getNetwork();
                // No ENS...
                if (!network.ensAddress) {
                    logger$g.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
                }
                try {
                    // keccak256("resolver(bytes32)")
                    const addrData = yield this.call({
                        to: network.ensAddress,
                        data: ("0x0178b8bf" + namehash(name).substring(2))
                    });
                    return this.formatter.callAddress(addrData);
                }
                catch (error) {
                    // ENS registry cannot throw errors on resolver(bytes32)
                }
                return null;
            });
        }
        resolveName(name) {
            return __awaiter$6(this, void 0, void 0, function* () {
                name = yield name;
                // If it is already an address, nothing to resolve
                try {
                    return Promise.resolve(this.formatter.address(name));
                }
                catch (error) {
                    // If is is a hexstring, the address is bad (See #694)
                    if (isHexString(name)) {
                        throw error;
                    }
                }
                if (typeof (name) !== "string") {
                    logger$g.throwArgumentError("invalid ENS name", "name", name);
                }
                // Get the addr from the resolver
                const resolver = yield this.getResolver(name);
                if (!resolver) {
                    return null;
                }
                return yield resolver.getAddress();
            });
        }
        lookupAddress(address) {
            return __awaiter$6(this, void 0, void 0, function* () {
                address = yield address;
                address = this.formatter.address(address);
                const node = address.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddr = yield this._getResolver(node, "lookupAddress");
                if (resolverAddr == null) {
                    return null;
                }
                // keccak("name(bytes32)")
                const name = _parseString(yield this.call({
                    to: resolverAddr,
                    data: ("0x691f3431" + namehash(node).substring(2))
                }), 0);
                const addr = yield this.resolveName(name);
                if (addr != address) {
                    return null;
                }
                return name;
            });
        }
        getAvatar(nameOrAddress) {
            return __awaiter$6(this, void 0, void 0, function* () {
                let resolver = null;
                if (isHexString(nameOrAddress)) {
                    // Address; reverse lookup
                    const address = this.formatter.address(nameOrAddress);
                    const node = address.substring(2).toLowerCase() + ".addr.reverse";
                    const resolverAddress = yield this._getResolver(node, "getAvatar");
                    if (!resolverAddress) {
                        return null;
                    }
                    // Try resolving the avatar against the addr.reverse resolver
                    resolver = new Resolver(this, resolverAddress, node);
                    try {
                        const avatar = yield resolver.getAvatar();
                        if (avatar) {
                            return avatar.url;
                        }
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                    }
                    // Try getting the name and performing forward lookup; allowing wildcards
                    try {
                        // keccak("name(bytes32)")
                        const name = _parseString(yield this.call({
                            to: resolverAddress,
                            data: ("0x691f3431" + namehash(node).substring(2))
                        }), 0);
                        resolver = yield this.getResolver(name);
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                        return null;
                    }
                }
                else {
                    // ENS name; forward lookup with wildcard
                    resolver = yield this.getResolver(nameOrAddress);
                    if (!resolver) {
                        return null;
                    }
                }
                const avatar = yield resolver.getAvatar();
                if (avatar == null) {
                    return null;
                }
                return avatar.url;
            });
        }
        perform(method, params) {
            return logger$g.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
        }
        _startEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _stopEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _addEventListener(eventName, listener, once) {
            const event = new Event(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
        }
        on(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
        }
        once(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
        }
        emit(eventName, ...args) {
            let result = false;
            let stopped = [];
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag) {
                    return true;
                }
                setTimeout(() => {
                    event.listener.apply(this, args);
                }, 0);
                result = true;
                if (event.once) {
                    stopped.push(event);
                    return false;
                }
                return true;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return result;
        }
        listenerCount(eventName) {
            if (!eventName) {
                return this._events.length;
            }
            let eventTag = getEventTag(eventName);
            return this._events.filter((event) => {
                return (event.tag === eventTag);
            }).length;
        }
        listeners(eventName) {
            if (eventName == null) {
                return this._events.map((event) => event.listener);
            }
            let eventTag = getEventTag(eventName);
            return this._events
                .filter((event) => (event.tag === eventTag))
                .map((event) => event.listener);
        }
        off(eventName, listener) {
            if (listener == null) {
                return this.removeAllListeners(eventName);
            }
            const stopped = [];
            let found = false;
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag || event.listener != listener) {
                    return true;
                }
                if (found) {
                    return true;
                }
                found = true;
                stopped.push(event);
                return false;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
        removeAllListeners(eventName) {
            let stopped = [];
            if (eventName == null) {
                stopped = this._events;
                this._events = [];
            }
            else {
                const eventTag = getEventTag(eventName);
                this._events = this._events.filter((event) => {
                    if (event.tag !== eventTag) {
                        return true;
                    }
                    stopped.push(event);
                    return false;
                });
            }
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
    }

    var __awaiter$5 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$f = new Logger(version$5);
    const errorGas = ["call", "estimateGas"];
    function spelunk(value, requireData) {
        if (value == null) {
            return null;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string" && value.message.match("reverted")) {
            const data = isHexString(value.data) ? value.data : null;
            if (!requireData || data) {
                return { message: value.message, data };
            }
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (const key in value) {
                const result = spelunk(value[key], requireData);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return spelunk(JSON.parse(value), requireData);
            }
            catch (error) { }
        }
        return null;
    }
    function checkError$1(method, error, params) {
        const transaction = params.transaction || params.signedTransaction;
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call") {
            const result = spelunk(error, true);
            if (result) {
                return result.data;
            }
            // Nothing descriptive..
            logger$f.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
                data: "0x", transaction, error
            });
        }
        if (method === "estimateGas") {
            // Try to find something, with a preference on SERVER_ERROR body
            let result = spelunk(error.body, false);
            if (result == null) {
                result = spelunk(error, false);
            }
            // Found "reverted", this is a CALL_EXCEPTION
            if (result) {
                logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    reason: result.message, method, transaction, error
                });
            }
        }
        // @TODO: Should we spelunk for message too?
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
        }
        else if (typeof (error.body) === "string") {
            message = error.body;
        }
        else if (typeof (error.responseText) === "string") {
            message = error.responseText;
        }
        message = (message || "").toLowerCase();
        // "insufficient funds for gas * price + value + cost(data)"
        if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
            logger$f.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "nonce too low"
        if (message.match(/nonce (is )?too low/i)) {
            logger$f.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
            logger$f.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/only replay-protected/i)) {
            logger$f.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
                error, method, transaction
            });
        }
        if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
            logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    function timer(timeout) {
        return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
        });
    }
    function getResult$1(payload) {
        if (payload.error) {
            // @TODO: not any
            const error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    const _constructorGuard = {};
    class JsonRpcSigner extends Signer {
        constructor(constructorGuard, provider, addressOrIndex) {
            super();
            if (constructorGuard !== _constructorGuard) {
                throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            defineReadOnly(this, "provider", provider);
            if (addressOrIndex == null) {
                addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
                defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
                defineReadOnly(this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
                defineReadOnly(this, "_index", addressOrIndex);
                defineReadOnly(this, "_address", null);
            }
            else {
                logger$f.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
        }
        connect(provider) {
            return logger$f.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "connect"
            });
        }
        connectUnchecked() {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
        }
        getAddress() {
            if (this._address) {
                return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then((accounts) => {
                if (accounts.length <= this._index) {
                    logger$f.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    });
                }
                return this.provider.formatter.address(accounts[this._index]);
            });
        }
        sendUncheckedTransaction(transaction) {
            transaction = shallowCopy(transaction);
            const fromAddress = this.getAddress().then((address) => {
                if (address) {
                    address = address.toLowerCase();
                }
                return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
                const estimate = shallowCopy(transaction);
                estimate.from = fromAddress;
                transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
                transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter$5(this, void 0, void 0, function* () {
                    if (to == null) {
                        return null;
                    }
                    const address = yield this.provider.resolveName(to);
                    if (address == null) {
                        logger$f.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                    }
                    return address;
                }));
            }
            return resolveProperties({
                tx: resolveProperties(transaction),
                sender: fromAddress
            }).then(({ tx, sender }) => {
                if (tx.from != null) {
                    if (tx.from.toLowerCase() !== sender) {
                        logger$f.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                }
                else {
                    tx.from = sender;
                }
                const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
                return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
                    return hash;
                }, (error) => {
                    return checkError$1("sendTransaction", error, hexTx);
                });
            });
        }
        signTransaction(transaction) {
            return logger$f.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "signTransaction"
            });
        }
        sendTransaction(transaction) {
            return __awaiter$5(this, void 0, void 0, function* () {
                // This cannot be mined any earlier than any recent block
                const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
                // Send the transaction
                const hash = yield this.sendUncheckedTransaction(transaction);
                try {
                    // Unfortunately, JSON-RPC only provides and opaque transaction hash
                    // for a response, and we need the actual transaction, so we poll
                    // for it; it should show up very quickly
                    return yield poll(() => __awaiter$5(this, void 0, void 0, function* () {
                        const tx = yield this.provider.getTransaction(hash);
                        if (tx === null) {
                            return undefined;
                        }
                        return this.provider._wrapTransaction(tx, hash, blockNumber);
                    }), { oncePoll: this.provider });
                }
                catch (error) {
                    error.transactionHash = hash;
                    throw error;
                }
            });
        }
        signMessage(message) {
            return __awaiter$5(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
            });
        }
        _legacySignMessage(message) {
            return __awaiter$5(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$5(this, void 0, void 0, function* () {
                // Populate any ENS names (in-place)
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    return this.provider.resolveName(name);
                });
                const address = yield this.getAddress();
                return yield this.provider.send("eth_signTypedData_v4", [
                    address.toLowerCase(),
                    JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                ]);
            });
        }
        unlock(password) {
            return __awaiter$5(this, void 0, void 0, function* () {
                const provider = this.provider;
                const address = yield this.getAddress();
                return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
            });
        }
    }
    class UncheckedJsonRpcSigner extends JsonRpcSigner {
        sendTransaction(transaction) {
            return this.sendUncheckedTransaction(transaction).then((hash) => {
                return {
                    hash: hash,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }
                };
            });
        }
    }
    const allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true
    };
    class JsonRpcProvider extends BaseProvider {
        constructor(url, network) {
            let networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then((network) => {
                            resolve(network);
                        }, (error) => {
                            reject(error);
                        });
                    }, 0);
                });
            }
            super(networkOrReady);
            // Default URL
            if (!url) {
                url = getStatic(this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
                defineReadOnly(this, "connection", Object.freeze({
                    url: url
                }));
            }
            else {
                defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
            }
            this._nextId = 42;
        }
        get _cache() {
            if (this._eventLoopCache == null) {
                this._eventLoopCache = {};
            }
            return this._eventLoopCache;
        }
        static defaultUrl() {
            return "http:/\/localhost:8545";
        }
        detectNetwork() {
            if (!this._cache["detectNetwork"]) {
                this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                // Clear this cache at the beginning of the next event loop
                setTimeout(() => {
                    this._cache["detectNetwork"] = null;
                }, 0);
            }
            return this._cache["detectNetwork"];
        }
        _uncachedDetectNetwork() {
            return __awaiter$5(this, void 0, void 0, function* () {
                yield timer(0);
                let chainId = null;
                try {
                    chainId = yield this.send("eth_chainId", []);
                }
                catch (error) {
                    try {
                        chainId = yield this.send("net_version", []);
                    }
                    catch (error) { }
                }
                if (chainId != null) {
                    const getNetwork = getStatic(this.constructor, "getNetwork");
                    try {
                        return getNetwork(BigNumber.from(chainId).toNumber());
                    }
                    catch (error) {
                        return logger$f.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                            chainId: chainId,
                            event: "invalidNetwork",
                            serverError: error
                        });
                    }
                }
                return logger$f.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                    event: "noNetwork"
                });
            });
        }
        getSigner(addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
        }
        getUncheckedSigner(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
        }
        listAccounts() {
            return this.send("eth_accounts", []).then((accounts) => {
                return accounts.map((a) => this.formatter.address(a));
            });
        }
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            this.emit("debug", {
                action: "request",
                request: deepCopy(request),
                provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            const cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
                return this._cache[method];
            }
            const result = fetchJson(this.connection, JSON.stringify(request), getResult$1).then((result) => {
                this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: this
                });
                return result;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: this
                });
                throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
                this._cache[method] = result;
                setTimeout(() => {
                    this._cache[method] = null;
                }, 0);
            }
            return result;
        }
        prepareRequest(method, params) {
            switch (method) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                case "getCode":
                    return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [params.signedTransaction]];
                case "getBlock":
                    if (params.blockTag) {
                        return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                    }
                    else if (params.blockHash) {
                        return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                    }
                    return null;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [params.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [params.transactionHash]];
                case "call": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                }
                case "estimateGas": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                }
                case "getLogs":
                    if (params.filter && params.filter.address != null) {
                        params.filter.address = getLowerCase(params.filter.address);
                    }
                    return ["eth_getLogs", [params.filter]];
            }
            return null;
        }
        perform(method, params) {
            return __awaiter$5(this, void 0, void 0, function* () {
                // Legacy networks do not like the type field being passed along (which
                // is fair), so we delete type if it is 0 and a non-EIP-1559 network
                if (method === "call" || method === "estimateGas") {
                    const tx = params.transaction;
                    if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                        // If there are no EIP-1559 properties, it might be non-EIP-1559
                        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                            const feeData = yield this.getFeeData();
                            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                // Network doesn't know about EIP-1559 (and hence type)
                                params = shallowCopy(params);
                                params.transaction = shallowCopy(tx);
                                delete params.transaction.type;
                            }
                        }
                    }
                }
                const args = this.prepareRequest(method, params);
                if (args == null) {
                    logger$f.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
                }
                try {
                    return yield this.send(args[0], args[1]);
                }
                catch (error) {
                    return checkError$1(method, error, params);
                }
            });
        }
        _startEvent(event) {
            if (event.tag === "pending") {
                this._startPending();
            }
            super._startEvent(event);
        }
        _startPending() {
            if (this._pendingFilter != null) {
                return;
            }
            const self = this;
            const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
                function poll() {
                    self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                        if (self._pendingFilter != pendingFilter) {
                            return null;
                        }
                        let seq = Promise.resolve();
                        hashes.forEach(function (hash) {
                            // @TODO: This should be garbage collected at some point... How? When?
                            self._emitted["t:" + hash.toLowerCase()] = "pending";
                            seq = seq.then(function () {
                                return self.getTransaction(hash).then(function (tx) {
                                    self.emit("pending", tx);
                                    return null;
                                });
                            });
                        });
                        return seq.then(function () {
                            return timer(1000);
                        });
                    }).then(function () {
                        if (self._pendingFilter != pendingFilter) {
                            self.send("eth_uninstallFilter", [filterId]);
                            return;
                        }
                        setTimeout(function () { poll(); }, 0);
                        return null;
                    }).catch((error) => { });
                }
                poll();
                return filterId;
            }).catch((error) => { });
        }
        _stopEvent(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                this._pendingFilter = null;
            }
            super._stopEvent(event);
        }
        // Convert an ethers.js transaction into a JSON-RPC transaction
        //  - gasLimit => gas
        //  - All values hexlified
        //  - All numeric values zero-striped
        //  - All addresses are lowercased
        // NOTE: This allows a TransactionRequest, but all values should be resolved
        //       before this is called
        // @TODO: This will likely be removed in future versions and prepareRequest
        //        will be the preferred method for this.
        static hexlifyTransaction(transaction, allowExtra) {
            // Check only allowed properties are given
            const allowed = shallowCopy(allowedTransactionKeys);
            if (allowExtra) {
                for (const key in allowExtra) {
                    if (allowExtra[key]) {
                        allowed[key] = true;
                    }
                }
            }
            checkProperties(transaction, allowed);
            const result = {};
            // JSON-RPC now requires numeric values to be "quantity" values
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                const value = hexValue(BigNumber.from(transaction[key]));
                if (key === "gasLimit") {
                    key = "gas";
                }
                result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                result[key] = hexlify(transaction[key]);
            });
            if (transaction.accessList) {
                result["accessList"] = accessListify(transaction.accessList);
            }
            return result;
        }
    }

    let WS = null;
    try {
        WS = WebSocket;
        if (WS == null) {
            throw new Error("inject please");
        }
    }
    catch (error) {
        const logger = new Logger(version$5);
        WS = function () {
            logger.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new WebSocket()"
            });
        };
    }

    var __awaiter$4 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$e = new Logger(version$5);
    /**
     *  Notes:
     *
     *  This provider differs a bit from the polling providers. One main
     *  difference is how it handles consistency. The polling providers
     *  will stall responses to ensure a consistent state, while this
     *  WebSocket provider assumes the connected backend will manage this.
     *
     *  For example, if a polling provider emits an event which indicates
     *  the event occurred in blockhash XXX, a call to fetch that block by
     *  its hash XXX, if not present will retry until it is present. This
     *  can occur when querying a pool of nodes that are mildly out of sync
     *  with each other.
     */
    let NextId = 1;
    // For more info about the Real-time Event API see:
    //   https://geth.ethereum.org/docs/rpc/pubsub
    class WebSocketProvider extends JsonRpcProvider {
        constructor(url, network) {
            // This will be added in the future; please open an issue to expedite
            if (network === "any") {
                logger$e.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "network:any"
                });
            }
            if (typeof (url) === "string") {
                super(url, network);
            }
            else {
                super("_websocket", network);
            }
            this._pollingInterval = -1;
            this._wsReady = false;
            if (typeof (url) === "string") {
                defineReadOnly(this, "_websocket", new WS(this.connection.url));
            }
            else {
                defineReadOnly(this, "_websocket", url);
            }
            defineReadOnly(this, "_requests", {});
            defineReadOnly(this, "_subs", {});
            defineReadOnly(this, "_subIds", {});
            defineReadOnly(this, "_detectNetwork", super.detectNetwork());
            // Stall sending requests until the socket is open...
            this.websocket.onopen = () => {
                this._wsReady = true;
                Object.keys(this._requests).forEach((id) => {
                    this.websocket.send(this._requests[id].payload);
                });
            };
            this.websocket.onmessage = (messageEvent) => {
                const data = messageEvent.data;
                const result = JSON.parse(data);
                if (result.id != null) {
                    const id = String(result.id);
                    const request = this._requests[id];
                    delete this._requests[id];
                    if (result.result !== undefined) {
                        request.callback(null, result.result);
                        this.emit("debug", {
                            action: "response",
                            request: JSON.parse(request.payload),
                            response: result.result,
                            provider: this
                        });
                    }
                    else {
                        let error = null;
                        if (result.error) {
                            error = new Error(result.error.message || "unknown error");
                            defineReadOnly(error, "code", result.error.code || null);
                            defineReadOnly(error, "response", data);
                        }
                        else {
                            error = new Error("unknown error");
                        }
                        request.callback(error, undefined);
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: JSON.parse(request.payload),
                            provider: this
                        });
                    }
                }
                else if (result.method === "eth_subscription") {
                    // Subscription...
                    const sub = this._subs[result.params.subscription];
                    if (sub) {
                        //this.emit.apply(this,                  );
                        sub.processFunc(result.params.result);
                    }
                }
                else {
                    console.warn("this should not happen");
                }
            };
            // This Provider does not actually poll, but we want to trigger
            // poll events for things that depend on them (like stalling for
            // block and transaction lookups)
            const fauxPoll = setInterval(() => {
                this.emit("poll");
            }, 1000);
            if (fauxPoll.unref) {
                fauxPoll.unref();
            }
        }
        // Cannot narrow the type of _websocket, as that is not backwards compatible
        // so we add a getter and let the WebSocket be a public API.
        get websocket() { return this._websocket; }
        detectNetwork() {
            return this._detectNetwork;
        }
        get pollingInterval() {
            return 0;
        }
        resetEventsBlock(blockNumber) {
            logger$e.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resetEventBlock"
            });
        }
        set pollingInterval(value) {
            logger$e.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPollingInterval"
            });
        }
        poll() {
            return __awaiter$4(this, void 0, void 0, function* () {
                return null;
            });
        }
        set polling(value) {
            if (!value) {
                return;
            }
            logger$e.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPolling"
            });
        }
        send(method, params) {
            const rid = NextId++;
            return new Promise((resolve, reject) => {
                function callback(error, result) {
                    if (error) {
                        return reject(error);
                    }
                    return resolve(result);
                }
                const payload = JSON.stringify({
                    method: method,
                    params: params,
                    id: rid,
                    jsonrpc: "2.0"
                });
                this.emit("debug", {
                    action: "request",
                    request: JSON.parse(payload),
                    provider: this
                });
                this._requests[String(rid)] = { callback, payload };
                if (this._wsReady) {
                    this.websocket.send(payload);
                }
            });
        }
        static defaultUrl() {
            return "ws:/\/localhost:8546";
        }
        _subscribe(tag, param, processFunc) {
            return __awaiter$4(this, void 0, void 0, function* () {
                let subIdPromise = this._subIds[tag];
                if (subIdPromise == null) {
                    subIdPromise = Promise.all(param).then((param) => {
                        return this.send("eth_subscribe", param);
                    });
                    this._subIds[tag] = subIdPromise;
                }
                const subId = yield subIdPromise;
                this._subs[subId] = { tag, processFunc };
            });
        }
        _startEvent(event) {
            switch (event.type) {
                case "block":
                    this._subscribe("block", ["newHeads"], (result) => {
                        const blockNumber = BigNumber.from(result.number).toNumber();
                        this._emitted.block = blockNumber;
                        this.emit("block", blockNumber);
                    });
                    break;
                case "pending":
                    this._subscribe("pending", ["newPendingTransactions"], (result) => {
                        this.emit("pending", result);
                    });
                    break;
                case "filter":
                    this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
                        if (result.removed == null) {
                            result.removed = false;
                        }
                        this.emit(event.filter, this.formatter.filterLog(result));
                    });
                    break;
                case "tx": {
                    const emitReceipt = (event) => {
                        const hash = event.hash;
                        this.getTransactionReceipt(hash).then((receipt) => {
                            if (!receipt) {
                                return;
                            }
                            this.emit(hash, receipt);
                        });
                    };
                    // In case it is already mined
                    emitReceipt(event);
                    // To keep things simple, we start up a single newHeads subscription
                    // to keep an eye out for transactions we are watching for.
                    // Starting a subscription for an event (i.e. "tx") that is already
                    // running is (basically) a nop.
                    this._subscribe("tx", ["newHeads"], (result) => {
                        this._events.filter((e) => (e.type === "tx")).forEach(emitReceipt);
                    });
                    break;
                }
                // Nothing is needed
                case "debug":
                case "poll":
                case "willPoll":
                case "didPoll":
                case "error":
                    break;
                default:
                    console.log("unhandled:", event);
                    break;
            }
        }
        _stopEvent(event) {
            let tag = event.tag;
            if (event.type === "tx") {
                // There are remaining transaction event listeners
                if (this._events.filter((e) => (e.type === "tx")).length) {
                    return;
                }
                tag = "tx";
            }
            else if (this.listenerCount(event.event)) {
                // There are remaining event listeners
                return;
            }
            const subId = this._subIds[tag];
            if (!subId) {
                return;
            }
            delete this._subIds[tag];
            subId.then((subId) => {
                if (!this._subs[subId]) {
                    return;
                }
                delete this._subs[subId];
                this.send("eth_unsubscribe", [subId]);
            });
        }
        destroy() {
            return __awaiter$4(this, void 0, void 0, function* () {
                // Wait until we have connected before trying to disconnect
                if (this.websocket.readyState === WS.CONNECTING) {
                    yield (new Promise((resolve) => {
                        this.websocket.onopen = function () {
                            resolve(true);
                        };
                        this.websocket.onerror = function () {
                            resolve(false);
                        };
                    }));
                }
                // Hangup
                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
                this.websocket.close(1000);
            });
        }
    }

    var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$d = new Logger(version$5);
    // A StaticJsonRpcProvider is useful when you *know* for certain that
    // the backend will never change, as it never calls eth_chainId to
    // verify its backend. However, if the backend does change, the effects
    // are undefined and may include:
    // - inconsistent results
    // - locking up the UI
    // - block skew warnings
    // - wrong results
    // If the network is not explicit (i.e. auto-detection is expected), the
    // node MUST be running and available to respond to requests BEFORE this
    // is instantiated.
    class StaticJsonRpcProvider extends JsonRpcProvider {
        detectNetwork() {
            const _super = Object.create(null, {
                detectNetwork: { get: () => super.detectNetwork }
            });
            return __awaiter$3(this, void 0, void 0, function* () {
                let network = this.network;
                if (network == null) {
                    network = yield _super.detectNetwork.call(this);
                    if (!network) {
                        logger$d.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // If still not set, set it
                    if (this._network == null) {
                        // A static network does not support "any"
                        defineReadOnly(this, "_network", network);
                        this.emit("network", network, null);
                    }
                }
                return network;
            });
        }
    }
    class UrlJsonRpcProvider extends StaticJsonRpcProvider {
        constructor(network, apiKey) {
            logger$d.checkAbstract(new.target, UrlJsonRpcProvider);
            // Normalize the Network and API Key
            network = getStatic(new.target, "getNetwork")(network);
            apiKey = getStatic(new.target, "getApiKey")(apiKey);
            const connection = getStatic(new.target, "getUrl")(network, apiKey);
            super(connection, network);
            if (typeof (apiKey) === "string") {
                defineReadOnly(this, "apiKey", apiKey);
            }
            else if (apiKey != null) {
                Object.keys(apiKey).forEach((key) => {
                    defineReadOnly(this, key, apiKey[key]);
                });
            }
        }
        _startPending() {
            logger$d.warn("WARNING: API provider does not support pending filters");
        }
        isCommunityResource() {
            return false;
        }
        getSigner(address) {
            return logger$d.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        }
        listAccounts() {
            return Promise.resolve([]);
        }
        // Return a defaultApiKey if null, otherwise validate the API key
        static getApiKey(apiKey) {
            return apiKey;
        }
        // Returns the url or connection for the given network and API key. The
        // API key will have been sanitized by the getApiKey first, so any validation
        // or transformations can be done there.
        static getUrl(network, apiKey) {
            return logger$d.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
                operation: "getUrl"
            });
        }
    }

    const logger$c = new Logger(version$5);
    // This key was provided to ethers.js by Alchemy to be used by the
    // default provider, but it is recommended that for your own
    // production environments, that you acquire your own API key at:
    //   https://dashboard.alchemyapi.io
    const defaultApiKey$3 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    class AlchemyWebSocketProvider extends WebSocketProvider {
        constructor(network, apiKey) {
            const provider = new AlchemyProvider(network, apiKey);
            const url = provider.connection.url.replace(/^http/i, "ws")
                .replace(".alchemyapi.", ".ws.alchemyapi.");
            super(url, provider.network);
            defineReadOnly(this, "apiKey", provider.apiKey);
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$3);
        }
    }
    class AlchemyProvider extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
            return new AlchemyWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
            if (apiKey == null) {
                return defaultApiKey$3;
            }
            if (apiKey && typeof (apiKey) !== "string") {
                logger$c.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "eth-mainnet.alchemyapi.io/v2/";
                    break;
                case "ropsten":
                    host = "eth-ropsten.alchemyapi.io/v2/";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.alchemyapi.io/v2/";
                    break;
                case "goerli":
                    host = "eth-goerli.alchemyapi.io/v2/";
                    break;
                case "kovan":
                    host = "eth-kovan.alchemyapi.io/v2/";
                    break;
                case "matic":
                    host = "polygon-mainnet.g.alchemy.com/v2/";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.g.alchemy.com/v2/";
                    break;
                case "arbitrum":
                    host = "arb-mainnet.g.alchemy.com/v2/";
                    break;
                case "arbitrum-rinkeby":
                    host = "arb-rinkeby.g.alchemy.com/v2/";
                    break;
                case "optimism":
                    host = "opt-mainnet.g.alchemy.com/v2/";
                    break;
                case "optimism-kovan":
                    host = "opt-kovan.g.alchemy.com/v2/";
                    break;
                default:
                    logger$c.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
                allowGzip: true,
                url: ("https:/" + "/" + host + apiKey),
                throttleCallback: (attempt, url) => {
                    if (apiKey === defaultApiKey$3) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$3);
        }
    }

    const logger$b = new Logger(version$5);
    const defaultApiKey$2 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
        switch (name) {
            case "homestead":
                return "rpc.ankr.com/eth/";
            case "ropsten":
                return "rpc.ankr.com/eth_ropsten/";
            case "rinkeby":
                return "rpc.ankr.com/eth_rinkeby/";
            case "goerli":
                return "rpc.ankr.com/eth_goerli/";
            case "matic":
                return "rpc.ankr.com/polygon/";
            case "arbitrum":
                return "rpc.ankr.com/arbitrum/";
        }
        return logger$b.throwArgumentError("unsupported network", "name", name);
    }
    class AnkrProvider extends UrlJsonRpcProvider {
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$2);
        }
        static getApiKey(apiKey) {
            if (apiKey == null) {
                return defaultApiKey$2;
            }
            return apiKey;
        }
        static getUrl(network, apiKey) {
            if (apiKey == null) {
                apiKey = defaultApiKey$2;
            }
            const connection = {
                allowGzip: true,
                url: ("https:/\/" + getHost(network.name) + apiKey),
                throttleCallback: (attempt, url) => {
                    if (apiKey.apiKey === defaultApiKey$2) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        }
    }

    var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$a = new Logger(version$5);
    class CloudflareProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            if (apiKey != null) {
                logger$a.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://cloudflare-eth.com/";
                    break;
                default:
                    logger$a.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
        }
        perform(method, params) {
            const _super = Object.create(null, {
                perform: { get: () => super.perform }
            });
            return __awaiter$2(this, void 0, void 0, function* () {
                // The Cloudflare provider does not support eth_blockNumber,
                // so we get the latest block and pull it from that
                if (method === "getBlockNumber") {
                    const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
                    return block.number;
                }
                return _super.perform.call(this, method, params);
            });
        }
    }

    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$9 = new Logger(version$5);
    // The transaction has already been sanitized by the calls in Provider
    function getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
            if (transaction[key] == null) {
                continue;
            }
            let value = transaction[key];
            if (key === "type" && value === 0) {
                continue;
            }
            // Quantity-types require no leading zero, unless 0
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
                value = hexValue(hexlify(value));
            }
            else if (key === "accessList") {
                value = "[" + accessListify(value).map((set) => {
                    return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
                }).join(",") + "]";
            }
            else {
                value = hexlify(value);
            }
            result[key] = value;
        }
        return result;
    }
    function getResult(result) {
        // getLogs, getHistory have weird success responses
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
        }
        if (result.status != 1 || result.message != "OK") {
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                error.throttleRetry = true;
            }
            throw error;
        }
        return result.result;
    }
    function getJsonResult(result) {
        // This response indicates we are being throttled
        if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            const error = new Error("throttled response");
            error.result = JSON.stringify(result);
            error.throttleRetry = true;
            throw error;
        }
        if (result.jsonrpc != "2.0") {
            // @TODO: not any
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
        }
        if (result.error) {
            // @TODO: not any
            const error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
                error.code = result.error.code;
            }
            if (result.error.data) {
                error.data = result.error.data;
            }
            throw error;
        }
        return result.result;
    }
    // The blockTag was normalized as a string by the Provider pre-perform operations
    function checkLogTag(blockTag) {
        if (blockTag === "pending") {
            throw new Error("pending not supported");
        }
        if (blockTag === "latest") {
            return blockTag;
        }
        return parseInt(blockTag.substring(2), 16);
    }
    const defaultApiKey$1 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
    function checkError(method, error, transaction) {
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
            const e = error.error;
            // Etherscan keeps changing their string
            if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                // Etherscan prefixes the data like "Reverted 0x1234"
                let data = e.data;
                if (data) {
                    data = "0x" + data.replace(/^.*0x/i, "");
                }
                if (isHexString(data)) {
                    return data;
                }
                logger$9.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
                    error, data: "0x"
                });
            }
        }
        // Get the message from any nested error structure
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR) {
            if (error.error && typeof (error.error.message) === "string") {
                message = error.error.message;
            }
            else if (typeof (error.body) === "string") {
                message = error.body;
            }
            else if (typeof (error.responseText) === "string") {
                message = error.responseText;
            }
        }
        message = (message || "").toLowerCase();
        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
        if (message.match(/insufficient funds/)) {
            logger$9.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "Transaction with the same hash was already imported."
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            logger$9.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
        if (message.match(/another transaction with same nonce/)) {
            logger$9.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        if (message.match(/execution failed due to an exception|execution reverted/)) {
            logger$9.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    class EtherscanProvider extends BaseProvider {
        constructor(network, apiKey) {
            super(network);
            defineReadOnly(this, "baseUrl", this.getBaseUrl());
            defineReadOnly(this, "apiKey", apiKey || defaultApiKey$1);
        }
        getBaseUrl() {
            switch (this.network ? this.network.name : "invalid") {
                case "homestead":
                    return "https:/\/api.etherscan.io";
                case "ropsten":
                    return "https:/\/api-ropsten.etherscan.io";
                case "rinkeby":
                    return "https:/\/api-rinkeby.etherscan.io";
                case "kovan":
                    return "https:/\/api-kovan.etherscan.io";
                case "goerli":
                    return "https:/\/api-goerli.etherscan.io";
                case "optimism":
                    return "https:/\/api-optimistic.etherscan.io";
            }
            return logger$9.throwArgumentError("unsupported network", "network", this.network.name);
        }
        getUrl(module, params) {
            const query = Object.keys(params).reduce((accum, key) => {
                const value = params[key];
                if (value != null) {
                    accum += `&${key}=${value}`;
                }
                return accum;
            }, "");
            const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : "");
            return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
        }
        getPostUrl() {
            return `${this.baseUrl}/api`;
        }
        getPostData(module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
        }
        fetch(module, params, post) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const url = (post ? this.getPostUrl() : this.getUrl(module, params));
                const payload = (post ? this.getPostData(module, params) : null);
                const procFunc = (module === "proxy") ? getJsonResult : getResult;
                this.emit("debug", {
                    action: "request",
                    request: url,
                    provider: this
                });
                const connection = {
                    url: url,
                    throttleSlotInterval: 1000,
                    throttleCallback: (attempt, url) => {
                        if (this.isCommunityResource()) {
                            showThrottleMessage();
                        }
                        return Promise.resolve(true);
                    }
                };
                let payloadStr = null;
                if (payload) {
                    connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                    payloadStr = Object.keys(payload).map((key) => {
                        return `${key}=${payload[key]}`;
                    }).join("&");
                }
                const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
                this.emit("debug", {
                    action: "response",
                    request: url,
                    response: deepCopy(result),
                    provider: this
                });
                return result;
            });
        }
        detectNetwork() {
            return __awaiter$1(this, void 0, void 0, function* () {
                return this.network;
            });
        }
        perform(method, params) {
            const _super = Object.create(null, {
                perform: { get: () => super.perform }
            });
            return __awaiter$1(this, void 0, void 0, function* () {
                switch (method) {
                    case "getBlockNumber":
                        return this.fetch("proxy", { action: "eth_blockNumber" });
                    case "getGasPrice":
                        return this.fetch("proxy", { action: "eth_gasPrice" });
                    case "getBalance":
                        // Returns base-10 result
                        return this.fetch("account", {
                            action: "balance",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getTransactionCount":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionCount",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getCode":
                        return this.fetch("proxy", {
                            action: "eth_getCode",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getStorageAt":
                        return this.fetch("proxy", {
                            action: "eth_getStorageAt",
                            address: params.address,
                            position: params.position,
                            tag: params.blockTag
                        });
                    case "sendTransaction":
                        return this.fetch("proxy", {
                            action: "eth_sendRawTransaction",
                            hex: params.signedTransaction
                        }, true).catch((error) => {
                            return checkError("sendTransaction", error, params.signedTransaction);
                        });
                    case "getBlock":
                        if (params.blockTag) {
                            return this.fetch("proxy", {
                                action: "eth_getBlockByNumber",
                                tag: params.blockTag,
                                boolean: (params.includeTransactions ? "true" : "false")
                            });
                        }
                        throw new Error("getBlock by blockHash not implemented");
                    case "getTransaction":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionByHash",
                            txhash: params.transactionHash
                        });
                    case "getTransactionReceipt":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionReceipt",
                            txhash: params.transactionHash
                        });
                    case "call": {
                        if (params.blockTag !== "latest") {
                            throw new Error("EtherscanProvider does not support blockTag for call");
                        }
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_call";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        }
                        catch (error) {
                            return checkError("call", error, params.transaction);
                        }
                    }
                    case "estimateGas": {
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_estimateGas";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        }
                        catch (error) {
                            return checkError("estimateGas", error, params.transaction);
                        }
                    }
                    case "getLogs": {
                        const args = { action: "getLogs" };
                        if (params.filter.fromBlock) {
                            args.fromBlock = checkLogTag(params.filter.fromBlock);
                        }
                        if (params.filter.toBlock) {
                            args.toBlock = checkLogTag(params.filter.toBlock);
                        }
                        if (params.filter.address) {
                            args.address = params.filter.address;
                        }
                        // @TODO: We can handle slightly more complicated logs using the logs API
                        if (params.filter.topics && params.filter.topics.length > 0) {
                            if (params.filter.topics.length > 1) {
                                logger$9.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                            }
                            if (params.filter.topics.length === 1) {
                                const topic0 = params.filter.topics[0];
                                if (typeof (topic0) !== "string" || topic0.length !== 66) {
                                    logger$9.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                }
                                args.topic0 = topic0;
                            }
                        }
                        const logs = yield this.fetch("logs", args);
                        // Cache txHash => blockHash
                        let blocks = {};
                        // Add any missing blockHash to the logs
                        for (let i = 0; i < logs.length; i++) {
                            const log = logs[i];
                            if (log.blockHash != null) {
                                continue;
                            }
                            if (blocks[log.blockNumber] == null) {
                                const block = yield this.getBlock(log.blockNumber);
                                if (block) {
                                    blocks[log.blockNumber] = block.hash;
                                }
                            }
                            log.blockHash = blocks[log.blockNumber];
                        }
                        return logs;
                    }
                    case "getEtherPrice":
                        if (this.network.name !== "homestead") {
                            return 0.0;
                        }
                        return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
                }
                return _super.perform.call(this, method, params);
            });
        }
        // Note: The `page` page parameter only allows pagination within the
        //       10,000 window available without a page and offset parameter
        //       Error: Result window is too large, PageNo x Offset size must
        //              be less than or equal to 10000
        getHistory(addressOrName, startBlock, endBlock) {
            return __awaiter$1(this, void 0, void 0, function* () {
                const params = {
                    action: "txlist",
                    address: (yield this.resolveName(addressOrName)),
                    startblock: ((startBlock == null) ? 0 : startBlock),
                    endblock: ((endBlock == null) ? 99999999 : endBlock),
                    sort: "asc"
                };
                const result = yield this.fetch("account", params);
                return result.map((tx) => {
                    ["contractAddress", "to"].forEach(function (key) {
                        if (tx[key] == "") {
                            delete tx[key];
                        }
                    });
                    if (tx.creates == null && tx.contractAddress != null) {
                        tx.creates = tx.contractAddress;
                    }
                    const item = this.formatter.transactionResponse(tx);
                    if (tx.timeStamp) {
                        item.timestamp = parseInt(tx.timeStamp);
                    }
                    return item;
                });
            });
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$1);
        }
    }

    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$8 = new Logger(version$5);
    function now() { return (new Date()).getTime(); }
    // Returns to network as long as all agree, or null if any is null.
    // Throws an error if any two networks do not match.
    function checkNetworks(networks) {
        let result = null;
        for (let i = 0; i < networks.length; i++) {
            const network = networks[i];
            // Null! We do not know our network; bail.
            if (network == null) {
                return null;
            }
            if (result) {
                // Make sure the network matches the previous networks
                if (!(result.name === network.name && result.chainId === network.chainId &&
                    ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
                    logger$8.throwArgumentError("provider mismatch", "networks", networks);
                }
            }
            else {
                result = network;
            }
        }
        return result;
    }
    function median(values, maxDelta) {
        values = values.slice().sort();
        const middle = Math.floor(values.length / 2);
        // Odd length; take the middle
        if (values.length % 2) {
            return values[middle];
        }
        // Even length; take the average of the two middle
        const a = values[middle - 1], b = values[middle];
        if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
        }
        return (a + b) / 2;
    }
    function serialize(value) {
        if (value === null) {
            return "null";
        }
        else if (typeof (value) === "number" || typeof (value) === "boolean") {
            return JSON.stringify(value);
        }
        else if (typeof (value) === "string") {
            return value;
        }
        else if (BigNumber.isBigNumber(value)) {
            return value.toString();
        }
        else if (Array.isArray(value)) {
            return JSON.stringify(value.map((i) => serialize(i)));
        }
        else if (typeof (value) === "object") {
            const keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map((key) => {
                let v = value[key];
                if (typeof (v) === "function") {
                    v = "[function]";
                }
                else {
                    v = serialize(v);
                }
                return JSON.stringify(key) + ":" + v;
            }).join(",") + "}";
        }
        throw new Error("unknown value type: " + typeof (value));
    }
    // Next request ID to use for emitting debug info
    let nextRid = 1;
    function stall(duration) {
        let cancel = null;
        let timer = null;
        let promise = (new Promise((resolve) => {
            cancel = function () {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                resolve();
            };
            timer = setTimeout(cancel, duration);
        }));
        const wait = (func) => {
            promise = promise.then(func);
            return promise;
        };
        function getPromise() {
            return promise;
        }
        return { cancel, getPromise, wait };
    }
    const ForwardErrors = [
        Logger.errors.CALL_EXCEPTION,
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
        Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    const ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction",
    ];
    function exposeDebugConfig(config, now) {
        const result = {
            weight: config.weight
        };
        Object.defineProperty(result, "provider", { get: () => config.provider });
        if (config.start) {
            result.start = config.start;
        }
        if (now) {
            result.duration = (now - config.start);
        }
        if (config.done) {
            if (config.error) {
                result.error = config.error;
            }
            else {
                result.result = config.result || null;
            }
        }
        return result;
    }
    function normalizedTally(normalize, quorum) {
        return function (configs) {
            // Count the votes for each result
            const tally = {};
            configs.forEach((c) => {
                const value = normalize(c.result);
                if (!tally[value]) {
                    tally[value] = { count: 0, result: c.result };
                }
                tally[value].count++;
            });
            // Check for a quorum on any given result
            const keys = Object.keys(tally);
            for (let i = 0; i < keys.length; i++) {
                const check = tally[keys[i]];
                if (check.count >= quorum) {
                    return check.result;
                }
            }
            // No quroum
            return undefined;
        };
    }
    function getProcessFunc(provider, method, params) {
        let normalize = serialize;
        switch (method) {
            case "getBlockNumber":
                // Return the median value, unless there is (median + 1) is also
                // present, in which case that is probably true and the median
                // is going to be stale soon. In the event of a malicious node,
                // the lie will be true soon enough.
                return function (configs) {
                    const values = configs.map((c) => c.result);
                    // Get the median block number
                    let blockNumber = median(configs.map((c) => c.result), 2);
                    if (blockNumber == null) {
                        return undefined;
                    }
                    blockNumber = Math.ceil(blockNumber);
                    // If the next block height is present, its prolly safe to use
                    if (values.indexOf(blockNumber + 1) >= 0) {
                        blockNumber++;
                    }
                    // Don't ever roll back the blockNumber
                    if (blockNumber >= provider._highestBlockNumber) {
                        provider._highestBlockNumber = blockNumber;
                    }
                    return provider._highestBlockNumber;
                };
            case "getGasPrice":
                // Return the middle (round index up) value, similar to median
                // but do not average even entries and choose the higher.
                // Malicious actors must compromise 50% of the nodes to lie.
                return function (configs) {
                    const values = configs.map((c) => c.result);
                    values.sort();
                    return values[Math.floor(values.length / 2)];
                };
            case "getEtherPrice":
                // Returns the median price. Malicious actors must compromise at
                // least 50% of the nodes to lie (in a meaningful way).
                return function (configs) {
                    return median(configs.map((c) => c.result));
                };
            // No additional normalizing required; serialize is enough
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getTransaction":
            case "getTransactionReceipt":
                normalize = function (tx) {
                    if (tx == null) {
                        return null;
                    }
                    tx = shallowCopy(tx);
                    tx.confirmations = -1;
                    return serialize(tx);
                };
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getBlock":
                // We drop the confirmations from transactions as it is approximate
                if (params.includeTransactions) {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        block = shallowCopy(block);
                        block.transactions = block.transactions.map((tx) => {
                            tx = shallowCopy(tx);
                            tx.confirmations = -1;
                            return tx;
                        });
                        return serialize(block);
                    };
                }
                else {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        return serialize(block);
                    };
                }
                break;
            default:
                throw new Error("unknown method: " + method);
        }
        // Return the result if and only if the expected quorum is
        // satisfied and agreed upon for the final result.
        return normalizedTally(normalize, provider.quorum);
    }
    // If we are doing a blockTag query, we need to make sure the backend is
    // caught up to the FallbackProvider, before sending a request to it.
    function waitForSync(config, blockNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = (config.provider);
            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
                return provider;
            }
            return poll(() => {
                return new Promise((resolve, reject) => {
                    setTimeout(function () {
                        // We are synced
                        if (provider.blockNumber >= blockNumber) {
                            return resolve(provider);
                        }
                        // We're done; just quit
                        if (config.cancelled) {
                            return resolve(null);
                        }
                        // Try again, next block
                        return resolve(undefined);
                    }, 0);
                });
            }, { oncePoll: provider });
        });
    }
    function getRunner(config, currentBlockNumber, method, params) {
        return __awaiter(this, void 0, void 0, function* () {
            let provider = config.provider;
            switch (method) {
                case "getBlockNumber":
                case "getGasPrice":
                    return provider[method]();
                case "getEtherPrice":
                    if (provider.getEtherPrice) {
                        return provider.getEtherPrice();
                    }
                    break;
                case "getBalance":
                case "getTransactionCount":
                case "getCode":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[method](params.address, params.blockTag || "latest");
                case "getStorageAt":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
                case "getBlock":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash);
                case "call":
                case "estimateGas":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[method](params.transaction);
                case "getTransaction":
                case "getTransactionReceipt":
                    return provider[method](params.transactionHash);
                case "getLogs": {
                    let filter = params.filter;
                    if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getLogs(filter);
                }
            }
            return logger$8.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
                method: method,
                params: params
            });
        });
    }
    class FallbackProvider extends BaseProvider {
        constructor(providers, quorum) {
            if (providers.length === 0) {
                logger$8.throwArgumentError("missing providers", "providers", providers);
            }
            const providerConfigs = providers.map((configOrProvider, index) => {
                if (Provider.isProvider(configOrProvider)) {
                    const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                    const priority = 1;
                    return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
                }
                const config = shallowCopy(configOrProvider);
                if (config.priority == null) {
                    config.priority = 1;
                }
                if (config.stallTimeout == null) {
                    config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                }
                if (config.weight == null) {
                    config.weight = 1;
                }
                const weight = config.weight;
                if (weight % 1 || weight > 512 || weight < 1) {
                    logger$8.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
                }
                return Object.freeze(config);
            });
            const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);
            if (quorum == null) {
                quorum = total / 2;
            }
            else if (quorum > total) {
                logger$8.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            // Are all providers' networks are known
            let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));
            // Not all networks are known; we must stall
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then(resolve, reject);
                    }, 0);
                });
            }
            super(networkOrReady);
            // Preserve a copy, so we do not get mutated
            defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
            defineReadOnly(this, "quorum", quorum);
            this._highestBlockNumber = -1;
        }
        detectNetwork() {
            return __awaiter(this, void 0, void 0, function* () {
                const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
                return checkNetworks(networks);
            });
        }
        perform(method, params) {
            return __awaiter(this, void 0, void 0, function* () {
                // Sending transactions is special; always broadcast it to all backends
                if (method === "sendTransaction") {
                    const results = yield Promise.all(this.providerConfigs.map((c) => {
                        return c.provider.sendTransaction(params.signedTransaction).then((result) => {
                            return result.hash;
                        }, (error) => {
                            return error;
                        });
                    }));
                    // Any success is good enough (other errors are likely "already seen" errors
                    for (let i = 0; i < results.length; i++) {
                        const result = results[i];
                        if (typeof (result) === "string") {
                            return result;
                        }
                    }
                    // They were all an error; pick the first error
                    throw results[0];
                }
                // We need to make sure we are in sync with our backends, so we need
                // to know this before we can make a lot of calls
                if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
                    yield this.getBlockNumber();
                }
                const processFunc = getProcessFunc(this, method, params);
                // Shuffle the providers and then sort them by their priority; we
                // shallowCopy them since we will store the result in them too
                const configs = shuffled(this.providerConfigs.map(shallowCopy));
                configs.sort((a, b) => (a.priority - b.priority));
                const currentBlockNumber = this._highestBlockNumber;
                let i = 0;
                let first = true;
                while (true) {
                    const t0 = now();
                    // Compute the inflight weight (exclude anything past)
                    let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))
                        .reduce((accum, c) => (accum + c.weight), 0);
                    // Start running enough to meet quorum
                    while (inflightWeight < this.quorum && i < configs.length) {
                        const config = configs[i++];
                        const rid = nextRid++;
                        config.start = now();
                        config.staller = stall(config.stallTimeout);
                        config.staller.wait(() => { config.staller = null; });
                        config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                            config.done = true;
                            config.result = result;
                            if (this.listenerCount("debug")) {
                                this.emit("debug", {
                                    action: "request",
                                    rid: rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: { method: method, params: deepCopy(params) },
                                    provider: this
                                });
                            }
                        }, (error) => {
                            config.done = true;
                            config.error = error;
                            if (this.listenerCount("debug")) {
                                this.emit("debug", {
                                    action: "request",
                                    rid: rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: { method: method, params: deepCopy(params) },
                                    provider: this
                                });
                            }
                        });
                        if (this.listenerCount("debug")) {
                            this.emit("debug", {
                                action: "request",
                                rid: rid,
                                backend: exposeDebugConfig(config, null),
                                request: { method: method, params: deepCopy(params) },
                                provider: this
                            });
                        }
                        inflightWeight += config.weight;
                    }
                    // Wait for anything meaningful to finish or stall out
                    const waiting = [];
                    configs.forEach((c) => {
                        if (c.done || !c.runner) {
                            return;
                        }
                        waiting.push(c.runner);
                        if (c.staller) {
                            waiting.push(c.staller.getPromise());
                        }
                    });
                    if (waiting.length) {
                        yield Promise.race(waiting);
                    }
                    // Check the quorum and process the results; the process function
                    // may additionally decide the quorum is not met
                    const results = configs.filter((c) => (c.done && c.error == null));
                    if (results.length >= this.quorum) {
                        const result = processFunc(results);
                        if (result !== undefined) {
                            // Shut down any stallers
                            configs.forEach(c => {
                                if (c.staller) {
                                    c.staller.cancel();
                                }
                                c.cancelled = true;
                            });
                            return result;
                        }
                        if (!first) {
                            yield stall(100).getPromise();
                        }
                        first = false;
                    }
                    // No result, check for errors that should be forwarded
                    const errors = configs.reduce((accum, c) => {
                        if (!c.done || c.error == null) {
                            return accum;
                        }
                        const code = (c.error).code;
                        if (ForwardErrors.indexOf(code) >= 0) {
                            if (!accum[code]) {
                                accum[code] = { error: c.error, weight: 0 };
                            }
                            accum[code].weight += c.weight;
                        }
                        return accum;
                    }, ({}));
                    Object.keys(errors).forEach((errorCode) => {
                        const tally = errors[errorCode];
                        if (tally.weight < this.quorum) {
                            return;
                        }
                        // Shut down any stallers
                        configs.forEach(c => {
                            if (c.staller) {
                                c.staller.cancel();
                            }
                            c.cancelled = true;
                        });
                        const e = (tally.error);
                        const props = {};
                        ForwardProperties.forEach((name) => {
                            if (e[name] == null) {
                                return;
                            }
                            props[name] = e[name];
                        });
                        logger$8.throwError(e.reason || e.message, errorCode, props);
                    });
                    // All configs have run to completion; we will never get more data
                    if (configs.filter((c) => !c.done).length === 0) {
                        break;
                    }
                }
                // Shut down any stallers; shouldn't be any
                configs.forEach(c => {
                    if (c.staller) {
                        c.staller.cancel();
                    }
                    c.cancelled = true;
                });
                return logger$8.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
                    method: method,
                    params: params,
                    //results: configs.map((c) => c.result),
                    //errors: configs.map((c) => c.error),
                    results: configs.map((c) => exposeDebugConfig(c)),
                    provider: this
                });
            });
        }
    }

    const IpcProvider = null;

    const logger$7 = new Logger(version$5);
    const defaultProjectId = "84842078b09946638c03157f83405213";
    class InfuraWebSocketProvider extends WebSocketProvider {
        constructor(network, apiKey) {
            const provider = new InfuraProvider(network, apiKey);
            const connection = provider.connection;
            if (connection.password) {
                logger$7.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "InfuraProvider.getWebSocketProvider()"
                });
            }
            const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            super(url, network);
            defineReadOnly(this, "apiKey", provider.projectId);
            defineReadOnly(this, "projectId", provider.projectId);
            defineReadOnly(this, "projectSecret", provider.projectSecret);
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }
    class InfuraProvider extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
            return new InfuraWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
            const apiKeyObj = {
                apiKey: defaultProjectId,
                projectId: defaultProjectId,
                projectSecret: null
            };
            if (apiKey == null) {
                return apiKeyObj;
            }
            if (typeof (apiKey) === "string") {
                apiKeyObj.projectId = apiKey;
            }
            else if (apiKey.projectSecret != null) {
                logger$7.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
                logger$7.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
                apiKeyObj.projectId = apiKey.projectId;
                apiKeyObj.projectSecret = apiKey.projectSecret;
            }
            else if (apiKey.projectId) {
                apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "mainnet.infura.io";
                    break;
                case "ropsten":
                    host = "ropsten.infura.io";
                    break;
                case "rinkeby":
                    host = "rinkeby.infura.io";
                    break;
                case "kovan":
                    host = "kovan.infura.io";
                    break;
                case "goerli":
                    host = "goerli.infura.io";
                    break;
                case "matic":
                    host = "polygon-mainnet.infura.io";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.infura.io";
                    break;
                case "optimism":
                    host = "optimism-mainnet.infura.io";
                    break;
                case "optimism-kovan":
                    host = "optimism-kovan.infura.io";
                    break;
                case "arbitrum":
                    host = "arbitrum-mainnet.infura.io";
                    break;
                case "arbitrum-rinkeby":
                    host = "arbitrum-rinkeby.infura.io";
                    break;
                default:
                    logger$7.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            const connection = {
                allowGzip: true,
                url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
                throttleCallback: (attempt, url) => {
                    if (apiKey.projectId === defaultProjectId) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }

    // Experimental
    class JsonRpcBatchProvider extends JsonRpcProvider {
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
                this._pendingBatch = [];
            }
            const inflightRequest = { request, resolve: null, reject: null };
            const promise = new Promise((resolve, reject) => {
                inflightRequest.resolve = resolve;
                inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
                // Schedule batch for next event loop + short duration
                this._pendingBatchAggregator = setTimeout(() => {
                    // Get teh current batch and clear it, so new requests
                    // go into the next batch
                    const batch = this._pendingBatch;
                    this._pendingBatch = null;
                    this._pendingBatchAggregator = null;
                    // Get the request as an array of requests
                    const request = batch.map((inflight) => inflight.request);
                    this.emit("debug", {
                        action: "requestBatch",
                        request: deepCopy(request),
                        provider: this
                    });
                    return fetchJson(this.connection, JSON.stringify(request)).then((result) => {
                        this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: this
                        });
                        // For each result, feed it to the correct Promise, depending
                        // on whether it was a success or error
                        batch.forEach((inflightRequest, index) => {
                            const payload = result[index];
                            if (payload.error) {
                                const error = new Error(payload.error.message);
                                error.code = payload.error.code;
                                error.data = payload.error.data;
                                inflightRequest.reject(error);
                            }
                            else {
                                inflightRequest.resolve(payload.result);
                            }
                        });
                    }, (error) => {
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: request,
                            provider: this
                        });
                        batch.forEach((inflightRequest) => {
                            inflightRequest.reject(error);
                        });
                    });
                }, 10);
            }
            return promise;
        }
    }

    /* istanbul ignore file */
    const logger$6 = new Logger(version$5);
    // Special API key provided by Nodesmith for ethers.js
    const defaultApiKey = "ETHERS_JS_SHARED";
    class NodesmithProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            if (apiKey && typeof (apiKey) !== "string") {
                logger$6.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
        }
        static getUrl(network, apiKey) {
            logger$6.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                    break;
                case "ropsten":
                    host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                    break;
                case "rinkeby":
                    host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                    break;
                case "goerli":
                    host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                    break;
                case "kovan":
                    host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                    break;
                default:
                    logger$6.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return (host + "?apiKey=" + apiKey);
        }
    }

    const logger$5 = new Logger(version$5);
    // These are load-balancer-based application IDs
    const defaultApplicationIds = {
        homestead: "6004bcd10040261633ade990",
        ropsten: "6004bd4d0040261633ade991",
        rinkeby: "6004bda20040261633ade994",
        goerli: "6004bd860040261633ade992",
    };
    class PocketProvider extends UrlJsonRpcProvider {
        constructor(network, apiKey) {
            // We need a bit of creativity in the constructor because
            // Pocket uses different default API keys based on the network
            if (apiKey == null) {
                const n = getStatic(new.target, "getNetwork")(network);
                if (n) {
                    const applicationId = defaultApplicationIds[n.name];
                    if (applicationId) {
                        apiKey = {
                            applicationId: applicationId,
                            loadBalancer: true
                        };
                    }
                }
                // If there was any issue above, we don't know this network
                if (apiKey == null) {
                    logger$5.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
                }
            }
            super(network, apiKey);
        }
        static getApiKey(apiKey) {
            // Most API Providers allow null to get the default configuration, but
            // Pocket requires the network to decide the default provider, so we
            // rely on hijacking the constructor to add a sensible default for us
            if (apiKey == null) {
                logger$5.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
            }
            const apiKeyObj = {
                applicationId: null,
                loadBalancer: false,
                applicationSecretKey: null
            };
            // Parse applicationId and applicationSecretKey
            if (typeof (apiKey) === "string") {
                apiKeyObj.applicationId = apiKey;
            }
            else if (apiKey.applicationSecretKey != null) {
                logger$5.assertArgument((typeof (apiKey.applicationId) === "string"), "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
                logger$5.assertArgument((typeof (apiKey.applicationSecretKey) === "string"), "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
                apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else if (apiKey.applicationId) {
                logger$5.assertArgument((typeof (apiKey.applicationId) === "string"), "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else {
                logger$5.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "eth-mainnet.gateway.pokt.network";
                    break;
                case "ropsten":
                    host = "eth-ropsten.gateway.pokt.network";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.gateway.pokt.network";
                    break;
                case "goerli":
                    host = "eth-goerli.gateway.pokt.network";
                    break;
                default:
                    logger$5.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            let url = null;
            if (apiKey.loadBalancer) {
                url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
            }
            else {
                url = `https:/\/${host}/v1/${apiKey.applicationId}`;
            }
            const connection = { url };
            // Initialize empty headers
            connection.headers = {};
            // Apply application secret key
            if (apiKey.applicationSecretKey != null) {
                connection.user = "";
                connection.password = apiKey.applicationSecretKey;
            }
            return connection;
        }
        isCommunityResource() {
            return (this.applicationId === defaultApplicationIds[this.network.name]);
        }
    }

    const logger$4 = new Logger(version$5);
    let _nextId = 1;
    function buildWeb3LegacyFetcher(provider, sendFunc) {
        const fetcher = "Web3LegacyFetcher";
        return function (method, params) {
            const request = {
                method: method,
                params: params,
                id: (_nextId++),
                jsonrpc: "2.0"
            };
            return new Promise((resolve, reject) => {
                this.emit("debug", {
                    action: "request",
                    fetcher,
                    request: deepCopy(request),
                    provider: this
                });
                sendFunc(request, (error, response) => {
                    if (error) {
                        this.emit("debug", {
                            action: "response",
                            fetcher,
                            error,
                            request,
                            provider: this
                        });
                        return reject(error);
                    }
                    this.emit("debug", {
                        action: "response",
                        fetcher,
                        request,
                        response,
                        provider: this
                    });
                    if (response.error) {
                        const error = new Error(response.error.message);
                        error.code = response.error.code;
                        error.data = response.error.data;
                        return reject(error);
                    }
                    resolve(response.result);
                });
            });
        };
    }
    function buildEip1193Fetcher(provider) {
        return function (method, params) {
            if (params == null) {
                params = [];
            }
            const request = { method, params };
            this.emit("debug", {
                action: "request",
                fetcher: "Eip1193Fetcher",
                request: deepCopy(request),
                provider: this
            });
            return provider.request(request).then((response) => {
                this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request,
                    response,
                    provider: this
                });
                return response;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request,
                    error,
                    provider: this
                });
                throw error;
            });
        };
    }
    class Web3Provider extends JsonRpcProvider {
        constructor(provider, network) {
            if (provider == null) {
                logger$4.throwArgumentError("missing provider", "provider", provider);
            }
            let path = null;
            let jsonRpcFetchFunc = null;
            let subprovider = null;
            if (typeof (provider) === "function") {
                path = "unknown:";
                jsonRpcFetchFunc = provider;
            }
            else {
                path = provider.host || provider.path || "";
                if (!path && provider.isMetaMask) {
                    path = "metamask";
                }
                subprovider = provider;
                if (provider.request) {
                    if (path === "") {
                        path = "eip-1193:";
                    }
                    jsonRpcFetchFunc = buildEip1193Fetcher(provider);
                }
                else if (provider.sendAsync) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
                }
                else if (provider.send) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
                }
                else {
                    logger$4.throwArgumentError("unsupported provider", "provider", provider);
                }
                if (!path) {
                    path = "unknown:";
                }
            }
            super(path, network);
            defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            defineReadOnly(this, "provider", subprovider);
        }
        send(method, params) {
            return this.jsonRpcFetchFunc(method, params);
        }
    }

    const logger$3 = new Logger(version$5);
    ////////////////////////
    // Helper Functions
    function getDefaultProvider(network, options) {
        if (network == null) {
            network = "homestead";
        }
        // If passed a URL, figure out the right type of provider based on the scheme
        if (typeof (network) === "string") {
            // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
            // Handle http and ws (and their secure variants)
            const match = network.match(/^(ws|http)s?:/i);
            if (match) {
                switch (match[1].toLowerCase()) {
                    case "http":
                    case "https":
                        return new JsonRpcProvider(network);
                    case "ws":
                    case "wss":
                        return new WebSocketProvider(network);
                    default:
                        logger$3.throwArgumentError("unsupported URL scheme", "network", network);
                }
            }
        }
        const n = getNetwork(network);
        if (!n || !n._defaultProvider) {
            logger$3.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
                operation: "getDefaultProvider",
                network: network
            });
        }
        return n._defaultProvider({
            FallbackProvider,
            AlchemyProvider,
            AnkrProvider,
            CloudflareProvider,
            EtherscanProvider,
            InfuraProvider,
            JsonRpcProvider,
            NodesmithProvider,
            PocketProvider,
            Web3Provider,
            IpcProvider,
        }, options);
    }

    var index$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Provider: Provider,
        BaseProvider: BaseProvider,
        Resolver: Resolver,
        UrlJsonRpcProvider: UrlJsonRpcProvider,
        FallbackProvider: FallbackProvider,
        AlchemyProvider: AlchemyProvider,
        AlchemyWebSocketProvider: AlchemyWebSocketProvider,
        AnkrProvider: AnkrProvider,
        CloudflareProvider: CloudflareProvider,
        EtherscanProvider: EtherscanProvider,
        InfuraProvider: InfuraProvider,
        InfuraWebSocketProvider: InfuraWebSocketProvider,
        JsonRpcProvider: JsonRpcProvider,
        JsonRpcBatchProvider: JsonRpcBatchProvider,
        NodesmithProvider: NodesmithProvider,
        PocketProvider: PocketProvider,
        StaticJsonRpcProvider: StaticJsonRpcProvider,
        Web3Provider: Web3Provider,
        WebSocketProvider: WebSocketProvider,
        IpcProvider: IpcProvider,
        JsonRpcSigner: JsonRpcSigner,
        getDefaultProvider: getDefaultProvider,
        getNetwork: getNetwork,
        isCommunityResource: isCommunityResource,
        isCommunityResourcable: isCommunityResourcable,
        showThrottleMessage: showThrottleMessage,
        Formatter: Formatter
    });

    const version$4 = "solidity/5.6.1";

    const regexBytes = new RegExp("^bytes([0-9]+)$");
    const regexNumber = new RegExp("^(u?int)([0-9]*)$");
    const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    const logger$2 = new Logger(version$4);
    function _pack(type, value, isArray) {
        switch (type) {
            case "address":
                if (isArray) {
                    return zeroPad(value, 32);
                }
                return arrayify(value);
            case "string":
                return toUtf8Bytes(value);
            case "bytes":
                return arrayify(value);
            case "bool":
                value = (value ? "0x01" : "0x00");
                if (isArray) {
                    return zeroPad(value, 32);
                }
                return arrayify(value);
        }
        let match = type.match(regexNumber);
        if (match) {
            //let signed = (match[1] === "int")
            let size = parseInt(match[2] || "256");
            if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
                logger$2.throwArgumentError("invalid number type", "type", type);
            }
            if (isArray) {
                size = 256;
            }
            value = BigNumber.from(value).toTwos(size);
            return zeroPad(value, size / 8);
        }
        match = type.match(regexBytes);
        if (match) {
            const size = parseInt(match[1]);
            if (String(size) !== match[1] || size === 0 || size > 32) {
                logger$2.throwArgumentError("invalid bytes type", "type", type);
            }
            if (arrayify(value).byteLength !== size) {
                logger$2.throwArgumentError(`invalid value for ${type}`, "value", value);
            }
            if (isArray) {
                return arrayify((value + Zeros).substring(0, 66));
            }
            return value;
        }
        match = type.match(regexArray);
        if (match && Array.isArray(value)) {
            const baseType = match[1];
            const count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
                logger$2.throwArgumentError(`invalid array length for ${type}`, "value", value);
            }
            const result = [];
            value.forEach(function (value) {
                result.push(_pack(baseType, value, true));
            });
            return concat$2(result);
        }
        return logger$2.throwArgumentError("invalid type", "type", type);
    }
    // @TODO: Array Enum
    function pack(types, values) {
        if (types.length != values.length) {
            logger$2.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
        }
        const tight = [];
        types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
        });
        return hexlify(concat$2(tight));
    }
    function keccak256(types, values) {
        return keccak256$1(pack(types, values));
    }
    function sha256(types, values) {
        return sha256$1(pack(types, values));
    }

    var lib_esm$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        pack: pack,
        keccak256: keccak256,
        sha256: sha256
    });

    const version$3 = "units/5.6.1";

    const logger$1 = new Logger(version$3);
    const names = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether",
    ];
    // Some environments have issues with RegEx that contain back-tracking, so we cannot
    // use them.
    function commify(value) {
        const comps = String(value).split(".");
        if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
            logger$1.throwArgumentError("invalid value", "value", value);
        }
        // Make sure we have at least one whole digit (0 if none)
        let whole = comps[0];
        let negative = "";
        if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
        }
        // Make sure we have at least 1 whole digit with no leading zeros
        while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
        }
        if (whole === "") {
            whole = "0";
        }
        let suffix = "";
        if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
        }
        while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
            suffix = suffix.substring(0, suffix.length - 1);
        }
        const formatted = [];
        while (whole.length) {
            if (whole.length <= 3) {
                formatted.unshift(whole);
                break;
            }
            else {
                const index = whole.length - 3;
                formatted.unshift(whole.substring(index));
                whole = whole.substring(0, index);
            }
        }
        return negative + formatted.join(",") + suffix;
    }
    function formatUnits(value, unitName) {
        if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return formatFixed(value, (unitName != null) ? unitName : 18);
    }
    function parseUnits(value, unitName) {
        if (typeof (value) !== "string") {
            logger$1.throwArgumentError("value must be a string", "value", value);
        }
        if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return parseFixed(value, (unitName != null) ? unitName : 18);
    }
    function formatEther(wei) {
        return formatUnits(wei, 18);
    }
    function parseEther(ether) {
        return parseUnits(ether, 18);
    }

    var lib_esm$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        commify: commify,
        formatUnits: formatUnits,
        parseUnits: parseUnits,
        formatEther: formatEther,
        parseEther: parseEther
    });

    var utils$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbiCoder: AbiCoder,
        defaultAbiCoder: defaultAbiCoder,
        Fragment: Fragment,
        ConstructorFragment: ConstructorFragment,
        ErrorFragment: ErrorFragment,
        EventFragment: EventFragment,
        FunctionFragment: FunctionFragment,
        ParamType: ParamType,
        FormatTypes: FormatTypes,
        checkResultErrors: checkResultErrors,
        Logger: Logger,
        RLP: lib_esm$h,
        _fetchData: _fetchData,
        fetchJson: fetchJson,
        poll: poll,
        checkProperties: checkProperties,
        deepCopy: deepCopy,
        defineReadOnly: defineReadOnly,
        getStatic: getStatic,
        resolveProperties: resolveProperties,
        shallowCopy: shallowCopy,
        arrayify: arrayify,
        concat: concat$2,
        stripZeros: stripZeros,
        zeroPad: zeroPad,
        isBytes: isBytes,
        isBytesLike: isBytesLike,
        defaultPath: defaultPath,
        HDNode: HDNode,
        SigningKey: SigningKey,
        Interface: Interface,
        LogDescription: LogDescription,
        TransactionDescription: TransactionDescription,
        base58: Base58,
        base64: lib_esm$4,
        hexlify: hexlify,
        isHexString: isHexString,
        hexConcat: hexConcat,
        hexStripZeros: hexStripZeros,
        hexValue: hexValue,
        hexZeroPad: hexZeroPad,
        hexDataLength: hexDataLength,
        hexDataSlice: hexDataSlice,
        nameprep: nameprep,
        _toEscapedUtf8String: _toEscapedUtf8String,
        toUtf8Bytes: toUtf8Bytes,
        toUtf8CodePoints: toUtf8CodePoints,
        toUtf8String: toUtf8String,
        Utf8ErrorFuncs: Utf8ErrorFuncs,
        formatBytes32String: formatBytes32String,
        parseBytes32String: parseBytes32String,
        dnsEncode: dnsEncode,
        hashMessage: hashMessage,
        namehash: namehash,
        isValidName: isValidName,
        id: id,
        _TypedDataEncoder: TypedDataEncoder,
        getAddress: getAddress,
        getIcapAddress: getIcapAddress,
        getContractAddress: getContractAddress,
        getCreate2Address: getCreate2Address,
        isAddress: isAddress,
        formatEther: formatEther,
        parseEther: parseEther,
        formatUnits: formatUnits,
        parseUnits: parseUnits,
        commify: commify,
        computeHmac: computeHmac,
        keccak256: keccak256$1,
        ripemd160: ripemd160,
        sha256: sha256$1,
        sha512: sha512,
        randomBytes: randomBytes,
        shuffled: shuffled,
        solidityPack: pack,
        solidityKeccak256: keccak256,
        soliditySha256: sha256,
        splitSignature: splitSignature,
        joinSignature: joinSignature,
        accessListify: accessListify,
        parseTransaction: parse,
        serializeTransaction: serialize$1,
        get TransactionTypes () { return TransactionTypes; },
        getJsonWalletAddress: getJsonWalletAddress,
        computeAddress: computeAddress,
        recoverAddress: recoverAddress,
        computePublicKey: computePublicKey,
        recoverPublicKey: recoverPublicKey,
        verifyMessage: verifyMessage,
        verifyTypedData: verifyTypedData,
        getAccountPath: getAccountPath,
        mnemonicToEntropy: mnemonicToEntropy,
        entropyToMnemonic: entropyToMnemonic,
        isValidMnemonic: isValidMnemonic,
        mnemonicToSeed: mnemonicToSeed,
        get SupportedAlgorithm () { return SupportedAlgorithm; },
        get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
        get Utf8ErrorReason () { return Utf8ErrorReason; },
        Indexed: Indexed
    });

    const version$2 = "ethers/5.6.9";

    const logger = new Logger(version$2);

    var ethers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Signer: Signer,
        Wallet: Wallet,
        VoidSigner: VoidSigner,
        getDefaultProvider: getDefaultProvider,
        providers: index$1,
        BaseContract: BaseContract,
        Contract: Contract,
        ContractFactory: ContractFactory,
        BigNumber: BigNumber,
        FixedNumber: FixedNumber,
        constants: index$2,
        get errors () { return ErrorCode; },
        logger: logger,
        utils: utils$3,
        wordlists: wordlists,
        version: version$2,
        Wordlist: Wordlist
    });

    try {
        const anyGlobal = window;
        if (anyGlobal._ethers == null) {
            anyGlobal._ethers = ethers;
        }
    }
    catch (error) { }

    var lib_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ethers: ethers,
        Signer: Signer,
        Wallet: Wallet,
        VoidSigner: VoidSigner,
        getDefaultProvider: getDefaultProvider,
        providers: index$1,
        BaseContract: BaseContract,
        Contract: Contract,
        ContractFactory: ContractFactory,
        BigNumber: BigNumber,
        FixedNumber: FixedNumber,
        constants: index$2,
        get errors () { return ErrorCode; },
        logger: logger,
        utils: utils$3,
        wordlists: wordlists,
        version: version$2,
        Wordlist: Wordlist
    });

    var abi_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$d);

    var address_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$g);

    var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(lib_esm$4);

    var basex_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$a);

    var bytes_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$k);

    var hash_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$e);

    var hdnode_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$8);

    var json_wallets_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$6);

    var keccak256_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$i);

    var logger_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$l);

    var sha2_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$9);

    var solidity_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$2);

    var random_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$7);

    var properties_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$j);

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$h);

    var signing_key_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$c);

    var strings_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$f);

    var transactions_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$b);

    var units_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$1);

    var wallet_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$5);

    var web_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$3);

    var utils$2 = createCommonjsModule$2(function (module, exports) {
    var __createBinding = (commonjsGlobal$1 && commonjsGlobal$1.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal$1 && commonjsGlobal$1.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
    exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.dnsEncode = exports.parseBytes32String = void 0;

    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_1.AbiCoder; } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abi_1.checkResultErrors; } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return abi_1.ConstructorFragment; } });
    Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_1.defaultAbiCoder; } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return abi_1.ErrorFragment; } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return abi_1.EventFragment; } });
    Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return abi_1.FormatTypes; } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return abi_1.Fragment; } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return abi_1.FunctionFragment; } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return abi_1.Indexed; } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return abi_1.Interface; } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return abi_1.LogDescription; } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return abi_1.ParamType; } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return abi_1.TransactionDescription; } });

    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_1.getAddress; } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return address_1.getCreate2Address; } });
    Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return address_1.getContractAddress; } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_1.getIcapAddress; } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return address_1.isAddress; } });
    var base64 = __importStar(require$$0$2);
    exports.base64 = base64;

    Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return basex_1.Base58; } });

    Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return bytes_1.arrayify; } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return bytes_1.concat; } });
    Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return bytes_1.hexConcat; } });
    Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return bytes_1.hexDataSlice; } });
    Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return bytes_1.hexDataLength; } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return bytes_1.hexlify; } });
    Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return bytes_1.hexStripZeros; } });
    Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return bytes_1.hexValue; } });
    Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return bytes_1.hexZeroPad; } });
    Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return bytes_1.isBytes; } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return bytes_1.isBytesLike; } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return bytes_1.isHexString; } });
    Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return bytes_1.joinSignature; } });
    Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return bytes_1.zeroPad; } });
    Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return bytes_1.splitSignature; } });
    Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return bytes_1.stripZeros; } });

    Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return hash_1._TypedDataEncoder; } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return hash_1.dnsEncode; } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return hash_1.hashMessage; } });
    Object.defineProperty(exports, "id", { enumerable: true, get: function () { return hash_1.id; } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return hash_1.isValidName; } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return hash_1.namehash; } });

    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdnode_1.defaultPath; } });
    Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdnode_1.getAccountPath; } });
    Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return hdnode_1.HDNode; } });
    Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } });
    Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } });
    Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } });

    Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } });

    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak256_1.keccak256; } });

    Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.Logger; } });

    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });

    Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return solidity_1.keccak256; } });
    Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return solidity_1.pack; } });
    Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return solidity_1.sha256; } });

    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
    Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return random_1.shuffled; } });

    Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return properties_1.checkProperties; } });
    Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return properties_1.deepCopy; } });
    Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return properties_1.defineReadOnly; } });
    Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return properties_1.getStatic; } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_1.resolveProperties; } });
    Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return properties_1.shallowCopy; } });
    var RLP = __importStar(require$$1);
    exports.RLP = RLP;

    Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return signing_key_1.computePublicKey; } });
    Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_1.SigningKey; } });

    Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return strings_1.formatBytes32String; } });
    Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return strings_1.nameprep; } });
    Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return strings_1.parseBytes32String; } });
    Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return strings_1.toUtf8Bytes; } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return strings_1.toUtf8String; } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } });

    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return transactions_1.accessListify; } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return transactions_1.computeAddress; } });
    Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return transactions_1.parse; } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return transactions_1.recoverAddress; } });
    Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return transactions_1.serialize; } });
    Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return transactions_1.TransactionTypes; } });

    Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return units_1.commify; } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_1.formatEther; } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_1.parseEther; } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_1.formatUnits; } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_1.parseUnits; } });

    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return wallet_1.verifyMessage; } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return wallet_1.verifyTypedData; } });

    Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return web_1._fetchData; } });
    Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return web_1.fetchJson; } });
    Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return web_1.poll; } });
    ////////////////////////
    // Enums
    var sha2_2 = sha2_1;
    Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
    var strings_2 = strings_1;
    Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
    Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });

    });

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop$2) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$2) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop$2;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const STEP_CONNECT_WALLET = "connect-wallet";
    const STEP_ENTER_EMAIL = "enter-email";
    const STEP_CONFIRMATION = "confirm-code";
    const STEP_FINAL = "finished";
    const start = STEP_ENTER_EMAIL;
    const end = STEP_FINAL;
    const current = writable(start);
    const transition = {
        "enter-email": {
            nextStep: STEP_CONFIRMATION,
            previousStep: STEP_CONNECT_WALLET,
        },
        "confirm-code": {
            nextStep: STEP_CONNECT_WALLET,
            previousStep: STEP_ENTER_EMAIL,
        },
        "connect-wallet": {
            nextStep: STEP_FINAL,
            previousStep: STEP_CONFIRMATION,
        },
        finished: {
            previousStep: STEP_CONFIRMATION,
        },
    };
    function saveCurrentStep(step) {
        current.set(step);
    }

    var flow = /*#__PURE__*/Object.freeze({
        __proto__: null,
        STEP_CONNECT_WALLET: STEP_CONNECT_WALLET,
        STEP_ENTER_EMAIL: STEP_ENTER_EMAIL,
        STEP_CONFIRMATION: STEP_CONFIRMATION,
        STEP_FINAL: STEP_FINAL,
        start: start,
        end: end,
        current: current,
        transition: transition,
        saveCurrentStep: saveCurrentStep
    });

    /* Examples:

    - generateKey, return keypairs encoded as base64

    generateKey().then(async (result) => {
      console.log("keys:", result);
    });

    - encrypt, return ciphertext

    console.log(
      "encrypt result:",
      await encrypt(
        "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsGCghzzvRqldzsxjmcigs/+bZ1+pvfkZS0jcG/LJmjwMRh3HTs2KVEOU9cPV3IqBgGXJa21nlO8PjEctiDofuqUwOjIhwWhK02Oey7BAxNP7pct5XUCTevVPSEk8yaV+gjSz0cox6xi/BjxNdYuYAepsKuuLjOeFQLcGLt064rYK56UEYtNlhaeGmlixOzoSkrWEYCEnVHyF9QY2MYPlEUZbKjg5frbUr8Blykmp0hszMgUhGYpEOGQWlbv5e1Qhsh88tRgkHY48I5uohPFPYTDr/XPnJJ+uWnfBVmE9y8f0zkWhiPeiDuLnWD9e1oQPOZT31nVXOoof8X4iU9yT8QIDAQAB",
        "hello"
      )
    );

    - decrypt, return plaintext

    console.log(
      "decypt result:",
      await decrypt(
        "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCwYKCHPO9GqV3OzGOZyKCz/5tnX6m9+RlLSNwb8smaPAxGHcdOzYpUQ5T1w9XcioGAZclrbWeU7w+MRy2IOh+6pTA6MiHBaErTY57LsEDE0/uly3ldQJN69U9ISTzJpX6CNLPRyjHrGL8GPE11i5gB6mwq64uM54VAtwYu3TritgrnpQRi02WFp4aaWLE7OhKStYRgISdUfIX1BjYxg+URRlsqODl+ttSvwGXKSanSGzMyBSEZikQ4ZBaVu/l7VCGyHzy1GCQdjjwjm6iE8U9hMOv9c+ckn65ad8FWYT3Lx/TORaGI96IO4udYP17WhA85lPfWdVc6ih/xfiJT3JPxAgMBAAECggEALdJMohXAi/kAN/N9hLxMk7a6JtcBgCsw2RAqrtAadAlZnvWpi912LIIKNvcTnmIVVsga1d/sYxLgVS9Asv12tMSpjNTtVBPGLLjazkwR55Cy9dWwx/s41V7ZpAvy0Og/v4/1j3EaGtuo9PPBo+IKMaU3SMc8z/Rt9+wUnSQ4YiE+Lw/DMT9FlDoPWRLQVV26HUrTlb4c8r/qohw5hMXmv89s/gfyNK/yXvbNYo9PrzHIq4bHWOD+wgJuJeV0iTIgf1vGPzfE1m4zQSyt3sAVTu8bDHkXpi0cRFkTZDvCAiiHklgzxQ1NBdyoapRGmr2zsDzThMPWhNLKR5+1s8N9yQKBgQDqaBpfVxOVs5mL/857qsL9VZ26VGGnsJ/30bsfrIP7U9ODSSv4mX4XDVXOutjwcPQfR4q11hziMDQoDZmxQ47XhKSabBTGZyIKLwNz8/eJMMF4tPT8cbX/QoSDdhadXjqMFH5xl1hUj1/HIQCBZcTAStimmzF/goWzf9+klY0mnwKBgQDAoAzCzTkrJ9q+Q0yxCSwAeU/zLOQ8W1iFFf0eJInb4Z9G8R9BVkI6PNjEcrJG1Db83IDPpdELvcWn+pABz3EvF0CC59JCGpNiHAyv7ccK24lut/giQJGoVehcFBZy3uJlSM1hXN8sffQKbOILy63rowma6cfOzsMH/462tQALbwKBgQC87rGq/M1dUQhGziVIiidl95cM8yxO887L+TDg47TxYuxNmjGly1nVDLuHyBRJIFGz0H8d9vkK2p1/Vw700KYWUeQ2Tz0jeUb3fFNFJ3PyEOkv+HKp8qEloCCcsRajOqrn8zDDL6BTb8hcAN6ebT97WhhrmRT5WGOZfUzuJFhDswKBgAjh2HTLHc29orqPQ+QN9jd3YJZoBYY6+BP69ZcEPE8lUkDlMXnDzn38/EniuBHIC1kRmeb5UHBoKcsbJLTQqflv6wueQPXHX/BwNq2OG1WG1gmC9jAuJglLHNHSI07ctDfTaZUJwUi97hjk+G9uzvBErla0XQBOTHP79sq6AeyFAoGBAOYkGkrsei/rcf1HSt7yjxJaBOD9N0FQr9flJQPs8Undo27V1hIUpxFXiOPS7Onu18BHyNLuhCT8l3Ow+2T5q+8WSy9mpxxTKDx016RjsEQ0YeXarWP2tGjEdVbGUM1sOl7zSdeRUGYqQypL3FVQW36qGIlWyG/YzWZmCOW4RWce",
        "IxryOWLHVbDLroZsZFiOnWNkizj/KSyfIL8SvviJe73hDAWIQtmeDVxs3VbhbtdmWEWugTmxupvaPNlO/AXhuLf3Qv4y90qnTMruOln+KxgEVqWYFjsDXo0gba3Tjf+FCGNVZ0d0MViXUpkDXQFfv3E1+vayKSC8AiK8zfx2Ky3EwKKU44K4yZ1po8vAdud1ZwRfjLpIUDT88UJCoSH5tJuPPeaMEznUyAaMbRMgRBkeq+HZnypY04dRNTpBoZcTHEbZmcRIYSYu45jKv03YgRtEDoZ0493SdjmrbYKg0jp8DyS0zchuLS7wM7S/AzaJH/8Mxk+YF+SrwE7FD9z7Lw=="
      )
    );

     */
    async function importKey(key) {
        return await window.crypto.subtle.importKey("pkcs8", str2ab(atob(key)), {
            name: "RSA-OAEP",
            hash: "SHA-256",
            modulusLength: 2048,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        }, true, ["decrypt"]);
    }
    async function importPKey(key) {
        return await window.crypto.subtle.importKey("spki", str2ab(atob(key)), {
            name: "RSA-OAEP",
            hash: "SHA-256",
            modulusLength: 2048,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        }, true, ["encrypt"]);
    }
    async function generateKey() {
        const key = await window.crypto.subtle.generateKey({
            name: "RSA-OAEP",
            modulusLength: 2048,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
            hash: { name: "SHA-256" },
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ["encrypt", "decrypt"] //must be ["encrypt", "decrypt"] or ["wrapKey", "unwrapKey"]
        );
        return {
            publicKey: btoa(ab2str(await window.crypto.subtle.exportKey("spki", key.publicKey))),
            privateKey: btoa(ab2str(await window.crypto.subtle.exportKey("pkcs8", key.privateKey))),
        };
    }
    async function decrypt(privateKey, data) {
        const key = await importKey(privateKey);
        return ab2str(await window.crypto.subtle.decrypt({
            name: "RSA-OAEP",
            hash: "SHA-256",
            modulusLength: 2048,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        }, key, str2ab(atob(data))));
    }
    async function encrypt(publicKey, data) {
        const key = await importPKey(publicKey);
        return btoa(ab2str(await window.crypto.subtle.encrypt({
            name: "RSA-OAEP",
            hash: "SHA-256",
            modulusLength: 2048,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        }, key, str2ab(data))));
    }

    var cryptoUtils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        generateKey: generateKey,
        decrypt: decrypt,
        encrypt: encrypt
    });

    const auth0AccessToken = writable("");
    const requestEmail = writable("");
    const sameEmail = writable(false);
    const currentWallet = writable("");
    const providerName = writable("");
    const STORAGE_KEY_CURRENT_ACCOUNT = "currentAccount";
    function getRawCurrentAccount() {
        return localStorage.getItem(STORAGE_KEY_CURRENT_ACCOUNT);
    }
    function saveCurrentAccount(account) {
        localStorage.setItem(STORAGE_KEY_CURRENT_ACCOUNT, account);
    }
    const STORAGE_KEY_EMAIL = "email";
    function getRawEmail() {
        return localStorage.getItem(STORAGE_KEY_EMAIL);
    }
    function saveEmail(email) {
        localStorage.setItem(STORAGE_KEY_EMAIL, email);
    }
    async function getCurrentEmail() {
        const currentEmail = getRawEmail();
        const currentKey = getRawPair();
        if (currentEmail && currentKey) {
            try {
                return await decrypt(getRawPair().privateKey, getRawEmail());
            }
            catch (e) {
                console.error(e);
                return "";
            }
        }
        else {
            return "";
        }
    }
    const STORAGE_KEY_PAIR = "pair";
    function getRawPair() {
        return JSON.parse(localStorage.getItem(STORAGE_KEY_PAIR));
    }
    function savePair(pair) {
        localStorage.setItem(STORAGE_KEY_PAIR, JSON.stringify(pair));
    }
    const STORAGE_KEY_ATTESTATION = "attestation";
    function getRawAttestation() {
        return JSON.parse(localStorage.getItem(STORAGE_KEY_ATTESTATION));
    }
    function saveAttestation(attestation) {
        localStorage.setItem(STORAGE_KEY_ATTESTATION, JSON.stringify(attestation));
    }
    function clearAttestation() {
        localStorage.removeItem(STORAGE_KEY_ATTESTATION);
    }
    function clearAll() {
        localStorage.clear();
    }

    let provider;
    const ATTESTOR_DOMAIN$1 = "http://wwww.attestation.id";
    const providerOptions = {
        walletconnect: {
            package: WalletConnectProvider__default['default'],
            options: {
                infuraId: "795587fc9545486b8a5e190a44e3ae7d",
            },
        },
    };
    const web3Modal = new Web3Modal__default['default']({
        network: "mainnet",
        cacheProvider: true,
        providerOptions,
    });
    if (!window.location.href.includes("access_token")) {
        reset();
    }
    else {
        saveCurrentStep(STEP_CONFIRMATION);
    }
    async function isEnabled() {
        return web3Modal.cachedProvider;
    }
    async function connect(providerName) {
        try {
            const web3ModalProvider = providerName
                ? await web3Modal.connectTo(providerName)
                : await web3Modal.connect();
            if (web3ModalProvider && web3ModalProvider._blockTracker) {
                web3ModalProvider._blockTracker._pollingInterval = 60000;
                web3ModalProvider._blockTracker._retryTimeout = 60000;
            }
            provider = new Web3Provider(web3ModalProvider);
            registerEthListener(web3ModalProvider);
            updateCurrentStatus(await provider.listAccounts());
        }
        catch (err) {
            console.log(err);
        }
    }
    async function signatureAndPublicKey(userData, providerName) {
        if (!provider) {
            const web3ModalProvider = providerName
                ? await web3Modal.connectTo(providerName)
                : await web3Modal.connect();
            provider = new Web3Provider(web3ModalProvider);
        }
        const domain = {
            name: ATTESTOR_DOMAIN$1,
            version: "0.1",
        };
        const primaryTypes = {
            AttestationRequest: [
                { name: "payload", type: "string" },
                { name: "description", type: "string" },
                { name: "timestamp", type: "string" },
                { name: "identifier", type: "string" },
            ],
        };
        const types = {
            EIP712Domain: [
                { name: "name", type: "string" },
                { name: "version", type: "string" },
            ],
            ...primaryTypes,
        };
        let userDataValuesWithHashedPayload = Object.assign({}, userData);
        userDataValuesWithHashedPayload.payload = sha3.keccak256(userDataValuesWithHashedPayload.payload);
        const signature = await provider
            .getSigner()
            ._signTypedData(domain, primaryTypes, userDataValuesWithHashedPayload);
        const digest = arrayify(utils$2._TypedDataEncoder.hash(domain, primaryTypes, userDataValuesWithHashedPayload));
        const publicKey = recoverPublicKey(digest, signature);
        console.log(computeAddress(publicKey));
        console.log(verifyTypedData(domain, primaryTypes, userDataValuesWithHashedPayload, signature));
        let completeData = {
            types,
            primaryType: "AttestationRequest",
            message: userData,
            domain,
        };
        const externalAuthenticationData = {
            signatureInHex: signature,
            jsonSigned: JSON.stringify(completeData),
        };
        return { request: JSON.stringify(externalAuthenticationData), publicKey };
    }
    function updateCurrentStatus(accounts) {
        if (accounts.length === 0) {
            console.log("no account");
        }
        else {
            currentWallet.set(accounts[0]);
            saveCurrentAccount(accounts[0]);
        }
    }
    function registerEthListener(web3ModalProvider) {
        web3ModalProvider
            .on("disconnect", (error) => {
            reset();
            // From metamask document:
            // ********************************
            // Once disconnect has been emitted, the provider will not accept any new requests
            // until the connection to the chain has been re-restablished,
            // which requires reloading the page.
            // ********************************
            // https://docs.metamask.io/guide/ethereum-provider.html#disconnect
            location.reload();
        })
            .on("accountsChanged", (accounts) => {
            if (accounts.length === 0) {
                console.log("Connection disconnected, go to the first step.");
                reset();
            }
            else {
                saveCurrentAccount(accounts[0]);
            }
        })
            .on("chainChanged", (chainId) => {
            console.log("chainChanged", chainId);
        });
    }
    function reset() {
        current.set(start);
        web3Modal.clearCachedProvider();
        localStorage.removeItem("walletconnect");
    }

    var walletService = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isEnabled: isEnabled,
        connect: connect,
        signatureAndPublicKey: signatureAndPublicKey
    });

    var interfaces = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ATTESTATION_TYPE = void 0;
    exports.ATTESTATION_TYPE = {
        phone: 0,
        mail: 1,
        InetPersona: 2
    };

    });

    var lookup$1 = [];
    var revLookup$1 = [];
    var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup$1[i] = code[i];
        revLookup$1[code.charCodeAt(i)] = i;
      }

      revLookup$1['-'.charCodeAt(0)] = 62;
      revLookup$1['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr$1(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
    }

    function encodeChunk$1 (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup$1[tmp >> 2];
        output += lookup$1[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup$1[tmp >> 10];
        output += lookup$1[(tmp >> 4) & 0x3F];
        output += lookup$1[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString$1 = {}.toString;

    var isArray$7 = Array.isArray || function (arr) {
      return toString$1.call(arr) == '[object Array]';
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$7(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray$7(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var config = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEBUGLEVEL = void 0;
    exports.DEBUGLEVEL = { LOW: 1, MEDIUM: 2, HIGH: 3, VERBOSE: 4 };

    });

    var utils$1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ecSignatureToSRVhex = exports.testsLogger = exports.logger = exports.isDomainValid = exports.formatGeneralizedDateTime = exports.ethAddressToUint8 = exports.hashUint8To32bytesUint8 = exports.hashStringTo32bytesUint8 = exports.getInt64Bytes = exports.uint8tohex = exports.BnPowMod = exports.stringToArray = exports.base64ToUint8array = exports.pemOrBase64Orbase64urlToString = exports.base64toBase64Url = exports.uint8arrayToBase64 = exports.uint8toString = exports.uint8merge = exports.bnToBuf = exports.bnToUint8 = exports.bufToBn = exports.uint8ToBn = exports.egcd = exports.invert = exports.mod = exports.hexStringToBase64Url = exports.hexStringToBase64 = exports.hexStringToUint8 = exports.hexStringToArray = exports.stringToHex = void 0;



    let displayDebugLevel;
    let testsDisplayDebugLevel;
    // process.env.DISPLAY_DEBUG_LEVEL used to set LOG level for NODE.JS
    // window.DISPLAY_DEBUG_LEVEL used to set LOG level for browser
    if (browser$1 && browser$1.env && browser$1.env.DISPLAY_DEBUG_LEVEL) {
        displayDebugLevel = parseInt(browser$1.env.DISPLAY_DEBUG_LEVEL);
    }
    else if (window && window.DISPLAY_DEBUG_LEVEL) {
        displayDebugLevel = parseInt(window.DISPLAY_DEBUG_LEVEL);
    }
    // process.env.DISPLAY_DEBUG_LEVEL_TESTS used to set LOG level for NODE.JS jest tests
    if (browser$1 && browser$1.env && browser$1.env.DISPLAY_DEBUG_LEVEL_TESTS) {
        testsDisplayDebugLevel = parseInt(browser$1.env.DISPLAY_DEBUG_LEVEL_TESTS);
    }
    function stringToHex(str) {
        var hex = '';
        for (var i = 0; i < str.length; i++) {
            hex += '' + str.charCodeAt(i).toString(16);
        }
        return hex;
    }
    exports.stringToHex = stringToHex;
    function hexStringToArray(str = '') {
        if (str.substr(0, 2).toLowerCase() === "0x") {
            str = str.substr(2);
        }
        let arr = [];
        let strArr = [...str];
        if (strArr.length % 2)
            strArr.unshift('0');
        let tempStr = '';
        if (!strArr || typeof strArr == "undefined" || !strArr.length)
            return [];
        let tmpVal;
        while (strArr.length) {
            tempStr = '';
            // @ts-ignore
            tempStr += strArr.shift() + strArr.shift();
            tmpVal = parseInt(tempStr, 16);
            if (isNaN(tmpVal)) {
                throw new Error("hexStringToArray input is not a hex string.");
            }
            arr.push(tmpVal);
        }
        return arr;
    }
    exports.hexStringToArray = hexStringToArray;
    function hexStringToUint8(str = '') {
        return Uint8Array.from(hexStringToArray(str));
    }
    exports.hexStringToUint8 = hexStringToUint8;
    function hexStringToBase64(str = '') {
        return uint8arrayToBase64(hexStringToUint8(str));
    }
    exports.hexStringToBase64 = hexStringToBase64;
    function hexStringToBase64Url(str = '') {
        return base64toBase64Url(uint8arrayToBase64(hexStringToUint8(str)));
    }
    exports.hexStringToBase64Url = hexStringToBase64Url;
    function mod(a, b = Point_1.CURVE_BN256.P) {
        const result = a % b;
        return result >= 0n ? result : b + result;
    }
    exports.mod = mod;
    function invert(number, modulo = Point_1.CURVE_BN256.P) {
        if (number === 0n || modulo <= 0n) {
            throw new Error('invert: expected positive integers');
        }
        let [gcd, x] = egcd(mod(number, modulo), modulo);
        if (gcd !== 1n) {
            throw new Error('invert: does not exist');
        }
        return mod(x, modulo);
    }
    exports.invert = invert;
    // Eucledian GCD
    // https://brilliant.org/wiki/extended-euclidean-algorithm/
    function egcd(a, b) {
        let [x, y, u, v] = [0n, 1n, 1n, 0n];
        while (a !== 0n) {
            let [q, r] = [b / a, b % a];
            let [m, n] = [x - u * q, y - v * q];
            [b, a] = [a, r];
            [x, y] = [u, v];
            [u, v] = [m, n];
        }
        return [b, x, y];
    }
    exports.egcd = egcd;
    function uint8ToBn(uint8) {
        return bufToBn(uint8);
    }
    exports.uint8ToBn = uint8ToBn;
    function bufToBn(buf) {
        let hex = [];
        let u8 = Uint8Array.from(buf);
        u8.forEach(function (i) {
            var h = i.toString(16);
            if (h.length % 2) {
                h = '0' + h;
            }
            hex.push(h);
        });
        return BigInt('0x' + hex.join(''));
    }
    exports.bufToBn = bufToBn;
    function bnToUint8(bn) {
        return bnToBuf(bn);
    }
    exports.bnToUint8 = bnToUint8;
    function bnToBuf(bn, length = 0) {
        var hex = BigInt(bn).toString(16).padStart(length * 2, '0');
        if (hex.length % 2) {
            hex = '0' + hex;
        }
        var len = hex.length / 2;
        var u8 = new Uint8Array(len);
        var i = 0;
        var j = 0;
        while (i < len) {
            u8[i] = parseInt(hex.slice(j, j + 2), 16);
            i += 1;
            j += 2;
        }
        return u8;
    }
    exports.bnToBuf = bnToBuf;
    function uint8merge(list) {
        if (list.length === 1)
            return list[0];
        let out = Uint8Array.from([]);
        if (list.length === 0)
            return out;
        for (let i = 0; i < list.length; i++) {
            if (typeof list[i] !== "object" || typeof list[i].length !== "number") {
                throw new Error('wrong input values');
            }
            let toAdd = Uint8Array.from(list[i]);
            if (!toAdd || !toAdd.length) {
                continue;
            }
            let temp = new Uint8Array(out.length + toAdd.length);
            temp.set(out);
            temp.set(toAdd, out.length);
            out = temp;
        }
        return out;
    }
    exports.uint8merge = uint8merge;
    function uint8toString(uint8) {
        if (!uint8)
            return '';
        let binary = '';
        let len = uint8.byteLength;
        for (let i = 0; i < len; i++) {
            binary += String.fromCharCode(uint8[i]);
        }
        return binary;
    }
    exports.uint8toString = uint8toString;
    function uint8arrayToBase64(bytes) {
        let binary = uint8toString(bytes);
        // if (typeof Buffer !== 'undefined') {
        if (typeof window === 'undefined' || !window.btoa) {
            let buff = new Buffer(binary);
            return buff.toString('base64');
        }
        else {
            return window.btoa(binary);
        }
    }
    exports.uint8arrayToBase64 = uint8arrayToBase64;
    function base64toBase64Url(base64) {
        return base64.split('/').join('_')
            .split('+').join('-');
        // .split('=').join('.');
    }
    exports.base64toBase64Url = base64toBase64Url;
    function pemOrBase64Orbase64urlToString(base64str) {
        let base64StrArray = base64str.split(/\r?\n/);
        // maybe remove empty lines at the end of file
        while (base64StrArray[base64StrArray.length - 1].trim() === "") {
            base64StrArray.pop();
        }
        // maybe remove first and last line and concat lines
        if (base64str.slice(0, 3) === "---") {
            base64StrArray.shift();
            base64StrArray.pop();
        }
        base64str = base64StrArray.join('');
        // maybe change base64url to base64
        base64str = base64str.split('_').join('/')
            .split('-').join('+')
            .split('.').join('=');
        return base64str;
    }
    exports.pemOrBase64Orbase64urlToString = pemOrBase64Orbase64urlToString;
    /*
    Convert pem/base64/base64url to Uint8Array
     */
    function base64ToUint8array(base64str) {
        base64str = pemOrBase64Orbase64urlToString(base64str);
        let res;
        // if (typeof Buffer !== 'undefined') {
        if (typeof window === 'undefined' || !window.atob) {
            res = Uint8Array.from(Buffer.from(base64str, 'base64'));
        }
        else {
            res = Uint8Array.from(atob(base64str), c => c.charCodeAt(0));
        }
        return res;
    }
    exports.base64ToUint8array = base64ToUint8array;
    function stringToArray(str) {
        var arr = [];
        for (var i = 0; i < str.length; i++) {
            arr.push(str.charCodeAt(i));
        }
        return arr;
    }
    exports.stringToArray = stringToArray;
    function BnPowMod(base, n, mod) {
        let res = 1n, cur = base;
        while (n > 0n) {
            if (n & 1n)
                res = (res * cur) % mod;
            cur = (cur * cur) % mod;
            n >>= 1n;
        }
        return res;
    }
    exports.BnPowMod = BnPowMod;
    function uint8tohex(uint8) {
        if (!uint8 || !uint8.length)
            return '';
        return Array.from(uint8).map(i => ('0' + i.toString(16)).slice(-2)).join('');
    }
    exports.uint8tohex = uint8tohex;
    // TODO unit test it
    function getInt64Bytes(x) {
        let y = Math.floor(x / 2 ** 32);
        return new Uint8Array([y, (y << 8), (y << 16), (y << 24), x, (x << 8), (x << 16), (x << 24)].map(z => z >>> 24));
    }
    exports.getInt64Bytes = getInt64Bytes;
    function hashStringTo32bytesUint8(str) {
        return hashUint8To32bytesUint8(Uint8Array.from(stringToArray(str)));
    }
    exports.hashStringTo32bytesUint8 = hashStringTo32bytesUint8;
    function hashUint8To32bytesUint8(data) {
        let arr = Array.from(data);
        return uint8merge([new Uint8Array(32), new Uint8Array(hexStringToArray(sha3.keccak256(arr)))]).slice(-32);
    }
    exports.hashUint8To32bytesUint8 = hashUint8To32bytesUint8;
    function ethAddressToUint8(str) {
        if (str.toLowerCase().match(/^0x[a-f0-9]{40}$/i) === null) {
            throw new Error('Wrong Ethereum Address');
        }
        let addr = Uint8Array.from(hexStringToArray(str.substr(2)));
        if (addr.length != 20)
            throw new Error('wrong address length');
        return addr;
    }
    exports.ethAddressToUint8 = ethAddressToUint8;
    function formatGeneralizedDateTime(date) {
        var d = new Date(date), month = '' + (d.getUTCMonth() + 1), day = '' + d.getUTCDate(), year = d.getUTCFullYear();
        let hour = '' + d.getUTCHours(), min = '' + d.getUTCMinutes(), sec = '' + d.getUTCSeconds();
        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;
        if (hour.length < 2)
            hour = '0' + hour;
        if (min.length < 2)
            min = '0' + min;
        if (sec.length < 2)
            sec = '0' + sec;
        return [year, month, day, hour, min, sec].join('') + 'Z';
    }
    exports.formatGeneralizedDateTime = formatGeneralizedDateTime;
    function isDomainValid(domain) {
        try {
            new URL(domain);
        }
        catch (e) {
            return false;
        }
        return true;
    }
    exports.isDomainValid = isDomainValid;
    function logger(level, ...args) {
        if (!displayDebugLevel || level > displayDebugLevel)
            return;
        console.log(...args);
    }
    exports.logger = logger;
    function testsLogger(level, ...args) {
        if (!testsDisplayDebugLevel || level > testsDisplayDebugLevel)
            return;
        console.log(...args);
    }
    exports.testsLogger = testsLogger;
    function ecSignatureToSRVhex(signature, ecKey) {
        try {
            let r = signature.r.toString(16).padStart(64, "0");
            let s_ = signature.s;
            let v = signature.recoveryParam;
            let half_curve = ecKey.ec.curve.n.shrn(1);
            if (s_.cmp(half_curve) > 0) {
                s_ = ecKey.ec.curve.n.sub(s_);
                v = 1 - v;
            }
            let s = s_.toString(16).padStart(64, "0");
            return r + s + (v == 1 ? "1c" : "1b");
        }
        catch (e) {
            logger(config.DEBUGLEVEL.LOW, e);
            throw new Error("Signature format doesn't fit.");
        }
    }
    exports.ecSignatureToSRVhex = ecSignatureToSRVhex;

    });

    var Point_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Point = exports.CURVE_BN256 = exports.CURVES = exports.CURVE_SECP256k1 = void 0;


    // curve SECP256k1
    exports.CURVE_SECP256k1 = {
        P: 2n ** 256n - 2n ** 32n - 977n,
        n: 2n ** 256n - 432420386565659656852420866394968145599n,
        magicExp: (2n ** 256n - 2n ** 32n - 977n + 1n) / 4n,
        A: 0n,
        B: 7n
    };
    exports.CURVES = {
        // secp256r1: {
        //     P: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),
        //     A: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),
        //     B: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),
        //     n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),
        //     GX: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),
        //     GY: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),
        //     h: 1n
        // },
        // P-256, also known as secp256r1 and prime256v1
        p256: {
            // prime: null,
            P: BigInt('0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF'),
            A: BigInt('0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC'),
            B: BigInt('0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B'),
            n: BigInt('0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551'),
            GX: BigInt('0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296'),
            GY: BigInt('0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5'),
            h: 1n
        },
        secp256k1: {
            P: 2n ** 256n - 2n ** 32n - 977n,
            A: 0n,
            B: 7n,
            n: 2n ** 256n - 432420386565659656852420866394968145599n,
            GX: 55066263022277343669578718895168534326250603453777594175500187360389116729240n,
            GY: 32670510020758816978083085130507043184471273380659243275938904335757337482424n,
        },
        BN256: {
            P: 115792089237314936872688561244471742058375878355761205198700409522629664518163n,
            n: 115792089237314936872688561244471742058035595988840268584488757999429535617037n,
            magicExp: 115792089237314936872688561244471742058375878355761205198700409522629664518164n >> 2n,
            A: 0n,
            B: 3n,
            h: 1n
        }
    };
    // Updated parameters #60
    exports.CURVE_BN256 = {
        P: 21888242871839275222246405745257275088696311157297823662689037894645226208583n,
        n: 21888242871839275222246405745257275088548364400416034343698204186575808495617n,
        // magicExp: 115792089237314936872688561244471742058375878355761205198700409522629664518164n >> 2n,
        A: 0n,
        B: 3n,
        h: 1n
    };
    class Point {
        //static ZERO = new Point(0n, 0n); // Point at infinity aka identifier point aka zero
        // constructor(public x: bigint, public y: bigint, public useCurve: {[index: string]:bigint} = CURVE_SECP256k1 ) {}
        constructor(x, y, useCurve = exports.CURVES.secp256r1) {
            this.x = x;
            this.y = y;
            this.useCurve = useCurve;
        }
        // Adds point to itself. http://hyperelliptic.org/EFD/g1p/auto-shortw.html
        double() {
            const X1 = this.x;
            const Y1 = this.y;
            const lam = (0, utils$1.mod)(3n * X1 ** 2n * (0, utils$1.invert)(2n * Y1, this.useCurve.P), this.useCurve.P);
            const X3 = (0, utils$1.mod)(lam * lam - 2n * X1, this.useCurve.P);
            const Y3 = (0, utils$1.mod)(lam * (X1 - X3) - Y1, this.useCurve.P);
            return new Point(X3, Y3, this.useCurve);
        }
        newZero() {
            return new Point(0n, 0n, this.useCurve);
        }
        // Adds point to other point. http://hyperelliptic.org/EFD/g1p/auto-shortw.html
        add(other) {
            const [a, b] = [this, other];
            const [X1, Y1, X2, Y2] = [a.x, a.y, b.x, b.y];
            if (X1 === 0n || Y1 === 0n)
                return b;
            if (X2 === 0n || Y2 === 0n)
                return a;
            if (X1 === X2 && Y1 === Y2)
                return this.double();
            if (X1 === X2 && Y1 === -Y2)
                return this.newZero();
            const lam = (0, utils$1.mod)((Y2 - Y1) * (0, utils$1.invert)(X2 - X1, this.useCurve.P), this.useCurve.P);
            const X3 = (0, utils$1.mod)(lam * lam - X1 - X2, this.useCurve.P);
            const Y3 = (0, utils$1.mod)(lam * (X1 - X3) - Y1, this.useCurve.P);
            return new Point(X3, Y3, this.useCurve);
        }
        // Elliptic curve point multiplication with double-and-add algo.
        multiplyDA(n) {
            let p = this.newZero();
            let d = this;
            while (n > 0n) {
                if (n & 1n)
                    p = p.add(d);
                d = d.double();
                n >>= 1n;
            }
            return p;
        }
        isInfinity() {
            return this.x == null || this.y == null;
        }
        getEncoded(compressed = false) {
            if (this.isInfinity()) {
                return new Uint8Array(0);
            }
            let X = (0, utils$1.bnToBuf)(this.x, 32);
            if (compressed) {
                return (0, utils$1.uint8merge)([Uint8Array.from([2]), X]);
            }
            return (0, utils$1.uint8merge)([Uint8Array.from([4]), X, (0, utils$1.bnToBuf)(this.y, 32)]);
        }
        equals(other) {
            if (null == other) {
                return false;
            }
            let i1 = this.isInfinity();
            let i2 = other.isInfinity();
            if (i1 || i2) {
                return (i1 && i2);
            }
            let p1 = this;
            let p2 = other;
            return (p1.x === p2.x) && (p1.y === p2.y);
        }
        static decodeFromHex(hex, useCurve = exports.CURVE_SECP256k1) {
            if (hex.length != 130) {
                throw new Error('only decompressed points allowed. 65 bytes.');
            }
            return Point.decodeFromUint8((0, utils$1.hexStringToUint8)(hex), useCurve);
            // let p;
            // let type = hex.slice(0,2);
            // switch (type) {
            //     case '04':
            //         let X = BigInt('0x' + hex.slice(2,66));
            //         let Y = BigInt('0x' + hex.slice(66,130));
            //         // logger(DEBUGLEVEL.HIGH, X,Y);
            //         p = new Point(X, Y, useCurve);
            //         break;
            //     default:
            //         throw new Error('only decompressed points allowed');
            // }
            // if (!p.validate()) {
            //     let m = `Point is not valid (${p.x},${p.y})`;
            //     logger(DEBUGLEVEL.HIGH, m);
            //     logger(DEBUGLEVEL.HIGH, p);
            //     throw new Error(m);
            // }
            // return p;
        }
        static decodeFromUint8(uint, useCurve = exports.CURVE_SECP256k1) {
            if (uint.length != 65) {
                throw new Error('only decompressed points allowed. 65 bytes.');
            }
            let p;
            let type = uint[0];
            switch (type) {
                case 4:
                    let X = (0, utils$1.uint8ToBn)(uint.slice(1, 33));
                    let Y = (0, utils$1.uint8ToBn)(uint.slice(33));
                    p = new Point(X, Y, useCurve);
                    break;
                default:
                    throw new Error('only decompressed points allowed');
            }
            if (!p.validate()) {
                let m = `Point is not valid (` + p.x.toString(16) + ',' + p.y.toString(16) + `)`;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                throw new Error(m);
            }
            return p;
        }
        validate() {
            let res = (0, utils$1.mod)((0, utils$1.mod)(this.y * this.y, this.useCurve.P) - (0, utils$1.mod)((0, utils$1.BnPowMod)(this.x, 3n, this.useCurve.P)
                + (0, utils$1.mod)(this.x * this.useCurve.A, this.useCurve.P) + this.useCurve.B, this.useCurve.P), this.useCurve.P);
            return res == 0n;
        }
        negate() {
            return new Point(this.x, this.useCurve.P - this.y, this.useCurve);
        }
        subtract(anotherPoint) {
            return this.add(anotherPoint.negate());
        }
    }
    exports.Point = Point;

    });

    var build = createCommonjsModule$2(function (module, exports) {

    Object.defineProperty(exports, '__esModule', { value: true });

    const ARRAY_BUFFER_NAME = "[object ArrayBuffer]";
    class BufferSourceConverter {
        static isArrayBuffer(data) {
            return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;
        }
        static toArrayBuffer(data) {
            if (this.isArrayBuffer(data)) {
                return data;
            }
            if (data.byteLength === data.buffer.byteLength) {
                return data.buffer;
            }
            return this.toUint8Array(data).slice().buffer;
        }
        static toUint8Array(data) {
            return this.toView(data, Uint8Array);
        }
        static toView(data, type) {
            if (data.constructor === type) {
                return data;
            }
            if (this.isArrayBuffer(data)) {
                return new type(data);
            }
            if (this.isArrayBufferView(data)) {
                return new type(data.buffer, data.byteOffset, data.byteLength);
            }
            throw new TypeError("The provided value is not of type '(ArrayBuffer or ArrayBufferView)'");
        }
        static isBufferSource(data) {
            return this.isArrayBufferView(data)
                || this.isArrayBuffer(data);
        }
        static isArrayBufferView(data) {
            return ArrayBuffer.isView(data)
                || (data && this.isArrayBuffer(data.buffer));
        }
        static isEqual(a, b) {
            const aView = BufferSourceConverter.toUint8Array(a);
            const bView = BufferSourceConverter.toUint8Array(b);
            if (aView.length !== bView.byteLength) {
                return false;
            }
            for (let i = 0; i < aView.length; i++) {
                if (aView[i] !== bView[i]) {
                    return false;
                }
            }
            return true;
        }
        static concat(...args) {
            if (Array.isArray(args[0])) {
                const buffers = args[0];
                let size = 0;
                for (const buffer of buffers) {
                    size += buffer.byteLength;
                }
                const res = new Uint8Array(size);
                let offset = 0;
                for (const buffer of buffers) {
                    const view = this.toUint8Array(buffer);
                    res.set(view, offset);
                    offset += view.length;
                }
                if (args[1]) {
                    return this.toView(res, args[1]);
                }
                return res.buffer;
            }
            else {
                return this.concat(args);
            }
        }
    }

    class Utf8Converter {
        static fromString(text) {
            const s = unescape(encodeURIComponent(text));
            const uintArray = new Uint8Array(s.length);
            for (let i = 0; i < s.length; i++) {
                uintArray[i] = s.charCodeAt(i);
            }
            return uintArray.buffer;
        }
        static toString(buffer) {
            const buf = BufferSourceConverter.toUint8Array(buffer);
            let encodedString = "";
            for (let i = 0; i < buf.length; i++) {
                encodedString += String.fromCharCode(buf[i]);
            }
            const decodedString = decodeURIComponent(escape(encodedString));
            return decodedString;
        }
    }
    class Utf16Converter {
        static toString(buffer, littleEndian = false) {
            const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);
            const dataView = new DataView(arrayBuffer);
            let res = "";
            for (let i = 0; i < arrayBuffer.byteLength; i += 2) {
                const code = dataView.getUint16(i, littleEndian);
                res += String.fromCharCode(code);
            }
            return res;
        }
        static fromString(text, littleEndian = false) {
            const res = new ArrayBuffer(text.length * 2);
            const dataView = new DataView(res);
            for (let i = 0; i < text.length; i++) {
                dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);
            }
            return res;
        }
    }
    class Convert {
        static isHex(data) {
            return typeof data === "string"
                && /^[a-z0-9]+$/i.test(data);
        }
        static isBase64(data) {
            return typeof data === "string"
                && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);
        }
        static isBase64Url(data) {
            return typeof data === "string"
                && /^[a-zA-Z0-9-_]+$/i.test(data);
        }
        static ToString(buffer, enc = "utf8") {
            const buf = BufferSourceConverter.toUint8Array(buffer);
            switch (enc.toLowerCase()) {
                case "utf8":
                    return this.ToUtf8String(buf);
                case "binary":
                    return this.ToBinary(buf);
                case "hex":
                    return this.ToHex(buf);
                case "base64":
                    return this.ToBase64(buf);
                case "base64url":
                    return this.ToBase64Url(buf);
                case "utf16le":
                    return Utf16Converter.toString(buf, true);
                case "utf16":
                case "utf16be":
                    return Utf16Converter.toString(buf);
                default:
                    throw new Error(`Unknown type of encoding '${enc}'`);
            }
        }
        static FromString(str, enc = "utf8") {
            if (!str) {
                return new ArrayBuffer(0);
            }
            switch (enc.toLowerCase()) {
                case "utf8":
                    return this.FromUtf8String(str);
                case "binary":
                    return this.FromBinary(str);
                case "hex":
                    return this.FromHex(str);
                case "base64":
                    return this.FromBase64(str);
                case "base64url":
                    return this.FromBase64Url(str);
                case "utf16le":
                    return Utf16Converter.fromString(str, true);
                case "utf16":
                case "utf16be":
                    return Utf16Converter.fromString(str);
                default:
                    throw new Error(`Unknown type of encoding '${enc}'`);
            }
        }
        static ToBase64(buffer) {
            const buf = BufferSourceConverter.toUint8Array(buffer);
            if (typeof btoa !== "undefined") {
                const binary = this.ToString(buf, "binary");
                return btoa(binary);
            }
            else {
                return Buffer.from(buf).toString("base64");
            }
        }
        static FromBase64(base64) {
            const formatted = this.formatString(base64);
            if (!formatted) {
                return new ArrayBuffer(0);
            }
            if (!Convert.isBase64(formatted)) {
                throw new TypeError("Argument 'base64Text' is not Base64 encoded");
            }
            if (typeof atob !== "undefined") {
                return this.FromBinary(atob(formatted));
            }
            else {
                return new Uint8Array(Buffer.from(formatted, "base64")).buffer;
            }
        }
        static FromBase64Url(base64url) {
            const formatted = this.formatString(base64url);
            if (!formatted) {
                return new ArrayBuffer(0);
            }
            if (!Convert.isBase64Url(formatted)) {
                throw new TypeError("Argument 'base64url' is not Base64Url encoded");
            }
            return this.FromBase64(this.Base64Padding(formatted.replace(/\-/g, "+").replace(/\_/g, "/")));
        }
        static ToBase64Url(data) {
            return this.ToBase64(data).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
        }
        static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {
            switch (encoding) {
                case "ascii":
                    return this.FromBinary(text);
                case "utf8":
                    return Utf8Converter.fromString(text);
                case "utf16":
                case "utf16be":
                    return Utf16Converter.fromString(text);
                case "utf16le":
                case "usc2":
                    return Utf16Converter.fromString(text, true);
                default:
                    throw new Error(`Unknown type of encoding '${encoding}'`);
            }
        }
        static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {
            switch (encoding) {
                case "ascii":
                    return this.ToBinary(buffer);
                case "utf8":
                    return Utf8Converter.toString(buffer);
                case "utf16":
                case "utf16be":
                    return Utf16Converter.toString(buffer);
                case "utf16le":
                case "usc2":
                    return Utf16Converter.toString(buffer, true);
                default:
                    throw new Error(`Unknown type of encoding '${encoding}'`);
            }
        }
        static FromBinary(text) {
            const stringLength = text.length;
            const resultView = new Uint8Array(stringLength);
            for (let i = 0; i < stringLength; i++) {
                resultView[i] = text.charCodeAt(i);
            }
            return resultView.buffer;
        }
        static ToBinary(buffer) {
            const buf = BufferSourceConverter.toUint8Array(buffer);
            let res = "";
            for (let i = 0; i < buf.length; i++) {
                res += String.fromCharCode(buf[i]);
            }
            return res;
        }
        static ToHex(buffer) {
            const buf = BufferSourceConverter.toUint8Array(buffer);
            const splitter = "";
            const res = [];
            const len = buf.length;
            for (let i = 0; i < len; i++) {
                const char = buf[i].toString(16).padStart(2, "0");
                res.push(char);
            }
            return res.join(splitter);
        }
        static FromHex(hexString) {
            let formatted = this.formatString(hexString);
            if (!formatted) {
                return new ArrayBuffer(0);
            }
            if (!Convert.isHex(formatted)) {
                throw new TypeError("Argument 'hexString' is not HEX encoded");
            }
            if (formatted.length % 2) {
                formatted = `0${formatted}`;
            }
            const res = new Uint8Array(formatted.length / 2);
            for (let i = 0; i < formatted.length; i = i + 2) {
                const c = formatted.slice(i, i + 2);
                res[i / 2] = parseInt(c, 16);
            }
            return res.buffer;
        }
        static ToUtf16String(buffer, littleEndian = false) {
            return Utf16Converter.toString(buffer, littleEndian);
        }
        static FromUtf16String(text, littleEndian = false) {
            return Utf16Converter.fromString(text, littleEndian);
        }
        static Base64Padding(base64) {
            const padCount = 4 - (base64.length % 4);
            if (padCount < 4) {
                for (let i = 0; i < padCount; i++) {
                    base64 += "=";
                }
            }
            return base64;
        }
        static formatString(data) {
            return (data === null || data === void 0 ? void 0 : data.replace(/[\n\r\t ]/g, "")) || "";
        }
    }
    Convert.DEFAULT_UTF8_ENCODING = "utf8";

    function assign(target, ...sources) {
        const res = arguments[0];
        for (let i = 1; i < arguments.length; i++) {
            const obj = arguments[i];
            for (const prop in obj) {
                res[prop] = obj[prop];
            }
        }
        return res;
    }
    function combine(...buf) {
        const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);
        const res = new Uint8Array(totalByteLength);
        let currentPos = 0;
        buf.map((item) => new Uint8Array(item)).forEach((arr) => {
            for (const item2 of arr) {
                res[currentPos++] = item2;
            }
        });
        return res.buffer;
    }
    function isEqual(bytes1, bytes2) {
        if (!(bytes1 && bytes2)) {
            return false;
        }
        if (bytes1.byteLength !== bytes2.byteLength) {
            return false;
        }
        const b1 = new Uint8Array(bytes1);
        const b2 = new Uint8Array(bytes2);
        for (let i = 0; i < bytes1.byteLength; i++) {
            if (b1[i] !== b2[i]) {
                return false;
            }
        }
        return true;
    }

    exports.BufferSourceConverter = BufferSourceConverter;
    exports.Convert = Convert;
    exports.assign = assign;
    exports.combine = combine;
    exports.isEqual = isEqual;
    });

    /*!
     Copyright (c) Peculiar Ventures, LLC
    */
    function utilFromBase(inputBuffer, inputBase) {
        let result = 0;
        if (inputBuffer.length === 1) {
            return inputBuffer[0];
        }
        for (let i = (inputBuffer.length - 1); i >= 0; i--) {
            result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);
        }
        return result;
    }
    function utilToBase(value, base, reserved = (-1)) {
        const internalReserved = reserved;
        let internalValue = value;
        let result = 0;
        let biggest = Math.pow(2, base);
        for (let i = 1; i < 8; i++) {
            if (value < biggest) {
                let retBuf;
                if (internalReserved < 0) {
                    retBuf = new ArrayBuffer(i);
                    result = i;
                }
                else {
                    if (internalReserved < i) {
                        return (new ArrayBuffer(0));
                    }
                    retBuf = new ArrayBuffer(internalReserved);
                    result = internalReserved;
                }
                const retView = new Uint8Array(retBuf);
                for (let j = (i - 1); j >= 0; j--) {
                    const basis = Math.pow(2, j * base);
                    retView[result - j - 1] = Math.floor(internalValue / basis);
                    internalValue -= (retView[result - j - 1]) * basis;
                }
                return retBuf;
            }
            biggest *= Math.pow(2, base);
        }
        return new ArrayBuffer(0);
    }
    function utilConcatView(...views) {
        let outputLength = 0;
        let prevLength = 0;
        for (const view of views) {
            outputLength += view.length;
        }
        const retBuf = new ArrayBuffer(outputLength);
        const retView = new Uint8Array(retBuf);
        for (const view of views) {
            retView.set(view, prevLength);
            prevLength += view.length;
        }
        return retView;
    }
    function utilDecodeTC() {
        const buf = new Uint8Array(this.valueHex);
        if (this.valueHex.byteLength >= 2) {
            const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);
            const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);
            if (condition1 || condition2) {
                this.warnings.push("Needlessly long format");
            }
        }
        const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
        const bigIntView = new Uint8Array(bigIntBuffer);
        for (let i = 0; i < this.valueHex.byteLength; i++) {
            bigIntView[i] = 0;
        }
        bigIntView[0] = (buf[0] & 0x80);
        const bigInt = utilFromBase(bigIntView, 8);
        const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);
        const smallIntView = new Uint8Array(smallIntBuffer);
        for (let j = 0; j < this.valueHex.byteLength; j++) {
            smallIntView[j] = buf[j];
        }
        smallIntView[0] &= 0x7F;
        const smallInt = utilFromBase(smallIntView, 8);
        return (smallInt - bigInt);
    }
    function utilEncodeTC(value) {
        const modValue = (value < 0) ? (value * (-1)) : value;
        let bigInt = 128;
        for (let i = 1; i < 8; i++) {
            if (modValue <= bigInt) {
                if (value < 0) {
                    const smallInt = bigInt - modValue;
                    const retBuf = utilToBase(smallInt, 8, i);
                    const retView = new Uint8Array(retBuf);
                    retView[0] |= 0x80;
                    return retBuf;
                }
                let retBuf = utilToBase(modValue, 8, i);
                let retView = new Uint8Array(retBuf);
                if (retView[0] & 0x80) {
                    const tempBuf = retBuf.slice(0);
                    const tempView = new Uint8Array(tempBuf);
                    retBuf = new ArrayBuffer(retBuf.byteLength + 1);
                    retView = new Uint8Array(retBuf);
                    for (let k = 0; k < tempBuf.byteLength; k++) {
                        retView[k + 1] = tempView[k];
                    }
                    retView[0] = 0x00;
                }
                return retBuf;
            }
            bigInt *= Math.pow(2, 8);
        }
        return (new ArrayBuffer(0));
    }
    function isEqualBuffer(inputBuffer1, inputBuffer2) {
        if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {
            return false;
        }
        const view1 = new Uint8Array(inputBuffer1);
        const view2 = new Uint8Array(inputBuffer2);
        for (let i = 0; i < view1.length; i++) {
            if (view1[i] !== view2[i]) {
                return false;
            }
        }
        return true;
    }
    function padNumber(inputNumber, fullLength) {
        const str = inputNumber.toString(10);
        if (fullLength < str.length) {
            return "";
        }
        const dif = fullLength - str.length;
        const padding = new Array(dif);
        for (let i = 0; i < dif; i++) {
            padding[i] = "0";
        }
        const paddingString = padding.join("");
        return paddingString.concat(str);
    }

    /*!
     * Copyright (c) 2014, GMO GlobalSign
     * Copyright (c) 2015-2022, Peculiar Ventures
     * All rights reserved.
     * 
     * Author 2014-2019, Yury Strozhevsky
     * 
     * Redistribution and use in source and binary forms, with or without modification,
     * are permitted provided that the following conditions are met:
     * 
     * * Redistributions of source code must retain the above copyright notice, this
     *   list of conditions and the following disclaimer.
     * 
     * * Redistributions in binary form must reproduce the above copyright notice, this
     *   list of conditions and the following disclaimer in the documentation and/or
     *   other materials provided with the distribution.
     * 
     * * Neither the name of the copyright holder nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     * 
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     * 
     */

    function assertBigInt() {
        if (typeof BigInt === "undefined") {
            throw new Error("BigInt is not defined. Your environment doesn't implement BigInt.");
        }
    }
    function concat$1(buffers) {
        let outputLength = 0;
        let prevLength = 0;
        for (let i = 0; i < buffers.length; i++) {
            const buffer = buffers[i];
            outputLength += buffer.byteLength;
        }
        const retView = new Uint8Array(outputLength);
        for (let i = 0; i < buffers.length; i++) {
            const buffer = buffers[i];
            retView.set(new Uint8Array(buffer), prevLength);
            prevLength += buffer.byteLength;
        }
        return retView.buffer;
    }
    function checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {
        if (!(inputBuffer instanceof Uint8Array)) {
            baseBlock.error = "Wrong parameter: inputBuffer must be 'Uint8Array'";
            return false;
        }
        if (!inputBuffer.byteLength) {
            baseBlock.error = "Wrong parameter: inputBuffer has zero length";
            return false;
        }
        if (inputOffset < 0) {
            baseBlock.error = "Wrong parameter: inputOffset less than zero";
            return false;
        }
        if (inputLength < 0) {
            baseBlock.error = "Wrong parameter: inputLength less than zero";
            return false;
        }
        if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {
            baseBlock.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
            return false;
        }
        return true;
    }

    class ViewWriter {
        constructor() {
            this.items = [];
        }
        write(buf) {
            this.items.push(buf);
        }
        final() {
            return concat$1(this.items);
        }
    }

    const powers2 = [new Uint8Array([1])];
    const digitsString = "0123456789";
    const NAME = "name";
    const VALUE_HEX_VIEW = "valueHexView";
    const IS_HEX_ONLY = "isHexOnly";
    const ID_BLOCK = "idBlock";
    const TAG_CLASS = "tagClass";
    const TAG_NUMBER = "tagNumber";
    const IS_CONSTRUCTED = "isConstructed";
    const FROM_BER = "fromBER";
    const TO_BER = "toBER";
    const LOCAL = "local";
    const EMPTY_STRING = "";
    const EMPTY_BUFFER = new ArrayBuffer(0);
    const EMPTY_VIEW = new Uint8Array(0);
    const END_OF_CONTENT_NAME = "EndOfContent";
    const OCTET_STRING_NAME = "OCTET STRING";
    const BIT_STRING_NAME = "BIT STRING";

    function HexBlock(BaseClass) {
        var _a;
        return _a = class Some extends BaseClass {
                constructor(...args) {
                    var _a;
                    super(...args);
                    const params = args[0] || {};
                    this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;
                    this.valueHexView = params.valueHex ? build.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;
                }
                get valueHex() {
                    return this.valueHexView.slice().buffer;
                }
                set valueHex(value) {
                    this.valueHexView = new Uint8Array(value);
                }
                fromBER(inputBuffer, inputOffset, inputLength) {
                    const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
                    if (!checkBufferParams(this, view, inputOffset, inputLength)) {
                        return -1;
                    }
                    const endLength = inputOffset + inputLength;
                    this.valueHexView = view.subarray(inputOffset, endLength);
                    if (!this.valueHexView.length) {
                        this.warnings.push("Zero buffer length");
                        return inputOffset;
                    }
                    this.blockLength = inputLength;
                    return endLength;
                }
                toBER(sizeOnly = false) {
                    if (!this.isHexOnly) {
                        this.error = "Flag 'isHexOnly' is not set, abort";
                        return EMPTY_BUFFER;
                    }
                    if (sizeOnly) {
                        return new ArrayBuffer(this.valueHexView.byteLength);
                    }
                    return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)
                        ? this.valueHexView.buffer
                        : this.valueHexView.slice().buffer;
                }
                toJSON() {
                    return {
                        ...super.toJSON(),
                        isHexOnly: this.isHexOnly,
                        valueHex: build.Convert.ToHex(this.valueHexView),
                    };
                }
            },
            _a.NAME = "hexBlock",
            _a;
    }

    class LocalBaseBlock {
        constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {
            this.blockLength = blockLength;
            this.error = error;
            this.warnings = warnings;
            this.valueBeforeDecodeView = build.BufferSourceConverter.toUint8Array(valueBeforeDecode);
        }
        static blockName() {
            return this.NAME;
        }
        get valueBeforeDecode() {
            return this.valueBeforeDecodeView.slice().buffer;
        }
        set valueBeforeDecode(value) {
            this.valueBeforeDecodeView = new Uint8Array(value);
        }
        toJSON() {
            return {
                blockName: this.constructor.NAME,
                blockLength: this.blockLength,
                error: this.error,
                warnings: this.warnings,
                valueBeforeDecode: build.Convert.ToHex(this.valueBeforeDecodeView),
            };
        }
    }
    LocalBaseBlock.NAME = "baseBlock";

    class ValueBlock extends LocalBaseBlock {
        fromBER(inputBuffer, inputOffset, inputLength) {
            throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
        }
        toBER(sizeOnly, writer) {
            throw TypeError("User need to make a specific function in a class which extends 'ValueBlock'");
        }
    }
    ValueBlock.NAME = "valueBlock";

    class LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {
        constructor({ idBlock = {}, } = {}) {
            var _a, _b, _c, _d;
            super();
            if (idBlock) {
                this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;
                this.valueHexView = idBlock.valueHex ? build.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;
                this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;
                this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;
                this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;
            }
            else {
                this.tagClass = -1;
                this.tagNumber = -1;
                this.isConstructed = false;
            }
        }
        toBER(sizeOnly = false) {
            let firstOctet = 0;
            switch (this.tagClass) {
                case 1:
                    firstOctet |= 0x00;
                    break;
                case 2:
                    firstOctet |= 0x40;
                    break;
                case 3:
                    firstOctet |= 0x80;
                    break;
                case 4:
                    firstOctet |= 0xC0;
                    break;
                default:
                    this.error = "Unknown tag class";
                    return EMPTY_BUFFER;
            }
            if (this.isConstructed)
                firstOctet |= 0x20;
            if (this.tagNumber < 31 && !this.isHexOnly) {
                const retView = new Uint8Array(1);
                if (!sizeOnly) {
                    let number = this.tagNumber;
                    number &= 0x1F;
                    firstOctet |= number;
                    retView[0] = firstOctet;
                }
                return retView.buffer;
            }
            if (!this.isHexOnly) {
                const encodedBuf = utilToBase(this.tagNumber, 7);
                const encodedView = new Uint8Array(encodedBuf);
                const size = encodedBuf.byteLength;
                const retView = new Uint8Array(size + 1);
                retView[0] = (firstOctet | 0x1F);
                if (!sizeOnly) {
                    for (let i = 0; i < (size - 1); i++)
                        retView[i + 1] = encodedView[i] | 0x80;
                    retView[size] = encodedView[size - 1];
                }
                return retView.buffer;
            }
            const retView = new Uint8Array(this.valueHexView.byteLength + 1);
            retView[0] = (firstOctet | 0x1F);
            if (!sizeOnly) {
                const curView = this.valueHexView;
                for (let i = 0; i < (curView.length - 1); i++)
                    retView[i + 1] = curView[i] | 0x80;
                retView[this.valueHexView.byteLength] = curView[curView.length - 1];
            }
            return retView.buffer;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
                return -1;
            }
            const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
            if (intBuffer.length === 0) {
                this.error = "Zero buffer length";
                return -1;
            }
            const tagClassMask = intBuffer[0] & 0xC0;
            switch (tagClassMask) {
                case 0x00:
                    this.tagClass = (1);
                    break;
                case 0x40:
                    this.tagClass = (2);
                    break;
                case 0x80:
                    this.tagClass = (3);
                    break;
                case 0xC0:
                    this.tagClass = (4);
                    break;
                default:
                    this.error = "Unknown tag class";
                    return -1;
            }
            this.isConstructed = (intBuffer[0] & 0x20) === 0x20;
            this.isHexOnly = false;
            const tagNumberMask = intBuffer[0] & 0x1F;
            if (tagNumberMask !== 0x1F) {
                this.tagNumber = (tagNumberMask);
                this.blockLength = 1;
            }
            else {
                let count = 1;
                let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);
                let tagNumberBufferMaxLength = 255;
                while (intBuffer[count] & 0x80) {
                    intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
                    count++;
                    if (count >= intBuffer.length) {
                        this.error = "End of input reached before message was fully decoded";
                        return -1;
                    }
                    if (count === tagNumberBufferMaxLength) {
                        tagNumberBufferMaxLength += 255;
                        const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);
                        for (let i = 0; i < intTagNumberBuffer.length; i++)
                            tempBufferView[i] = intTagNumberBuffer[i];
                        intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);
                    }
                }
                this.blockLength = (count + 1);
                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;
                const tempBufferView = new Uint8Array(count);
                for (let i = 0; i < count; i++)
                    tempBufferView[i] = intTagNumberBuffer[i];
                intTagNumberBuffer = this.valueHexView = new Uint8Array(count);
                intTagNumberBuffer.set(tempBufferView);
                if (this.blockLength <= 9)
                    this.tagNumber = utilFromBase(intTagNumberBuffer, 7);
                else {
                    this.isHexOnly = true;
                    this.warnings.push("Tag too long, represented as hex-coded");
                }
            }
            if (((this.tagClass === 1)) &&
                (this.isConstructed)) {
                switch (this.tagNumber) {
                    case 1:
                    case 2:
                    case 5:
                    case 6:
                    case 9:
                    case 13:
                    case 14:
                    case 23:
                    case 24:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                        this.error = "Constructed encoding used for primitive type";
                        return -1;
                }
            }
            return (inputOffset + this.blockLength);
        }
        toJSON() {
            return {
                ...super.toJSON(),
                tagClass: this.tagClass,
                tagNumber: this.tagNumber,
                isConstructed: this.isConstructed,
            };
        }
    }
    LocalIdentificationBlock.NAME = "identificationBlock";

    class LocalLengthBlock extends LocalBaseBlock {
        constructor({ lenBlock = {}, } = {}) {
            var _a, _b, _c;
            super();
            this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;
            this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;
            this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const view = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, view, inputOffset, inputLength)) {
                return -1;
            }
            const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);
            if (intBuffer.length === 0) {
                this.error = "Zero buffer length";
                return -1;
            }
            if (intBuffer[0] === 0xFF) {
                this.error = "Length block 0xFF is reserved by standard";
                return -1;
            }
            this.isIndefiniteForm = intBuffer[0] === 0x80;
            if (this.isIndefiniteForm) {
                this.blockLength = 1;
                return (inputOffset + this.blockLength);
            }
            this.longFormUsed = !!(intBuffer[0] & 0x80);
            if (this.longFormUsed === false) {
                this.length = (intBuffer[0]);
                this.blockLength = 1;
                return (inputOffset + this.blockLength);
            }
            const count = intBuffer[0] & 0x7F;
            if (count > 8) {
                this.error = "Too big integer";
                return -1;
            }
            if ((count + 1) > intBuffer.length) {
                this.error = "End of input reached before message was fully decoded";
                return -1;
            }
            const lenOffset = inputOffset + 1;
            const lengthBufferView = view.subarray(lenOffset, lenOffset + count);
            if (lengthBufferView[count - 1] === 0x00)
                this.warnings.push("Needlessly long encoded length");
            this.length = utilFromBase(lengthBufferView, 8);
            if (this.longFormUsed && (this.length <= 127))
                this.warnings.push("Unnecessary usage of long length form");
            this.blockLength = count + 1;
            return (inputOffset + this.blockLength);
        }
        toBER(sizeOnly = false) {
            let retBuf;
            let retView;
            if (this.length > 127)
                this.longFormUsed = true;
            if (this.isIndefiniteForm) {
                retBuf = new ArrayBuffer(1);
                if (sizeOnly === false) {
                    retView = new Uint8Array(retBuf);
                    retView[0] = 0x80;
                }
                return retBuf;
            }
            if (this.longFormUsed) {
                const encodedBuf = utilToBase(this.length, 8);
                if (encodedBuf.byteLength > 127) {
                    this.error = "Too big length";
                    return (EMPTY_BUFFER);
                }
                retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);
                if (sizeOnly)
                    return retBuf;
                const encodedView = new Uint8Array(encodedBuf);
                retView = new Uint8Array(retBuf);
                retView[0] = encodedBuf.byteLength | 0x80;
                for (let i = 0; i < encodedBuf.byteLength; i++)
                    retView[i + 1] = encodedView[i];
                return retBuf;
            }
            retBuf = new ArrayBuffer(1);
            if (sizeOnly === false) {
                retView = new Uint8Array(retBuf);
                retView[0] = this.length;
            }
            return retBuf;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                isIndefiniteForm: this.isIndefiniteForm,
                longFormUsed: this.longFormUsed,
                length: this.length,
            };
        }
    }
    LocalLengthBlock.NAME = "lengthBlock";

    const typeStore = {};

    class BaseBlock extends LocalBaseBlock {
        constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {
            super(parameters);
            this.name = name;
            this.optional = optional;
            if (primitiveSchema) {
                this.primitiveSchema = primitiveSchema;
            }
            this.idBlock = new LocalIdentificationBlock(parameters);
            this.lenBlock = new LocalLengthBlock(parameters);
            this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);
            if (resultOffset === -1) {
                this.error = this.valueBlock.error;
                return resultOffset;
            }
            if (!this.idBlock.error.length)
                this.blockLength += this.idBlock.blockLength;
            if (!this.lenBlock.error.length)
                this.blockLength += this.lenBlock.blockLength;
            if (!this.valueBlock.error.length)
                this.blockLength += this.valueBlock.blockLength;
            return resultOffset;
        }
        toBER(sizeOnly, writer) {
            const _writer = writer || new ViewWriter();
            if (!writer) {
                prepareIndefiniteForm(this);
            }
            const idBlockBuf = this.idBlock.toBER(sizeOnly);
            _writer.write(idBlockBuf);
            if (this.lenBlock.isIndefiniteForm) {
                _writer.write(new Uint8Array([0x80]).buffer);
                this.valueBlock.toBER(sizeOnly, _writer);
                _writer.write(new ArrayBuffer(2));
            }
            else {
                const valueBlockBuf = this.valueBlock.toBER(sizeOnly);
                this.lenBlock.length = valueBlockBuf.byteLength;
                const lenBlockBuf = this.lenBlock.toBER(sizeOnly);
                _writer.write(lenBlockBuf);
                _writer.write(valueBlockBuf);
            }
            if (!writer) {
                return _writer.final();
            }
            return EMPTY_BUFFER;
        }
        toJSON() {
            const object = {
                ...super.toJSON(),
                idBlock: this.idBlock.toJSON(),
                lenBlock: this.lenBlock.toJSON(),
                valueBlock: this.valueBlock.toJSON(),
                name: this.name,
                optional: this.optional,
            };
            if (this.primitiveSchema)
                object.primitiveSchema = this.primitiveSchema.toJSON();
            return object;
        }
        toString(encoding = "ascii") {
            if (encoding === "ascii") {
                return this.onAsciiEncoding();
            }
            return build.Convert.ToHex(this.toBER());
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : ${build.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;
        }
        isEqual(other) {
            if (this === other) {
                return true;
            }
            if (!(other instanceof this.constructor)) {
                return false;
            }
            const thisRaw = this.toBER();
            const otherRaw = other.toBER();
            return isEqualBuffer(thisRaw, otherRaw);
        }
    }
    BaseBlock.NAME = "BaseBlock";
    function prepareIndefiniteForm(baseBlock) {
        if (baseBlock instanceof typeStore.Constructed) {
            for (const value of baseBlock.valueBlock.value) {
                if (prepareIndefiniteForm(value)) {
                    baseBlock.lenBlock.isIndefiniteForm = true;
                }
            }
        }
        return !!baseBlock.lenBlock.isIndefiniteForm;
    }

    class BaseStringBlock extends BaseBlock {
        constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {
            super(parameters, stringValueBlockType);
            if (value) {
                this.fromString(value);
            }
        }
        getValue() {
            return this.valueBlock.value;
        }
        setValue(value) {
            this.valueBlock.value = value;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);
            if (resultOffset === -1) {
                this.error = this.valueBlock.error;
                return resultOffset;
            }
            this.fromBuffer(this.valueBlock.valueHexView);
            if (!this.idBlock.error.length)
                this.blockLength += this.idBlock.blockLength;
            if (!this.lenBlock.error.length)
                this.blockLength += this.lenBlock.blockLength;
            if (!this.valueBlock.error.length)
                this.blockLength += this.valueBlock.blockLength;
            return resultOffset;
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : '${this.valueBlock.value}'`;
        }
    }
    BaseStringBlock.NAME = "BaseStringBlock";

    class LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {
        constructor({ isHexOnly = true, ...parameters } = {}) {
            super(parameters);
            this.isHexOnly = isHexOnly;
        }
    }
    LocalPrimitiveValueBlock.NAME = "PrimitiveValueBlock";

    var _a$w;
    class Primitive extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalPrimitiveValueBlock);
            this.idBlock.isConstructed = false;
        }
    }
    _a$w = Primitive;
    (() => {
        typeStore.Primitive = _a$w;
    })();
    Primitive.NAME = "PRIMITIVE";

    function localChangeType(inputObject, newType) {
        if (inputObject instanceof newType) {
            return inputObject;
        }
        const newObject = new newType();
        newObject.idBlock = inputObject.idBlock;
        newObject.lenBlock = inputObject.lenBlock;
        newObject.warnings = inputObject.warnings;
        newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;
        return newObject;
    }
    function localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {
        const incomingOffset = inputOffset;
        let returnObject = new BaseBlock({}, ValueBlock);
        const baseBlock = new LocalBaseBlock();
        if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {
            returnObject.error = baseBlock.error;
            return {
                offset: -1,
                result: returnObject
            };
        }
        const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);
        if (!intBuffer.length) {
            returnObject.error = "Zero buffer length";
            return {
                offset: -1,
                result: returnObject
            };
        }
        let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);
        if (returnObject.idBlock.warnings.length) {
            returnObject.warnings.concat(returnObject.idBlock.warnings);
        }
        if (resultOffset === -1) {
            returnObject.error = returnObject.idBlock.error;
            return {
                offset: -1,
                result: returnObject
            };
        }
        inputOffset = resultOffset;
        inputLength -= returnObject.idBlock.blockLength;
        resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);
        if (returnObject.lenBlock.warnings.length) {
            returnObject.warnings.concat(returnObject.lenBlock.warnings);
        }
        if (resultOffset === -1) {
            returnObject.error = returnObject.lenBlock.error;
            return {
                offset: -1,
                result: returnObject
            };
        }
        inputOffset = resultOffset;
        inputLength -= returnObject.lenBlock.blockLength;
        if (!returnObject.idBlock.isConstructed &&
            returnObject.lenBlock.isIndefiniteForm) {
            returnObject.error = "Indefinite length form used for primitive encoding form";
            return {
                offset: -1,
                result: returnObject
            };
        }
        let newASN1Type = BaseBlock;
        switch (returnObject.idBlock.tagClass) {
            case 1:
                if ((returnObject.idBlock.tagNumber >= 37) &&
                    (returnObject.idBlock.isHexOnly === false)) {
                    returnObject.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard";
                    return {
                        offset: -1,
                        result: returnObject
                    };
                }
                switch (returnObject.idBlock.tagNumber) {
                    case 0:
                        if ((returnObject.idBlock.isConstructed) &&
                            (returnObject.lenBlock.length > 0)) {
                            returnObject.error = "Type [UNIVERSAL 0] is reserved";
                            return {
                                offset: -1,
                                result: returnObject
                            };
                        }
                        newASN1Type = typeStore.EndOfContent;
                        break;
                    case 1:
                        newASN1Type = typeStore.Boolean;
                        break;
                    case 2:
                        newASN1Type = typeStore.Integer;
                        break;
                    case 3:
                        newASN1Type = typeStore.BitString;
                        break;
                    case 4:
                        newASN1Type = typeStore.OctetString;
                        break;
                    case 5:
                        newASN1Type = typeStore.Null;
                        break;
                    case 6:
                        newASN1Type = typeStore.ObjectIdentifier;
                        break;
                    case 10:
                        newASN1Type = typeStore.Enumerated;
                        break;
                    case 12:
                        newASN1Type = typeStore.Utf8String;
                        break;
                    case 13:
                        newASN1Type = typeStore.RelativeObjectIdentifier;
                        break;
                    case 14:
                        newASN1Type = typeStore.TIME;
                        break;
                    case 15:
                        returnObject.error = "[UNIVERSAL 15] is reserved by ASN.1 standard";
                        return {
                            offset: -1,
                            result: returnObject
                        };
                    case 16:
                        newASN1Type = typeStore.Sequence;
                        break;
                    case 17:
                        newASN1Type = typeStore.Set;
                        break;
                    case 18:
                        newASN1Type = typeStore.NumericString;
                        break;
                    case 19:
                        newASN1Type = typeStore.PrintableString;
                        break;
                    case 20:
                        newASN1Type = typeStore.TeletexString;
                        break;
                    case 21:
                        newASN1Type = typeStore.VideotexString;
                        break;
                    case 22:
                        newASN1Type = typeStore.IA5String;
                        break;
                    case 23:
                        newASN1Type = typeStore.UTCTime;
                        break;
                    case 24:
                        newASN1Type = typeStore.GeneralizedTime;
                        break;
                    case 25:
                        newASN1Type = typeStore.GraphicString;
                        break;
                    case 26:
                        newASN1Type = typeStore.VisibleString;
                        break;
                    case 27:
                        newASN1Type = typeStore.GeneralString;
                        break;
                    case 28:
                        newASN1Type = typeStore.UniversalString;
                        break;
                    case 29:
                        newASN1Type = typeStore.CharacterString;
                        break;
                    case 30:
                        newASN1Type = typeStore.BmpString;
                        break;
                    case 31:
                        newASN1Type = typeStore.DATE;
                        break;
                    case 32:
                        newASN1Type = typeStore.TimeOfDay;
                        break;
                    case 33:
                        newASN1Type = typeStore.DateTime;
                        break;
                    case 34:
                        newASN1Type = typeStore.Duration;
                        break;
                    default: {
                        const newObject = returnObject.idBlock.isConstructed
                            ? new typeStore.Constructed()
                            : new typeStore.Primitive();
                        newObject.idBlock = returnObject.idBlock;
                        newObject.lenBlock = returnObject.lenBlock;
                        newObject.warnings = returnObject.warnings;
                        returnObject = newObject;
                    }
                }
                break;
            case 2:
            case 3:
            case 4:
            default: {
                newASN1Type = returnObject.idBlock.isConstructed
                    ? typeStore.Constructed
                    : typeStore.Primitive;
            }
        }
        returnObject = localChangeType(returnObject, newASN1Type);
        resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);
        returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);
        return {
            offset: resultOffset,
            result: returnObject
        };
    }
    function fromBER(inputBuffer) {
        if (!inputBuffer.byteLength) {
            const result = new BaseBlock({}, ValueBlock);
            result.error = "Input buffer has zero length";
            return {
                offset: -1,
                result
            };
        }
        return localFromBER(build.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);
    }

    function checkLen(indefiniteLength, length) {
        if (indefiniteLength) {
            return 1;
        }
        return length;
    }
    class LocalConstructedValueBlock extends ValueBlock {
        constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {
            super(parameters);
            this.value = value;
            this.isIndefiniteForm = isIndefiniteForm;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const view = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, view, inputOffset, inputLength)) {
                return -1;
            }
            this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);
            if (this.valueBeforeDecodeView.length === 0) {
                this.warnings.push("Zero buffer length");
                return inputOffset;
            }
            let currentOffset = inputOffset;
            while (checkLen(this.isIndefiniteForm, inputLength) > 0) {
                const returnObject = localFromBER(view, currentOffset, inputLength);
                if (returnObject.offset === -1) {
                    this.error = returnObject.result.error;
                    this.warnings.concat(returnObject.result.warnings);
                    return -1;
                }
                currentOffset = returnObject.offset;
                this.blockLength += returnObject.result.blockLength;
                inputLength -= returnObject.result.blockLength;
                this.value.push(returnObject.result);
                if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {
                    break;
                }
            }
            if (this.isIndefiniteForm) {
                if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {
                    this.value.pop();
                }
                else {
                    this.warnings.push("No EndOfContent block encoded");
                }
            }
            return currentOffset;
        }
        toBER(sizeOnly, writer) {
            const _writer = writer || new ViewWriter();
            for (let i = 0; i < this.value.length; i++) {
                this.value[i].toBER(sizeOnly, _writer);
            }
            if (!writer) {
                return _writer.final();
            }
            return EMPTY_BUFFER;
        }
        toJSON() {
            const object = {
                ...super.toJSON(),
                isIndefiniteForm: this.isIndefiniteForm,
                value: [],
            };
            for (const value of this.value) {
                object.value.push(value.toJSON());
            }
            return object;
        }
    }
    LocalConstructedValueBlock.NAME = "ConstructedValueBlock";

    var _a$v;
    class Constructed extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalConstructedValueBlock);
            this.idBlock.isConstructed = true;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
            const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);
            if (resultOffset === -1) {
                this.error = this.valueBlock.error;
                return resultOffset;
            }
            if (!this.idBlock.error.length)
                this.blockLength += this.idBlock.blockLength;
            if (!this.lenBlock.error.length)
                this.blockLength += this.lenBlock.blockLength;
            if (!this.valueBlock.error.length)
                this.blockLength += this.valueBlock.blockLength;
            return resultOffset;
        }
        onAsciiEncoding() {
            const values = [];
            for (const value of this.valueBlock.value) {
                values.push(value.toString("ascii").split("\n").map(o => `  ${o}`).join("\n"));
            }
            const blockName = this.idBlock.tagClass === 3
                ? `[${this.idBlock.tagNumber}]`
                : this.constructor.NAME;
            return values.length
                ? `${blockName} :\n${values.join("\n")}`
                : `${blockName} :`;
        }
    }
    _a$v = Constructed;
    (() => {
        typeStore.Constructed = _a$v;
    })();
    Constructed.NAME = "CONSTRUCTED";

    class LocalEndOfContentValueBlock extends ValueBlock {
        fromBER(inputBuffer, inputOffset, inputLength) {
            return inputOffset;
        }
        toBER(sizeOnly) {
            return EMPTY_BUFFER;
        }
    }
    LocalEndOfContentValueBlock.override = "EndOfContentValueBlock";

    var _a$u;
    class EndOfContent extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalEndOfContentValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 0;
        }
    }
    _a$u = EndOfContent;
    (() => {
        typeStore.EndOfContent = _a$u;
    })();
    EndOfContent.NAME = END_OF_CONTENT_NAME;

    var _a$t;
    class Null extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, ValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 5;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            if (this.lenBlock.length > 0)
                this.warnings.push("Non-zero length of value block for Null type");
            if (!this.idBlock.error.length)
                this.blockLength += this.idBlock.blockLength;
            if (!this.lenBlock.error.length)
                this.blockLength += this.lenBlock.blockLength;
            this.blockLength += inputLength;
            if ((inputOffset + inputLength) > inputBuffer.byteLength) {
                this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)";
                return -1;
            }
            return (inputOffset + inputLength);
        }
        toBER(sizeOnly, writer) {
            const retBuf = new ArrayBuffer(2);
            if (!sizeOnly) {
                const retView = new Uint8Array(retBuf);
                retView[0] = 0x05;
                retView[1] = 0x00;
            }
            if (writer) {
                writer.write(retBuf);
            }
            return retBuf;
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME}`;
        }
    }
    _a$t = Null;
    (() => {
        typeStore.Null = _a$t;
    })();
    Null.NAME = "NULL";

    class LocalBooleanValueBlock extends HexBlock(ValueBlock) {
        constructor({ value, ...parameters } = {}) {
            super(parameters);
            if (parameters.valueHex) {
                this.valueHexView = build.BufferSourceConverter.toUint8Array(parameters.valueHex);
            }
            else {
                this.valueHexView = new Uint8Array(1);
            }
            if (value) {
                this.value = value;
            }
        }
        get value() {
            for (const octet of this.valueHexView) {
                if (octet > 0) {
                    return true;
                }
            }
            return false;
        }
        set value(value) {
            this.valueHexView[0] = value ? 0xFF : 0x00;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
                return -1;
            }
            this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);
            if (inputLength > 1)
                this.warnings.push("Boolean value encoded in more then 1 octet");
            this.isHexOnly = true;
            utilDecodeTC.call(this);
            this.blockLength = inputLength;
            return (inputOffset + inputLength);
        }
        toBER() {
            return this.valueHexView.slice();
        }
        toJSON() {
            return {
                ...super.toJSON(),
                value: this.value,
            };
        }
    }
    LocalBooleanValueBlock.NAME = "BooleanValueBlock";

    var _a$s;
    class Boolean$1 extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalBooleanValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 1;
        }
        getValue() {
            return this.valueBlock.value;
        }
        setValue(value) {
            this.valueBlock.value = value;
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : ${this.getValue}`;
        }
    }
    _a$s = Boolean$1;
    (() => {
        typeStore.Boolean = _a$s;
    })();
    Boolean$1.NAME = "BOOLEAN";

    class LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {
        constructor({ isConstructed = false, ...parameters } = {}) {
            super(parameters);
            this.isConstructed = isConstructed;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            let resultOffset = 0;
            if (this.isConstructed) {
                this.isHexOnly = false;
                resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
                if (resultOffset === -1)
                    return resultOffset;
                for (let i = 0; i < this.value.length; i++) {
                    const currentBlockName = this.value[i].constructor.NAME;
                    if (currentBlockName === END_OF_CONTENT_NAME) {
                        if (this.isIndefiniteForm)
                            break;
                        else {
                            this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only";
                            return -1;
                        }
                    }
                    if (currentBlockName !== OCTET_STRING_NAME) {
                        this.error = "OCTET STRING may consists of OCTET STRINGs only";
                        return -1;
                    }
                }
            }
            else {
                this.isHexOnly = true;
                resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
                this.blockLength = inputLength;
            }
            return resultOffset;
        }
        toBER(sizeOnly, writer) {
            if (this.isConstructed)
                return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
            return sizeOnly
                ? new ArrayBuffer(this.valueHexView.byteLength)
                : this.valueHexView.slice().buffer;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                isConstructed: this.isConstructed,
            };
        }
    }
    LocalOctetStringValueBlock.NAME = "OctetStringValueBlock";

    var _a$r;
    class OctetString$1 extends BaseBlock {
        constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {
            var _b, _c;
            (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));
            super({
                idBlock: {
                    isConstructed: parameters.isConstructed,
                    ...idBlock,
                },
                lenBlock: {
                    ...lenBlock,
                    isIndefiniteForm: !!parameters.isIndefiniteForm,
                },
                ...parameters,
            }, LocalOctetStringValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 4;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            this.valueBlock.isConstructed = this.idBlock.isConstructed;
            this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
            if (inputLength === 0) {
                if (this.idBlock.error.length === 0)
                    this.blockLength += this.idBlock.blockLength;
                if (this.lenBlock.error.length === 0)
                    this.blockLength += this.lenBlock.blockLength;
                return inputOffset;
            }
            if (!this.valueBlock.isConstructed) {
                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;
                const buf = view.subarray(inputOffset, inputOffset + inputLength);
                try {
                    if (buf.byteLength) {
                        const asn = localFromBER(buf, 0, buf.byteLength);
                        if (asn.offset !== -1 && asn.offset === inputLength) {
                            this.valueBlock.value = [asn.result];
                        }
                    }
                }
                catch (e) {
                }
            }
            return super.fromBER(inputBuffer, inputOffset, inputLength);
        }
        onAsciiEncoding() {
            if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {
                return Constructed.prototype.onAsciiEncoding.call(this);
            }
            return `${this.constructor.NAME} : ${build.Convert.ToHex(this.valueBlock.valueHexView)}`;
        }
        getValue() {
            if (!this.idBlock.isConstructed) {
                return this.valueBlock.valueHexView.slice().buffer;
            }
            const array = [];
            for (const content of this.valueBlock.value) {
                if (content instanceof OctetString$1) {
                    array.push(content.valueBlock.valueHexView);
                }
            }
            return build.BufferSourceConverter.concat(array);
        }
    }
    _a$r = OctetString$1;
    (() => {
        typeStore.OctetString = _a$r;
    })();
    OctetString$1.NAME = OCTET_STRING_NAME;

    class LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {
        constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {
            super(parameters);
            this.unusedBits = unusedBits;
            this.isConstructed = isConstructed;
            this.blockLength = this.valueHexView.byteLength;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            if (!inputLength) {
                return inputOffset;
            }
            let resultOffset = -1;
            if (this.isConstructed) {
                resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);
                if (resultOffset === -1)
                    return resultOffset;
                for (const value of this.value) {
                    const currentBlockName = value.constructor.NAME;
                    if (currentBlockName === END_OF_CONTENT_NAME) {
                        if (this.isIndefiniteForm)
                            break;
                        else {
                            this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only";
                            return -1;
                        }
                    }
                    if (currentBlockName !== BIT_STRING_NAME) {
                        this.error = "BIT STRING may consists of BIT STRINGs only";
                        return -1;
                    }
                    const valueBlock = value.valueBlock;
                    if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {
                        this.error = "Using of \"unused bits\" inside constructive BIT STRING allowed for least one only";
                        return -1;
                    }
                    this.unusedBits = valueBlock.unusedBits;
                }
                return resultOffset;
            }
            const inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
                return -1;
            }
            const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
            this.unusedBits = intBuffer[0];
            if (this.unusedBits > 7) {
                this.error = "Unused bits for BitString must be in range 0-7";
                return -1;
            }
            if (!this.unusedBits) {
                const buf = intBuffer.subarray(1);
                try {
                    if (buf.byteLength) {
                        const asn = localFromBER(buf, 0, buf.byteLength);
                        if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {
                            this.value = [asn.result];
                        }
                    }
                }
                catch (e) {
                }
            }
            this.valueHexView = intBuffer.subarray(1);
            this.blockLength = intBuffer.length;
            return (inputOffset + inputLength);
        }
        toBER(sizeOnly, writer) {
            if (this.isConstructed) {
                return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);
            }
            if (sizeOnly) {
                return new ArrayBuffer(this.valueHexView.byteLength + 1);
            }
            if (!this.valueHexView.byteLength) {
                return EMPTY_BUFFER;
            }
            const retView = new Uint8Array(this.valueHexView.length + 1);
            retView[0] = this.unusedBits;
            retView.set(this.valueHexView, 1);
            return retView.buffer;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                unusedBits: this.unusedBits,
                isConstructed: this.isConstructed,
            };
        }
    }
    LocalBitStringValueBlock.NAME = "BitStringValueBlock";

    var _a$q;
    class BitString$1 extends BaseBlock {
        constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {
            var _b, _c;
            (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));
            super({
                idBlock: {
                    isConstructed: parameters.isConstructed,
                    ...idBlock,
                },
                lenBlock: {
                    ...lenBlock,
                    isIndefiniteForm: !!parameters.isIndefiniteForm,
                },
                ...parameters,
            }, LocalBitStringValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 3;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            this.valueBlock.isConstructed = this.idBlock.isConstructed;
            this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
            return super.fromBER(inputBuffer, inputOffset, inputLength);
        }
        onAsciiEncoding() {
            if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {
                return Constructed.prototype.onAsciiEncoding.call(this);
            }
            else {
                const bits = [];
                const valueHex = this.valueBlock.valueHexView;
                for (const byte of valueHex) {
                    bits.push(byte.toString(2).padStart(8, "0"));
                }
                const bitsStr = bits.join("");
                return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;
            }
        }
    }
    _a$q = BitString$1;
    (() => {
        typeStore.BitString = _a$q;
    })();
    BitString$1.NAME = BIT_STRING_NAME;

    var _a$p;
    function viewAdd(first, second) {
        const c = new Uint8Array([0]);
        const firstView = new Uint8Array(first);
        const secondView = new Uint8Array(second);
        let firstViewCopy = firstView.slice(0);
        const firstViewCopyLength = firstViewCopy.length - 1;
        const secondViewCopy = secondView.slice(0);
        const secondViewCopyLength = secondViewCopy.length - 1;
        let value = 0;
        const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;
        let counter = 0;
        for (let i = max; i >= 0; i--, counter++) {
            switch (true) {
                case (counter < secondViewCopy.length):
                    value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];
                    break;
                default:
                    value = firstViewCopy[firstViewCopyLength - counter] + c[0];
            }
            c[0] = value / 10;
            switch (true) {
                case (counter >= firstViewCopy.length):
                    firstViewCopy = utilConcatView(new Uint8Array([value % 10]), firstViewCopy);
                    break;
                default:
                    firstViewCopy[firstViewCopyLength - counter] = value % 10;
            }
        }
        if (c[0] > 0)
            firstViewCopy = utilConcatView(c, firstViewCopy);
        return firstViewCopy;
    }
    function power2(n) {
        if (n >= powers2.length) {
            for (let p = powers2.length; p <= n; p++) {
                const c = new Uint8Array([0]);
                let digits = (powers2[p - 1]).slice(0);
                for (let i = (digits.length - 1); i >= 0; i--) {
                    const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);
                    c[0] = newValue[0] / 10;
                    digits[i] = newValue[0] % 10;
                }
                if (c[0] > 0)
                    digits = utilConcatView(c, digits);
                powers2.push(digits);
            }
        }
        return powers2[n];
    }
    function viewSub(first, second) {
        let b = 0;
        const firstView = new Uint8Array(first);
        const secondView = new Uint8Array(second);
        const firstViewCopy = firstView.slice(0);
        const firstViewCopyLength = firstViewCopy.length - 1;
        const secondViewCopy = secondView.slice(0);
        const secondViewCopyLength = secondViewCopy.length - 1;
        let value;
        let counter = 0;
        for (let i = secondViewCopyLength; i >= 0; i--, counter++) {
            value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;
            switch (true) {
                case (value < 0):
                    b = 1;
                    firstViewCopy[firstViewCopyLength - counter] = value + 10;
                    break;
                default:
                    b = 0;
                    firstViewCopy[firstViewCopyLength - counter] = value;
            }
        }
        if (b > 0) {
            for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {
                value = firstViewCopy[firstViewCopyLength - counter] - b;
                if (value < 0) {
                    b = 1;
                    firstViewCopy[firstViewCopyLength - counter] = value + 10;
                }
                else {
                    b = 0;
                    firstViewCopy[firstViewCopyLength - counter] = value;
                    break;
                }
            }
        }
        return firstViewCopy.slice();
    }
    class LocalIntegerValueBlock extends HexBlock(ValueBlock) {
        constructor({ value, ...parameters } = {}) {
            super(parameters);
            this._valueDec = 0;
            if (parameters.valueHex) {
                this.setValueHex();
            }
            if (value !== undefined) {
                this.valueDec = value;
            }
        }
        setValueHex() {
            if (this.valueHexView.length >= 4) {
                this.warnings.push("Too big Integer for decoding, hex only");
                this.isHexOnly = true;
                this._valueDec = 0;
            }
            else {
                this.isHexOnly = false;
                if (this.valueHexView.length > 0) {
                    this._valueDec = utilDecodeTC.call(this);
                }
            }
        }
        set valueDec(v) {
            this._valueDec = v;
            this.isHexOnly = false;
            this.valueHexView = new Uint8Array(utilEncodeTC(v));
        }
        get valueDec() {
            return this._valueDec;
        }
        fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {
            const offset = this.fromBER(inputBuffer, inputOffset, inputLength);
            if (offset === -1)
                return offset;
            const view = this.valueHexView;
            if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {
                this.valueHexView = view.subarray(1);
            }
            else {
                if (expectedLength !== 0) {
                    if (view.length < expectedLength) {
                        if ((expectedLength - view.length) > 1)
                            expectedLength = view.length + 1;
                        this.valueHexView = view.subarray(expectedLength - view.length);
                    }
                }
            }
            return offset;
        }
        toDER(sizeOnly = false) {
            const view = this.valueHexView;
            switch (true) {
                case ((view[0] & 0x80) !== 0):
                    {
                        const updatedView = new Uint8Array(this.valueHexView.length + 1);
                        updatedView[0] = 0x00;
                        updatedView.set(view, 1);
                        this.valueHexView = updatedView;
                    }
                    break;
                case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):
                    {
                        this.valueHexView = this.valueHexView.subarray(1);
                    }
                    break;
            }
            return this.toBER(sizeOnly);
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);
            if (resultOffset === -1) {
                return resultOffset;
            }
            this.setValueHex();
            return resultOffset;
        }
        toBER(sizeOnly) {
            return sizeOnly
                ? new ArrayBuffer(this.valueHexView.length)
                : this.valueHexView.slice().buffer;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                valueDec: this.valueDec,
            };
        }
        toString() {
            const firstBit = (this.valueHexView.length * 8) - 1;
            let digits = new Uint8Array((this.valueHexView.length * 8) / 3);
            let bitNumber = 0;
            let currentByte;
            const asn1View = this.valueHexView;
            let result = "";
            let flag = false;
            for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {
                currentByte = asn1View[byteNumber];
                for (let i = 0; i < 8; i++) {
                    if ((currentByte & 1) === 1) {
                        switch (bitNumber) {
                            case firstBit:
                                digits = viewSub(power2(bitNumber), digits);
                                result = "-";
                                break;
                            default:
                                digits = viewAdd(digits, power2(bitNumber));
                        }
                    }
                    bitNumber++;
                    currentByte >>= 1;
                }
            }
            for (let i = 0; i < digits.length; i++) {
                if (digits[i])
                    flag = true;
                if (flag)
                    result += digitsString.charAt(digits[i]);
            }
            if (flag === false)
                result += digitsString.charAt(0);
            return result;
        }
    }
    _a$p = LocalIntegerValueBlock;
    LocalIntegerValueBlock.NAME = "IntegerValueBlock";
    (() => {
        Object.defineProperty(_a$p.prototype, "valueHex", {
            set: function (v) {
                this.valueHexView = new Uint8Array(v);
                this.setValueHex();
            },
            get: function () {
                return this.valueHexView.slice().buffer;
            },
        });
    })();

    var _a$o;
    class Integer extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalIntegerValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 2;
        }
        toBigInt() {
            assertBigInt();
            return BigInt(this.valueBlock.toString());
        }
        static fromBigInt(value) {
            assertBigInt();
            const bigIntValue = BigInt(value);
            const writer = new ViewWriter();
            const hex = bigIntValue.toString(16).replace(/^-/, "");
            const view = new Uint8Array(build.Convert.FromHex(hex));
            if (bigIntValue < 0) {
                const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));
                first[0] |= 0x80;
                const firstInt = BigInt(`0x${build.Convert.ToHex(first)}`);
                const secondInt = firstInt + bigIntValue;
                const second = build.BufferSourceConverter.toUint8Array(build.Convert.FromHex(secondInt.toString(16)));
                second[0] |= 0x80;
                writer.write(second);
            }
            else {
                if (view[0] & 0x80) {
                    writer.write(new Uint8Array([0]));
                }
                writer.write(view);
            }
            const res = new Integer({
                valueHex: writer.final(),
            });
            return res;
        }
        convertToDER() {
            const integer = new Integer({ valueHex: this.valueBlock.valueHexView });
            integer.valueBlock.toDER();
            return integer;
        }
        convertFromDER() {
            return new Integer({
                valueHex: this.valueBlock.valueHexView[0] === 0
                    ? this.valueBlock.valueHexView.subarray(1)
                    : this.valueBlock.valueHexView,
            });
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;
        }
    }
    _a$o = Integer;
    (() => {
        typeStore.Integer = _a$o;
    })();
    Integer.NAME = "INTEGER";

    var _a$n;
    class Enumerated extends Integer {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 10;
        }
    }
    _a$n = Enumerated;
    (() => {
        typeStore.Enumerated = _a$n;
    })();
    Enumerated.NAME = "ENUMERATED";

    class LocalSidValueBlock extends HexBlock(ValueBlock) {
        constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {
            super(parameters);
            this.valueDec = valueDec;
            this.isFirstSid = isFirstSid;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            if (!inputLength) {
                return inputOffset;
            }
            const inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {
                return -1;
            }
            const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
            this.valueHexView = new Uint8Array(inputLength);
            for (let i = 0; i < inputLength; i++) {
                this.valueHexView[i] = intBuffer[i] & 0x7F;
                this.blockLength++;
                if ((intBuffer[i] & 0x80) === 0x00)
                    break;
            }
            const tempView = new Uint8Array(this.blockLength);
            for (let i = 0; i < this.blockLength; i++) {
                tempView[i] = this.valueHexView[i];
            }
            this.valueHexView = tempView;
            if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
                this.error = "End of input reached before message was fully decoded";
                return -1;
            }
            if (this.valueHexView[0] === 0x00)
                this.warnings.push("Needlessly long format of SID encoding");
            if (this.blockLength <= 8)
                this.valueDec = utilFromBase(this.valueHexView, 7);
            else {
                this.isHexOnly = true;
                this.warnings.push("Too big SID for decoding, hex only");
            }
            return (inputOffset + this.blockLength);
        }
        set valueBigInt(value) {
            assertBigInt();
            let bits = BigInt(value).toString(2);
            while (bits.length % 7) {
                bits = "0" + bits;
            }
            const bytes = new Uint8Array(bits.length / 7);
            for (let i = 0; i < bytes.length; i++) {
                bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);
            }
            this.fromBER(bytes.buffer, 0, bytes.length);
        }
        toBER(sizeOnly) {
            if (this.isHexOnly) {
                if (sizeOnly)
                    return (new ArrayBuffer(this.valueHexView.byteLength));
                const curView = this.valueHexView;
                const retView = new Uint8Array(this.blockLength);
                for (let i = 0; i < (this.blockLength - 1); i++)
                    retView[i] = curView[i] | 0x80;
                retView[this.blockLength - 1] = curView[this.blockLength - 1];
                return retView.buffer;
            }
            const encodedBuf = utilToBase(this.valueDec, 7);
            if (encodedBuf.byteLength === 0) {
                this.error = "Error during encoding SID value";
                return EMPTY_BUFFER;
            }
            const retView = new Uint8Array(encodedBuf.byteLength);
            if (!sizeOnly) {
                const encodedView = new Uint8Array(encodedBuf);
                const len = encodedBuf.byteLength - 1;
                for (let i = 0; i < len; i++)
                    retView[i] = encodedView[i] | 0x80;
                retView[len] = encodedView[len];
            }
            return retView;
        }
        toString() {
            let result = "";
            if (this.isHexOnly)
                result = build.Convert.ToHex(this.valueHexView);
            else {
                if (this.isFirstSid) {
                    let sidValue = this.valueDec;
                    if (this.valueDec <= 39)
                        result = "0.";
                    else {
                        if (this.valueDec <= 79) {
                            result = "1.";
                            sidValue -= 40;
                        }
                        else {
                            result = "2.";
                            sidValue -= 80;
                        }
                    }
                    result += sidValue.toString();
                }
                else
                    result = this.valueDec.toString();
            }
            return result;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                valueDec: this.valueDec,
                isFirstSid: this.isFirstSid,
            };
        }
    }
    LocalSidValueBlock.NAME = "sidBlock";

    class LocalObjectIdentifierValueBlock extends ValueBlock {
        constructor({ value = EMPTY_STRING, ...parameters } = {}) {
            super(parameters);
            this.value = [];
            if (value) {
                this.fromString(value);
            }
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            let resultOffset = inputOffset;
            while (inputLength > 0) {
                const sidBlock = new LocalSidValueBlock();
                resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
                if (resultOffset === -1) {
                    this.blockLength = 0;
                    this.error = sidBlock.error;
                    return resultOffset;
                }
                if (this.value.length === 0)
                    sidBlock.isFirstSid = true;
                this.blockLength += sidBlock.blockLength;
                inputLength -= sidBlock.blockLength;
                this.value.push(sidBlock);
            }
            return resultOffset;
        }
        toBER(sizeOnly) {
            const retBuffers = [];
            for (let i = 0; i < this.value.length; i++) {
                const valueBuf = this.value[i].toBER(sizeOnly);
                if (valueBuf.byteLength === 0) {
                    this.error = this.value[i].error;
                    return EMPTY_BUFFER;
                }
                retBuffers.push(valueBuf);
            }
            return concat$1(retBuffers);
        }
        fromString(string) {
            this.value = [];
            let pos1 = 0;
            let pos2 = 0;
            let sid = "";
            let flag = false;
            do {
                pos2 = string.indexOf(".", pos1);
                if (pos2 === -1)
                    sid = string.substring(pos1);
                else
                    sid = string.substring(pos1, pos2);
                pos1 = pos2 + 1;
                if (flag) {
                    const sidBlock = this.value[0];
                    let plus = 0;
                    switch (sidBlock.valueDec) {
                        case 0:
                            break;
                        case 1:
                            plus = 40;
                            break;
                        case 2:
                            plus = 80;
                            break;
                        default:
                            this.value = [];
                            return;
                    }
                    const parsedSID = parseInt(sid, 10);
                    if (isNaN(parsedSID))
                        return;
                    sidBlock.valueDec = parsedSID + plus;
                    flag = false;
                }
                else {
                    const sidBlock = new LocalSidValueBlock();
                    if (sid > Number.MAX_SAFE_INTEGER) {
                        assertBigInt();
                        const sidValue = BigInt(sid);
                        sidBlock.valueBigInt = sidValue;
                    }
                    else {
                        sidBlock.valueDec = parseInt(sid, 10);
                        if (isNaN(sidBlock.valueDec))
                            return;
                    }
                    if (!this.value.length) {
                        sidBlock.isFirstSid = true;
                        flag = true;
                    }
                    this.value.push(sidBlock);
                }
            } while (pos2 !== -1);
        }
        toString() {
            let result = "";
            let isHexOnly = false;
            for (let i = 0; i < this.value.length; i++) {
                isHexOnly = this.value[i].isHexOnly;
                let sidStr = this.value[i].toString();
                if (i !== 0)
                    result = `${result}.`;
                if (isHexOnly) {
                    sidStr = `{${sidStr}}`;
                    if (this.value[i].isFirstSid)
                        result = `2.{${sidStr} - 80}`;
                    else
                        result += sidStr;
                }
                else
                    result += sidStr;
            }
            return result;
        }
        toJSON() {
            const object = {
                ...super.toJSON(),
                value: this.toString(),
                sidArray: [],
            };
            for (let i = 0; i < this.value.length; i++) {
                object.sidArray.push(this.value[i].toJSON());
            }
            return object;
        }
    }
    LocalObjectIdentifierValueBlock.NAME = "ObjectIdentifierValueBlock";

    var _a$m;
    class ObjectIdentifier extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalObjectIdentifierValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 6;
        }
        getValue() {
            return this.valueBlock.toString();
        }
        setValue(value) {
            this.valueBlock.fromString(value);
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                value: this.getValue(),
            };
        }
    }
    _a$m = ObjectIdentifier;
    (() => {
        typeStore.ObjectIdentifier = _a$m;
    })();
    ObjectIdentifier.NAME = "OBJECT IDENTIFIER";

    class LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {
        constructor({ valueDec = 0, ...parameters } = {}) {
            super(parameters);
            this.valueDec = valueDec;
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            if (inputLength === 0)
                return inputOffset;
            const inputView = build.BufferSourceConverter.toUint8Array(inputBuffer);
            if (!checkBufferParams(this, inputView, inputOffset, inputLength))
                return -1;
            const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);
            this.valueHexView = new Uint8Array(inputLength);
            for (let i = 0; i < inputLength; i++) {
                this.valueHexView[i] = intBuffer[i] & 0x7F;
                this.blockLength++;
                if ((intBuffer[i] & 0x80) === 0x00)
                    break;
            }
            const tempView = new Uint8Array(this.blockLength);
            for (let i = 0; i < this.blockLength; i++)
                tempView[i] = this.valueHexView[i];
            this.valueHexView = tempView;
            if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {
                this.error = "End of input reached before message was fully decoded";
                return -1;
            }
            if (this.valueHexView[0] === 0x00)
                this.warnings.push("Needlessly long format of SID encoding");
            if (this.blockLength <= 8)
                this.valueDec = utilFromBase(this.valueHexView, 7);
            else {
                this.isHexOnly = true;
                this.warnings.push("Too big SID for decoding, hex only");
            }
            return (inputOffset + this.blockLength);
        }
        toBER(sizeOnly) {
            if (this.isHexOnly) {
                if (sizeOnly)
                    return (new ArrayBuffer(this.valueHexView.byteLength));
                const curView = this.valueHexView;
                const retView = new Uint8Array(this.blockLength);
                for (let i = 0; i < (this.blockLength - 1); i++)
                    retView[i] = curView[i] | 0x80;
                retView[this.blockLength - 1] = curView[this.blockLength - 1];
                return retView.buffer;
            }
            const encodedBuf = utilToBase(this.valueDec, 7);
            if (encodedBuf.byteLength === 0) {
                this.error = "Error during encoding SID value";
                return EMPTY_BUFFER;
            }
            const retView = new Uint8Array(encodedBuf.byteLength);
            if (!sizeOnly) {
                const encodedView = new Uint8Array(encodedBuf);
                const len = encodedBuf.byteLength - 1;
                for (let i = 0; i < len; i++)
                    retView[i] = encodedView[i] | 0x80;
                retView[len] = encodedView[len];
            }
            return retView.buffer;
        }
        toString() {
            let result = "";
            if (this.isHexOnly)
                result = build.Convert.ToHex(this.valueHexView);
            else {
                result = this.valueDec.toString();
            }
            return result;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                valueDec: this.valueDec,
            };
        }
    }
    LocalRelativeSidValueBlock.NAME = "relativeSidBlock";

    class LocalRelativeObjectIdentifierValueBlock extends ValueBlock {
        constructor({ value = EMPTY_STRING, ...parameters } = {}) {
            super(parameters);
            this.value = [];
            if (value) {
                this.fromString(value);
            }
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            let resultOffset = inputOffset;
            while (inputLength > 0) {
                const sidBlock = new LocalRelativeSidValueBlock();
                resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);
                if (resultOffset === -1) {
                    this.blockLength = 0;
                    this.error = sidBlock.error;
                    return resultOffset;
                }
                this.blockLength += sidBlock.blockLength;
                inputLength -= sidBlock.blockLength;
                this.value.push(sidBlock);
            }
            return resultOffset;
        }
        toBER(sizeOnly, writer) {
            const retBuffers = [];
            for (let i = 0; i < this.value.length; i++) {
                const valueBuf = this.value[i].toBER(sizeOnly);
                if (valueBuf.byteLength === 0) {
                    this.error = this.value[i].error;
                    return EMPTY_BUFFER;
                }
                retBuffers.push(valueBuf);
            }
            return concat$1(retBuffers);
        }
        fromString(string) {
            this.value = [];
            let pos1 = 0;
            let pos2 = 0;
            let sid = "";
            do {
                pos2 = string.indexOf(".", pos1);
                if (pos2 === -1)
                    sid = string.substring(pos1);
                else
                    sid = string.substring(pos1, pos2);
                pos1 = pos2 + 1;
                const sidBlock = new LocalRelativeSidValueBlock();
                sidBlock.valueDec = parseInt(sid, 10);
                if (isNaN(sidBlock.valueDec))
                    return true;
                this.value.push(sidBlock);
            } while (pos2 !== -1);
            return true;
        }
        toString() {
            let result = "";
            let isHexOnly = false;
            for (let i = 0; i < this.value.length; i++) {
                isHexOnly = this.value[i].isHexOnly;
                let sidStr = this.value[i].toString();
                if (i !== 0)
                    result = `${result}.`;
                if (isHexOnly) {
                    sidStr = `{${sidStr}}`;
                    result += sidStr;
                }
                else
                    result += sidStr;
            }
            return result;
        }
        toJSON() {
            const object = {
                ...super.toJSON(),
                value: this.toString(),
                sidArray: [],
            };
            for (let i = 0; i < this.value.length; i++)
                object.sidArray.push(this.value[i].toJSON());
            return object;
        }
    }
    LocalRelativeObjectIdentifierValueBlock.NAME = "RelativeObjectIdentifierValueBlock";

    var _a$l;
    class RelativeObjectIdentifier extends BaseBlock {
        constructor(parameters = {}) {
            super(parameters, LocalRelativeObjectIdentifierValueBlock);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 13;
        }
        getValue() {
            return this.valueBlock.toString();
        }
        setValue(value) {
            this.valueBlock.fromString(value);
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : ${this.valueBlock.toString() || "empty"}`;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                value: this.getValue(),
            };
        }
    }
    _a$l = RelativeObjectIdentifier;
    (() => {
        typeStore.RelativeObjectIdentifier = _a$l;
    })();
    RelativeObjectIdentifier.NAME = "RelativeObjectIdentifier";

    var _a$k;
    class Sequence extends Constructed {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 16;
        }
    }
    _a$k = Sequence;
    (() => {
        typeStore.Sequence = _a$k;
    })();
    Sequence.NAME = "SEQUENCE";

    var _a$j;
    class Set$1 extends Constructed {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 17;
        }
    }
    _a$j = Set$1;
    (() => {
        typeStore.Set = _a$j;
    })();
    Set$1.NAME = "SET";

    class LocalStringValueBlock extends HexBlock(ValueBlock) {
        constructor({ ...parameters } = {}) {
            super(parameters);
            this.isHexOnly = true;
            this.value = EMPTY_STRING;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                value: this.value,
            };
        }
    }
    LocalStringValueBlock.NAME = "StringValueBlock";

    class LocalSimpleStringValueBlock extends LocalStringValueBlock {
    }
    LocalSimpleStringValueBlock.NAME = "SimpleStringValueBlock";

    class LocalSimpleStringBlock extends BaseStringBlock {
        constructor({ ...parameters } = {}) {
            super(parameters, LocalSimpleStringValueBlock);
        }
        fromBuffer(inputBuffer) {
            this.valueBlock.value = String.fromCharCode.apply(null, build.BufferSourceConverter.toUint8Array(inputBuffer));
        }
        fromString(inputString) {
            const strLen = inputString.length;
            const view = this.valueBlock.valueHexView = new Uint8Array(strLen);
            for (let i = 0; i < strLen; i++)
                view[i] = inputString.charCodeAt(i);
            this.valueBlock.value = inputString;
        }
    }
    LocalSimpleStringBlock.NAME = "SIMPLE STRING";

    class LocalUtf8StringValueBlock extends LocalSimpleStringBlock {
        fromBuffer(inputBuffer) {
            this.valueBlock.valueHexView = build.BufferSourceConverter.toUint8Array(inputBuffer);
            try {
                this.valueBlock.value = build.Convert.ToUtf8String(inputBuffer);
            }
            catch (ex) {
                this.warnings.push(`Error during "decodeURIComponent": ${ex}, using raw string`);
                this.valueBlock.value = build.Convert.ToBinary(inputBuffer);
            }
        }
        fromString(inputString) {
            this.valueBlock.valueHexView = new Uint8Array(build.Convert.FromUtf8String(inputString));
            this.valueBlock.value = inputString;
        }
    }
    LocalUtf8StringValueBlock.NAME = "Utf8StringValueBlock";

    var _a$i;
    class Utf8String extends LocalUtf8StringValueBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 12;
        }
    }
    _a$i = Utf8String;
    (() => {
        typeStore.Utf8String = _a$i;
    })();
    Utf8String.NAME = "UTF8String";

    class LocalBmpStringValueBlock extends LocalSimpleStringBlock {
        fromBuffer(inputBuffer) {
            this.valueBlock.value = build.Convert.ToUtf16String(inputBuffer);
            this.valueBlock.valueHexView = build.BufferSourceConverter.toUint8Array(inputBuffer);
        }
        fromString(inputString) {
            this.valueBlock.value = inputString;
            this.valueBlock.valueHexView = new Uint8Array(build.Convert.FromUtf16String(inputString));
        }
    }
    LocalBmpStringValueBlock.NAME = "BmpStringValueBlock";

    var _a$h;
    class BmpString extends LocalBmpStringValueBlock {
        constructor({ ...parameters } = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 30;
        }
    }
    _a$h = BmpString;
    (() => {
        typeStore.BmpString = _a$h;
    })();
    BmpString.NAME = "BMPString";

    class LocalUniversalStringValueBlock extends LocalSimpleStringBlock {
        fromBuffer(inputBuffer) {
            const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);
            const valueView = new Uint8Array(copyBuffer);
            for (let i = 0; i < valueView.length; i += 4) {
                valueView[i] = valueView[i + 3];
                valueView[i + 1] = valueView[i + 2];
                valueView[i + 2] = 0x00;
                valueView[i + 3] = 0x00;
            }
            this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));
        }
        fromString(inputString) {
            const strLength = inputString.length;
            const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);
            for (let i = 0; i < strLength; i++) {
                const codeBuf = utilToBase(inputString.charCodeAt(i), 8);
                const codeView = new Uint8Array(codeBuf);
                if (codeView.length > 4)
                    continue;
                const dif = 4 - codeView.length;
                for (let j = (codeView.length - 1); j >= 0; j--)
                    valueHexView[i * 4 + j + dif] = codeView[j];
            }
            this.valueBlock.value = inputString;
        }
    }
    LocalUniversalStringValueBlock.NAME = "UniversalStringValueBlock";

    var _a$g;
    class UniversalString extends LocalUniversalStringValueBlock {
        constructor({ ...parameters } = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 28;
        }
    }
    _a$g = UniversalString;
    (() => {
        typeStore.UniversalString = _a$g;
    })();
    UniversalString.NAME = "UniversalString";

    var _a$f;
    class NumericString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 18;
        }
    }
    _a$f = NumericString;
    (() => {
        typeStore.NumericString = _a$f;
    })();
    NumericString.NAME = "NumericString";

    var _a$e;
    class PrintableString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 19;
        }
    }
    _a$e = PrintableString;
    (() => {
        typeStore.PrintableString = _a$e;
    })();
    PrintableString.NAME = "PrintableString";

    var _a$d;
    class TeletexString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 20;
        }
    }
    _a$d = TeletexString;
    (() => {
        typeStore.TeletexString = _a$d;
    })();
    TeletexString.NAME = "TeletexString";

    var _a$c;
    class VideotexString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 21;
        }
    }
    _a$c = VideotexString;
    (() => {
        typeStore.VideotexString = _a$c;
    })();
    VideotexString.NAME = "VideotexString";

    var _a$b;
    class IA5String extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 22;
        }
    }
    _a$b = IA5String;
    (() => {
        typeStore.IA5String = _a$b;
    })();
    IA5String.NAME = "IA5String";

    var _a$a;
    class GraphicString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 25;
        }
    }
    _a$a = GraphicString;
    (() => {
        typeStore.GraphicString = _a$a;
    })();
    GraphicString.NAME = "GraphicString";

    var _a$9;
    class VisibleString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 26;
        }
    }
    _a$9 = VisibleString;
    (() => {
        typeStore.VisibleString = _a$9;
    })();
    VisibleString.NAME = "VisibleString";

    var _a$8;
    class GeneralString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 27;
        }
    }
    _a$8 = GeneralString;
    (() => {
        typeStore.GeneralString = _a$8;
    })();
    GeneralString.NAME = "GeneralString";

    var _a$7;
    class CharacterString extends LocalSimpleStringBlock {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 29;
        }
    }
    _a$7 = CharacterString;
    (() => {
        typeStore.CharacterString = _a$7;
    })();
    CharacterString.NAME = "CharacterString";

    var _a$6;
    class UTCTime extends VisibleString {
        constructor({ value, valueDate, ...parameters } = {}) {
            super(parameters);
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
            this.second = 0;
            if (value) {
                this.fromString(value);
                this.valueBlock.valueHexView = new Uint8Array(value.length);
                for (let i = 0; i < value.length; i++)
                    this.valueBlock.valueHexView[i] = value.charCodeAt(i);
            }
            if (valueDate) {
                this.fromDate(valueDate);
                this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());
            }
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 23;
        }
        fromBuffer(inputBuffer) {
            this.fromString(String.fromCharCode.apply(null, build.BufferSourceConverter.toUint8Array(inputBuffer)));
        }
        toBuffer() {
            const str = this.toString();
            const buffer = new ArrayBuffer(str.length);
            const view = new Uint8Array(buffer);
            for (let i = 0; i < str.length; i++)
                view[i] = str.charCodeAt(i);
            return buffer;
        }
        fromDate(inputDate) {
            this.year = inputDate.getUTCFullYear();
            this.month = inputDate.getUTCMonth() + 1;
            this.day = inputDate.getUTCDate();
            this.hour = inputDate.getUTCHours();
            this.minute = inputDate.getUTCMinutes();
            this.second = inputDate.getUTCSeconds();
        }
        toDate() {
            return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));
        }
        fromString(inputString) {
            const parser = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/ig;
            const parserArray = parser.exec(inputString);
            if (parserArray === null) {
                this.error = "Wrong input string for conversion";
                return;
            }
            const year = parseInt(parserArray[1], 10);
            if (year >= 50)
                this.year = 1900 + year;
            else
                this.year = 2000 + year;
            this.month = parseInt(parserArray[2], 10);
            this.day = parseInt(parserArray[3], 10);
            this.hour = parseInt(parserArray[4], 10);
            this.minute = parseInt(parserArray[5], 10);
            this.second = parseInt(parserArray[6], 10);
        }
        toString(encoding = "iso") {
            if (encoding === "iso") {
                const outputArray = new Array(7);
                outputArray[0] = padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);
                outputArray[1] = padNumber(this.month, 2);
                outputArray[2] = padNumber(this.day, 2);
                outputArray[3] = padNumber(this.hour, 2);
                outputArray[4] = padNumber(this.minute, 2);
                outputArray[5] = padNumber(this.second, 2);
                outputArray[6] = "Z";
                return outputArray.join("");
            }
            return super.toString(encoding);
        }
        onAsciiEncoding() {
            return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;
        }
        toJSON() {
            return {
                ...super.toJSON(),
                year: this.year,
                month: this.month,
                day: this.day,
                hour: this.hour,
                minute: this.minute,
                second: this.second,
            };
        }
    }
    _a$6 = UTCTime;
    (() => {
        typeStore.UTCTime = _a$6;
    })();
    UTCTime.NAME = "UTCTime";

    var _a$5;
    class GeneralizedTime extends UTCTime {
        constructor(parameters = {}) {
            var _b;
            super(parameters);
            (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 24;
        }
        fromDate(inputDate) {
            super.fromDate(inputDate);
            this.millisecond = inputDate.getUTCMilliseconds();
        }
        toDate() {
            return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));
        }
        fromString(inputString) {
            let isUTC = false;
            let timeString = "";
            let dateTimeString = "";
            let fractionPart = 0;
            let parser;
            let hourDifference = 0;
            let minuteDifference = 0;
            if (inputString[inputString.length - 1] === "Z") {
                timeString = inputString.substring(0, inputString.length - 1);
                isUTC = true;
            }
            else {
                const number = new Number(inputString[inputString.length - 1]);
                if (isNaN(number.valueOf()))
                    throw new Error("Wrong input string for conversion");
                timeString = inputString;
            }
            if (isUTC) {
                if (timeString.indexOf("+") !== -1)
                    throw new Error("Wrong input string for conversion");
                if (timeString.indexOf("-") !== -1)
                    throw new Error("Wrong input string for conversion");
            }
            else {
                let multiplier = 1;
                let differencePosition = timeString.indexOf("+");
                let differenceString = "";
                if (differencePosition === -1) {
                    differencePosition = timeString.indexOf("-");
                    multiplier = -1;
                }
                if (differencePosition !== -1) {
                    differenceString = timeString.substring(differencePosition + 1);
                    timeString = timeString.substring(0, differencePosition);
                    if ((differenceString.length !== 2) && (differenceString.length !== 4))
                        throw new Error("Wrong input string for conversion");
                    let number = parseInt(differenceString.substring(0, 2), 10);
                    if (isNaN(number.valueOf()))
                        throw new Error("Wrong input string for conversion");
                    hourDifference = multiplier * number;
                    if (differenceString.length === 4) {
                        number = parseInt(differenceString.substring(2, 4), 10);
                        if (isNaN(number.valueOf()))
                            throw new Error("Wrong input string for conversion");
                        minuteDifference = multiplier * number;
                    }
                }
            }
            let fractionPointPosition = timeString.indexOf(".");
            if (fractionPointPosition === -1)
                fractionPointPosition = timeString.indexOf(",");
            if (fractionPointPosition !== -1) {
                const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);
                if (isNaN(fractionPartCheck.valueOf()))
                    throw new Error("Wrong input string for conversion");
                fractionPart = fractionPartCheck.valueOf();
                dateTimeString = timeString.substring(0, fractionPointPosition);
            }
            else
                dateTimeString = timeString;
            switch (true) {
                case (dateTimeString.length === 8):
                    parser = /(\d{4})(\d{2})(\d{2})/ig;
                    if (fractionPointPosition !== -1)
                        throw new Error("Wrong input string for conversion");
                    break;
                case (dateTimeString.length === 10):
                    parser = /(\d{4})(\d{2})(\d{2})(\d{2})/ig;
                    if (fractionPointPosition !== -1) {
                        let fractionResult = 60 * fractionPart;
                        this.minute = Math.floor(fractionResult);
                        fractionResult = 60 * (fractionResult - this.minute);
                        this.second = Math.floor(fractionResult);
                        fractionResult = 1000 * (fractionResult - this.second);
                        this.millisecond = Math.floor(fractionResult);
                    }
                    break;
                case (dateTimeString.length === 12):
                    parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
                    if (fractionPointPosition !== -1) {
                        let fractionResult = 60 * fractionPart;
                        this.second = Math.floor(fractionResult);
                        fractionResult = 1000 * (fractionResult - this.second);
                        this.millisecond = Math.floor(fractionResult);
                    }
                    break;
                case (dateTimeString.length === 14):
                    parser = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/ig;
                    if (fractionPointPosition !== -1) {
                        const fractionResult = 1000 * fractionPart;
                        this.millisecond = Math.floor(fractionResult);
                    }
                    break;
                default:
                    throw new Error("Wrong input string for conversion");
            }
            const parserArray = parser.exec(dateTimeString);
            if (parserArray === null)
                throw new Error("Wrong input string for conversion");
            for (let j = 1; j < parserArray.length; j++) {
                switch (j) {
                    case 1:
                        this.year = parseInt(parserArray[j], 10);
                        break;
                    case 2:
                        this.month = parseInt(parserArray[j], 10);
                        break;
                    case 3:
                        this.day = parseInt(parserArray[j], 10);
                        break;
                    case 4:
                        this.hour = parseInt(parserArray[j], 10) + hourDifference;
                        break;
                    case 5:
                        this.minute = parseInt(parserArray[j], 10) + minuteDifference;
                        break;
                    case 6:
                        this.second = parseInt(parserArray[j], 10);
                        break;
                    default:
                        throw new Error("Wrong input string for conversion");
                }
            }
            if (isUTC === false) {
                const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
                this.year = tempDate.getUTCFullYear();
                this.month = tempDate.getUTCMonth();
                this.day = tempDate.getUTCDay();
                this.hour = tempDate.getUTCHours();
                this.minute = tempDate.getUTCMinutes();
                this.second = tempDate.getUTCSeconds();
                this.millisecond = tempDate.getUTCMilliseconds();
            }
        }
        toString(encoding = "iso") {
            if (encoding === "iso") {
                const outputArray = [];
                outputArray.push(padNumber(this.year, 4));
                outputArray.push(padNumber(this.month, 2));
                outputArray.push(padNumber(this.day, 2));
                outputArray.push(padNumber(this.hour, 2));
                outputArray.push(padNumber(this.minute, 2));
                outputArray.push(padNumber(this.second, 2));
                if (this.millisecond !== 0) {
                    outputArray.push(".");
                    outputArray.push(padNumber(this.millisecond, 3));
                }
                outputArray.push("Z");
                return outputArray.join("");
            }
            return super.toString(encoding);
        }
        toJSON() {
            return {
                ...super.toJSON(),
                millisecond: this.millisecond,
            };
        }
    }
    _a$5 = GeneralizedTime;
    (() => {
        typeStore.GeneralizedTime = _a$5;
    })();
    GeneralizedTime.NAME = "GeneralizedTime";

    var _a$4;
    class DATE extends Utf8String {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 31;
        }
    }
    _a$4 = DATE;
    (() => {
        typeStore.DATE = _a$4;
    })();
    DATE.NAME = "DATE";

    var _a$3;
    class TimeOfDay extends Utf8String {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 32;
        }
    }
    _a$3 = TimeOfDay;
    (() => {
        typeStore.TimeOfDay = _a$3;
    })();
    TimeOfDay.NAME = "TimeOfDay";

    var _a$2;
    class DateTime extends Utf8String {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 33;
        }
    }
    _a$2 = DateTime;
    (() => {
        typeStore.DateTime = _a$2;
    })();
    DateTime.NAME = "DateTime";

    var _a$1;
    class Duration extends Utf8String {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 34;
        }
    }
    _a$1 = Duration;
    (() => {
        typeStore.Duration = _a$1;
    })();
    Duration.NAME = "Duration";

    var _a;
    class TIME extends Utf8String {
        constructor(parameters = {}) {
            super(parameters);
            this.idBlock.tagClass = 1;
            this.idBlock.tagNumber = 14;
        }
    }
    _a = TIME;
    (() => {
        typeStore.TIME = _a;
    })();
    TIME.NAME = "TIME";

    class Any {
        constructor({ name = EMPTY_STRING, optional = false, } = {}) {
            this.name = name;
            this.optional = optional;
        }
    }

    class Choice extends Any {
        constructor({ value = [], ...parameters } = {}) {
            super(parameters);
            this.value = value;
        }
    }

    class Repeated extends Any {
        constructor({ value = new Any(), local = false, ...parameters } = {}) {
            super(parameters);
            this.value = value;
            this.local = local;
        }
    }

    class RawData {
        constructor({ data = EMPTY_VIEW } = {}) {
            this.dataView = build.BufferSourceConverter.toUint8Array(data);
        }
        get data() {
            return this.dataView.slice().buffer;
        }
        set data(value) {
            this.dataView = build.BufferSourceConverter.toUint8Array(value);
        }
        fromBER(inputBuffer, inputOffset, inputLength) {
            const endLength = inputOffset + inputLength;
            this.dataView = build.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);
            return endLength;
        }
        toBER(sizeOnly) {
            return this.dataView.slice().buffer;
        }
    }

    function compareSchema(root, inputData, inputSchema) {
        if (inputSchema instanceof Choice) {
            for (let j = 0; j < inputSchema.value.length; j++) {
                const result = compareSchema(root, inputData, inputSchema.value[j]);
                if (result.verified) {
                    return {
                        verified: true,
                        result: root
                    };
                }
            }
            {
                const _result = {
                    verified: false,
                    result: {
                        error: "Wrong values for Choice type"
                    },
                };
                if (inputSchema.hasOwnProperty(NAME))
                    _result.name = inputSchema.name;
                return _result;
            }
        }
        if (inputSchema instanceof Any) {
            if (inputSchema.hasOwnProperty(NAME))
                root[inputSchema.name] = inputData;
            return {
                verified: true,
                result: root
            };
        }
        if ((root instanceof Object) === false) {
            return {
                verified: false,
                result: { error: "Wrong root object" }
            };
        }
        if ((inputData instanceof Object) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 data" }
            };
        }
        if ((inputSchema instanceof Object) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if ((ID_BLOCK in inputSchema) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if ((FROM_BER in inputSchema.idBlock) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if ((TO_BER in inputSchema.idBlock) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        const encodedId = inputSchema.idBlock.toBER(false);
        if (encodedId.byteLength === 0) {
            return {
                verified: false,
                result: { error: "Error encoding idBlock for ASN.1 schema" }
            };
        }
        const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);
        if (decodedOffset === -1) {
            return {
                verified: false,
                result: { error: "Error decoding idBlock for ASN.1 schema" }
            };
        }
        if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {
            return {
                verified: false,
                result: root
            };
        }
        if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {
            return {
                verified: false,
                result: root
            };
        }
        if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {
            return {
                verified: false,
                result: root
            };
        }
        if (!(IS_HEX_ONLY in inputSchema.idBlock)) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema" }
            };
        }
        if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {
            return {
                verified: false,
                result: root
            };
        }
        if (inputSchema.idBlock.isHexOnly) {
            if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {
                return {
                    verified: false,
                    result: { error: "Wrong ASN.1 schema" }
                };
            }
            const schemaView = inputSchema.idBlock.valueHexView;
            const asn1View = inputData.idBlock.valueHexView;
            if (schemaView.length !== asn1View.length) {
                return {
                    verified: false,
                    result: root
                };
            }
            for (let i = 0; i < schemaView.length; i++) {
                if (schemaView[i] !== asn1View[1]) {
                    return {
                        verified: false,
                        result: root
                    };
                }
            }
        }
        if (inputSchema.name) {
            inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
            if (inputSchema.name)
                root[inputSchema.name] = inputData;
        }
        if (inputSchema instanceof typeStore.Constructed) {
            let admission = 0;
            let result = {
                verified: false,
                result: {
                    error: "Unknown error",
                }
            };
            let maxLength = inputSchema.valueBlock.value.length;
            if (maxLength > 0) {
                if (inputSchema.valueBlock.value[0] instanceof Repeated) {
                    maxLength = inputData.valueBlock.value.length;
                }
            }
            if (maxLength === 0) {
                return {
                    verified: true,
                    result: root
                };
            }
            if ((inputData.valueBlock.value.length === 0) &&
                (inputSchema.valueBlock.value.length !== 0)) {
                let _optional = true;
                for (let i = 0; i < inputSchema.valueBlock.value.length; i++)
                    _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);
                if (_optional) {
                    return {
                        verified: true,
                        result: root
                    };
                }
                if (inputSchema.name) {
                    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                    if (inputSchema.name)
                        delete root[inputSchema.name];
                }
                root.error = "Inconsistent object length";
                return {
                    verified: false,
                    result: root
                };
            }
            for (let i = 0; i < maxLength; i++) {
                if ((i - admission) >= inputData.valueBlock.value.length) {
                    if (inputSchema.valueBlock.value[i].optional === false) {
                        const _result = {
                            verified: false,
                            result: root
                        };
                        root.error = "Inconsistent length between ASN.1 data and schema";
                        if (inputSchema.name) {
                            inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                            if (inputSchema.name) {
                                delete root[inputSchema.name];
                                _result.name = inputSchema.name;
                            }
                        }
                        return _result;
                    }
                }
                else {
                    if (inputSchema.valueBlock.value[0] instanceof Repeated) {
                        result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);
                        if (result.verified === false) {
                            if (inputSchema.valueBlock.value[0].optional)
                                admission++;
                            else {
                                if (inputSchema.name) {
                                    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                                    if (inputSchema.name)
                                        delete root[inputSchema.name];
                                }
                                return result;
                            }
                        }
                        if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {
                            let arrayRoot = {};
                            if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))
                                arrayRoot = inputData;
                            else
                                arrayRoot = root;
                            if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === "undefined")
                                arrayRoot[inputSchema.valueBlock.value[0].name] = [];
                            arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);
                        }
                    }
                    else {
                        result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);
                        if (result.verified === false) {
                            if (inputSchema.valueBlock.value[i].optional)
                                admission++;
                            else {
                                if (inputSchema.name) {
                                    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                                    if (inputSchema.name)
                                        delete root[inputSchema.name];
                                }
                                return result;
                            }
                        }
                    }
                }
            }
            if (result.verified === false) {
                const _result = {
                    verified: false,
                    result: root
                };
                if (inputSchema.name) {
                    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                    if (inputSchema.name) {
                        delete root[inputSchema.name];
                        _result.name = inputSchema.name;
                    }
                }
                return _result;
            }
            return {
                verified: true,
                result: root
            };
        }
        if (inputSchema.primitiveSchema &&
            (VALUE_HEX_VIEW in inputData.valueBlock)) {
            const asn1 = localFromBER(inputData.valueBlock.valueHexView);
            if (asn1.offset === -1) {
                const _result = {
                    verified: false,
                    result: asn1.result
                };
                if (inputSchema.name) {
                    inputSchema.name = inputSchema.name.replace(/^\s+|\s+$/g, EMPTY_STRING);
                    if (inputSchema.name) {
                        delete root[inputSchema.name];
                        _result.name = inputSchema.name;
                    }
                }
                return _result;
            }
            return compareSchema(root, asn1.result, inputSchema.primitiveSchema);
        }
        return {
            verified: true,
            result: root
        };
    }
    function verifySchema(inputBuffer, inputSchema) {
        if ((inputSchema instanceof Object) === false) {
            return {
                verified: false,
                result: { error: "Wrong ASN.1 schema type" }
            };
        }
        const asn1 = localFromBER(build.BufferSourceConverter.toUint8Array(inputBuffer));
        if (asn1.offset === -1) {
            return {
                verified: false,
                result: asn1.result
            };
        }
        return compareSchema(asn1.result, asn1.result, inputSchema);
    }

    var asn1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Any: Any,
        BaseBlock: BaseBlock,
        BaseStringBlock: BaseStringBlock,
        BitString: BitString$1,
        BmpString: BmpString,
        Boolean: Boolean$1,
        CharacterString: CharacterString,
        Choice: Choice,
        Constructed: Constructed,
        DATE: DATE,
        DateTime: DateTime,
        Duration: Duration,
        EndOfContent: EndOfContent,
        Enumerated: Enumerated,
        GeneralString: GeneralString,
        GeneralizedTime: GeneralizedTime,
        GraphicString: GraphicString,
        HexBlock: HexBlock,
        IA5String: IA5String,
        Integer: Integer,
        Null: Null,
        NumericString: NumericString,
        ObjectIdentifier: ObjectIdentifier,
        OctetString: OctetString$1,
        Primitive: Primitive,
        PrintableString: PrintableString,
        RawData: RawData,
        RelativeObjectIdentifier: RelativeObjectIdentifier,
        Repeated: Repeated,
        Sequence: Sequence,
        Set: Set$1,
        TIME: TIME,
        TeletexString: TeletexString,
        TimeOfDay: TimeOfDay,
        UTCTime: UTCTime,
        UniversalString: UniversalString,
        Utf8String: Utf8String,
        ValueBlock: ValueBlock,
        VideotexString: VideotexString,
        ViewWriter: ViewWriter,
        VisibleString: VisibleString,
        compareSchema: compareSchema,
        fromBER: fromBER,
        verifySchema: verifySchema
    });

    var AsnTypeTypes;
    (function (AsnTypeTypes) {
        AsnTypeTypes[AsnTypeTypes["Sequence"] = 0] = "Sequence";
        AsnTypeTypes[AsnTypeTypes["Set"] = 1] = "Set";
        AsnTypeTypes[AsnTypeTypes["Choice"] = 2] = "Choice";
    })(AsnTypeTypes || (AsnTypeTypes = {}));
    var AsnPropTypes;
    (function (AsnPropTypes) {
        AsnPropTypes[AsnPropTypes["Any"] = 1] = "Any";
        AsnPropTypes[AsnPropTypes["Boolean"] = 2] = "Boolean";
        AsnPropTypes[AsnPropTypes["OctetString"] = 3] = "OctetString";
        AsnPropTypes[AsnPropTypes["BitString"] = 4] = "BitString";
        AsnPropTypes[AsnPropTypes["Integer"] = 5] = "Integer";
        AsnPropTypes[AsnPropTypes["Enumerated"] = 6] = "Enumerated";
        AsnPropTypes[AsnPropTypes["ObjectIdentifier"] = 7] = "ObjectIdentifier";
        AsnPropTypes[AsnPropTypes["Utf8String"] = 8] = "Utf8String";
        AsnPropTypes[AsnPropTypes["BmpString"] = 9] = "BmpString";
        AsnPropTypes[AsnPropTypes["UniversalString"] = 10] = "UniversalString";
        AsnPropTypes[AsnPropTypes["NumericString"] = 11] = "NumericString";
        AsnPropTypes[AsnPropTypes["PrintableString"] = 12] = "PrintableString";
        AsnPropTypes[AsnPropTypes["TeletexString"] = 13] = "TeletexString";
        AsnPropTypes[AsnPropTypes["VideotexString"] = 14] = "VideotexString";
        AsnPropTypes[AsnPropTypes["IA5String"] = 15] = "IA5String";
        AsnPropTypes[AsnPropTypes["GraphicString"] = 16] = "GraphicString";
        AsnPropTypes[AsnPropTypes["VisibleString"] = 17] = "VisibleString";
        AsnPropTypes[AsnPropTypes["GeneralString"] = 18] = "GeneralString";
        AsnPropTypes[AsnPropTypes["CharacterString"] = 19] = "CharacterString";
        AsnPropTypes[AsnPropTypes["UTCTime"] = 20] = "UTCTime";
        AsnPropTypes[AsnPropTypes["GeneralizedTime"] = 21] = "GeneralizedTime";
        AsnPropTypes[AsnPropTypes["DATE"] = 22] = "DATE";
        AsnPropTypes[AsnPropTypes["TimeOfDay"] = 23] = "TimeOfDay";
        AsnPropTypes[AsnPropTypes["DateTime"] = 24] = "DateTime";
        AsnPropTypes[AsnPropTypes["Duration"] = 25] = "Duration";
        AsnPropTypes[AsnPropTypes["TIME"] = 26] = "TIME";
        AsnPropTypes[AsnPropTypes["Null"] = 27] = "Null";
    })(AsnPropTypes || (AsnPropTypes = {}));

    const AsnAnyConverter = {
        fromASN: (value) => value instanceof Null ? null : value.valueBeforeDecode,
        toASN: (value) => {
            if (value === null) {
                return new Null();
            }
            const schema = fromBER(value);
            if (schema.result.error) {
                throw new Error(schema.result.error);
            }
            return schema.result;
        },
    };
    const AsnIntegerConverter = {
        fromASN: (value) => value.valueBlock.valueHex.byteLength > 4
            ? value.valueBlock.toString()
            : value.valueBlock.valueDec,
        toASN: (value) => new Integer({ value: value }),
    };
    const AsnEnumeratedConverter = {
        fromASN: (value) => value.valueBlock.valueDec,
        toASN: (value) => new Enumerated({ value }),
    };
    const AsnIntegerArrayBufferConverter = {
        fromASN: (value) => value.valueBlock.valueHex,
        toASN: (value) => new Integer({ valueHex: value }),
    };
    const AsnBitStringConverter = {
        fromASN: (value) => value.valueBlock.valueHex,
        toASN: (value) => new BitString$1({ valueHex: value }),
    };
    const AsnObjectIdentifierConverter = {
        fromASN: (value) => value.valueBlock.toString(),
        toASN: (value) => new ObjectIdentifier({ value }),
    };
    const AsnBooleanConverter = {
        fromASN: (value) => value.valueBlock.value,
        toASN: (value) => new Boolean$1({ value }),
    };
    const AsnOctetStringConverter = {
        fromASN: (value) => value.valueBlock.valueHex,
        toASN: (value) => new OctetString$1({ valueHex: value }),
    };
    function createStringConverter(Asn1Type) {
        return {
            fromASN: (value) => value.valueBlock.value,
            toASN: (value) => new Asn1Type({ value }),
        };
    }
    const AsnUtf8StringConverter = createStringConverter(Utf8String);
    const AsnBmpStringConverter = createStringConverter(BmpString);
    const AsnUniversalStringConverter = createStringConverter(UniversalString);
    const AsnNumericStringConverter = createStringConverter(NumericString);
    const AsnPrintableStringConverter = createStringConverter(PrintableString);
    const AsnTeletexStringConverter = createStringConverter(TeletexString);
    const AsnVideotexStringConverter = createStringConverter(VideotexString);
    const AsnIA5StringConverter = createStringConverter(IA5String);
    const AsnGraphicStringConverter = createStringConverter(GraphicString);
    const AsnVisibleStringConverter = createStringConverter(VisibleString);
    const AsnGeneralStringConverter = createStringConverter(GeneralString);
    const AsnCharacterStringConverter = createStringConverter(CharacterString);
    const AsnUTCTimeConverter = {
        fromASN: (value) => value.toDate(),
        toASN: (value) => new UTCTime({ valueDate: value }),
    };
    const AsnGeneralizedTimeConverter = {
        fromASN: (value) => value.toDate(),
        toASN: (value) => new GeneralizedTime({ valueDate: value }),
    };
    const AsnNullConverter = {
        fromASN: (value) => null,
        toASN: (value) => {
            return new Null();
        },
    };
    function defaultConverter(type) {
        switch (type) {
            case AsnPropTypes.Any:
                return AsnAnyConverter;
            case AsnPropTypes.BitString:
                return AsnBitStringConverter;
            case AsnPropTypes.BmpString:
                return AsnBmpStringConverter;
            case AsnPropTypes.Boolean:
                return AsnBooleanConverter;
            case AsnPropTypes.CharacterString:
                return AsnCharacterStringConverter;
            case AsnPropTypes.Enumerated:
                return AsnEnumeratedConverter;
            case AsnPropTypes.GeneralString:
                return AsnGeneralStringConverter;
            case AsnPropTypes.GeneralizedTime:
                return AsnGeneralizedTimeConverter;
            case AsnPropTypes.GraphicString:
                return AsnGraphicStringConverter;
            case AsnPropTypes.IA5String:
                return AsnIA5StringConverter;
            case AsnPropTypes.Integer:
                return AsnIntegerConverter;
            case AsnPropTypes.Null:
                return AsnNullConverter;
            case AsnPropTypes.NumericString:
                return AsnNumericStringConverter;
            case AsnPropTypes.ObjectIdentifier:
                return AsnObjectIdentifierConverter;
            case AsnPropTypes.OctetString:
                return AsnOctetStringConverter;
            case AsnPropTypes.PrintableString:
                return AsnPrintableStringConverter;
            case AsnPropTypes.TeletexString:
                return AsnTeletexStringConverter;
            case AsnPropTypes.UTCTime:
                return AsnUTCTimeConverter;
            case AsnPropTypes.UniversalString:
                return AsnUniversalStringConverter;
            case AsnPropTypes.Utf8String:
                return AsnUtf8StringConverter;
            case AsnPropTypes.VideotexString:
                return AsnVideotexStringConverter;
            case AsnPropTypes.VisibleString:
                return AsnVisibleStringConverter;
            default:
                return null;
        }
    }

    class BitString {
        constructor(params, unusedBits = 0) {
            this.unusedBits = 0;
            this.value = new ArrayBuffer(0);
            if (params) {
                if (typeof params === "number") {
                    this.fromNumber(params);
                }
                else if (build.BufferSourceConverter.isBufferSource(params)) {
                    this.unusedBits = unusedBits;
                    this.value = build.BufferSourceConverter.toArrayBuffer(params);
                }
                else {
                    throw TypeError("Unsupported type of 'params' argument for BitString");
                }
            }
        }
        fromASN(asn) {
            if (!(asn instanceof BitString$1)) {
                throw new TypeError("Argument 'asn' is not instance of ASN.1 BitString");
            }
            this.unusedBits = asn.valueBlock.unusedBits;
            this.value = asn.valueBlock.valueHex;
            return this;
        }
        toASN() {
            return new BitString$1({ unusedBits: this.unusedBits, valueHex: this.value });
        }
        toSchema(name) {
            return new BitString$1({ name });
        }
        toNumber() {
            let res = "";
            const uintArray = new Uint8Array(this.value);
            for (const octet of uintArray) {
                res += octet.toString(2).padStart(8, "0");
            }
            res = res.split("").reverse().join("");
            if (this.unusedBits) {
                res = res.slice(this.unusedBits).padStart(this.unusedBits, "0");
            }
            return parseInt(res, 2);
        }
        fromNumber(value) {
            let bits = value.toString(2);
            const octetSize = (bits.length + 7) >> 3;
            this.unusedBits = (octetSize << 3) - bits.length;
            const octets = new Uint8Array(octetSize);
            bits = bits.padStart(octetSize << 3, "0").split("").reverse().join("");
            let index = 0;
            while (index < octetSize) {
                octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);
                index++;
            }
            this.value = octets.buffer;
        }
    }

    class OctetString {
        constructor(param) {
            if (typeof param === "number") {
                this.buffer = new ArrayBuffer(param);
            }
            else {
                if (build.BufferSourceConverter.isBufferSource(param)) {
                    this.buffer = build.BufferSourceConverter.toArrayBuffer(param);
                }
                else if (Array.isArray(param)) {
                    this.buffer = new Uint8Array(param);
                }
                else {
                    this.buffer = new ArrayBuffer(0);
                }
            }
        }
        get byteLength() {
            return this.buffer.byteLength;
        }
        get byteOffset() {
            return 0;
        }
        fromASN(asn) {
            if (!(asn instanceof OctetString$1)) {
                throw new TypeError("Argument 'asn' is not instance of ASN.1 OctetString");
            }
            this.buffer = asn.valueBlock.valueHex;
            return this;
        }
        toASN() {
            return new OctetString$1({ valueHex: this.buffer });
        }
        toSchema(name) {
            return new OctetString$1({ name });
        }
    }

    function isConvertible(target) {
        if (target && target.prototype) {
            if (target.prototype.toASN && target.prototype.fromASN) {
                return true;
            }
            else {
                return isConvertible(target.prototype);
            }
        }
        else {
            return !!(target && target.toASN && target.fromASN);
        }
    }
    function isTypeOfArray(target) {
        var _a;
        if (target) {
            const proto = Object.getPrototypeOf(target);
            if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {
                return true;
            }
            return isTypeOfArray(proto);
        }
        return false;
    }
    function isArrayEqual(bytes1, bytes2) {
        if (!(bytes1 && bytes2)) {
            return false;
        }
        if (bytes1.byteLength !== bytes2.byteLength) {
            return false;
        }
        const b1 = new Uint8Array(bytes1);
        const b2 = new Uint8Array(bytes2);
        for (let i = 0; i < bytes1.byteLength; i++) {
            if (b1[i] !== b2[i]) {
                return false;
            }
        }
        return true;
    }

    class AsnSchemaStorage {
        constructor() {
            this.items = new WeakMap();
        }
        has(target) {
            return this.items.has(target);
        }
        get(target) {
            var _a, _b, _c;
            const schema = this.items.get(target);
            if (!schema) {
                throw new Error(`Cannot get schema for '${(_c = (_b = (_a = target === null || target === void 0 ? void 0 : target.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : target}' target`);
            }
            return schema;
        }
        cache(target) {
            const schema = this.get(target);
            if (!schema.schema) {
                schema.schema = this.create(target, true);
            }
        }
        createDefault(target) {
            const schema = {
                type: AsnTypeTypes.Sequence,
                items: {},
            };
            const parentSchema = this.findParentSchema(target);
            if (parentSchema) {
                Object.assign(schema, parentSchema);
                schema.items = Object.assign({}, schema.items, parentSchema.items);
            }
            return schema;
        }
        create(target, useNames) {
            const schema = this.items.get(target) || this.createDefault(target);
            const asn1Value = [];
            for (const key in schema.items) {
                const item = schema.items[key];
                const name = useNames ? key : "";
                let asn1Item;
                if (typeof (item.type) === "number") {
                    const Asn1TypeName = AsnPropTypes[item.type];
                    const Asn1Type = asn1[Asn1TypeName];
                    if (!Asn1Type) {
                        throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);
                    }
                    asn1Item = new Asn1Type({ name });
                }
                else if (isConvertible(item.type)) {
                    const instance = new item.type();
                    asn1Item = instance.toSchema(name);
                }
                else if (item.optional) {
                    const itemSchema = this.get(item.type);
                    if (itemSchema.type === AsnTypeTypes.Choice) {
                        asn1Item = new Any({ name });
                    }
                    else {
                        asn1Item = this.create(item.type, false);
                        asn1Item.name = name;
                    }
                }
                else {
                    asn1Item = new Any({ name });
                }
                const optional = !!item.optional || item.defaultValue !== undefined;
                if (item.repeated) {
                    asn1Item.name = "";
                    const Container = item.repeated === "set"
                        ? Set$1
                        : Sequence;
                    asn1Item = new Container({
                        name: "",
                        value: [
                            new Repeated({
                                name,
                                value: asn1Item,
                            }),
                        ],
                    });
                }
                if (item.context !== null && item.context !== undefined) {
                    if (item.implicit) {
                        if (typeof item.type === "number" || isConvertible(item.type)) {
                            const Container = item.repeated
                                ? Constructed
                                : Primitive;
                            asn1Value.push(new Container({
                                name,
                                optional,
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: item.context,
                                },
                            }));
                        }
                        else {
                            this.cache(item.type);
                            const isRepeated = !!item.repeated;
                            let value = !isRepeated
                                ? this.get(item.type).schema
                                : asn1Item;
                            value = value.valueBlock ? value.valueBlock.value : value.value;
                            asn1Value.push(new Constructed({
                                name: !isRepeated ? name : "",
                                optional,
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: item.context,
                                },
                                value,
                            }));
                        }
                    }
                    else {
                        asn1Value.push(new Constructed({
                            optional,
                            idBlock: {
                                tagClass: 3,
                                tagNumber: item.context,
                            },
                            value: [asn1Item],
                        }));
                    }
                }
                else {
                    asn1Item.optional = optional;
                    asn1Value.push(asn1Item);
                }
            }
            switch (schema.type) {
                case AsnTypeTypes.Sequence:
                    return new Sequence({ value: asn1Value, name: "" });
                case AsnTypeTypes.Set:
                    return new Set$1({ value: asn1Value, name: "" });
                case AsnTypeTypes.Choice:
                    return new Choice({ value: asn1Value, name: "" });
                default:
                    throw new Error(`Unsupported ASN1 type in use`);
            }
        }
        set(target, schema) {
            this.items.set(target, schema);
            return this;
        }
        findParentSchema(target) {
            const parent = target.__proto__;
            if (parent) {
                const schema = this.items.get(parent);
                return schema || this.findParentSchema(parent);
            }
            return null;
        }
    }

    const schemaStorage = new AsnSchemaStorage();

    const AsnType = (options) => (target) => {
        let schema;
        if (!schemaStorage.has(target)) {
            schema = schemaStorage.createDefault(target);
            schemaStorage.set(target, schema);
        }
        else {
            schema = schemaStorage.get(target);
        }
        Object.assign(schema, options);
    };
    const AsnProp = (options) => (target, propertyKey) => {
        let schema;
        if (!schemaStorage.has(target.constructor)) {
            schema = schemaStorage.createDefault(target.constructor);
            schemaStorage.set(target.constructor, schema);
        }
        else {
            schema = schemaStorage.get(target.constructor);
        }
        const copyOptions = Object.assign({}, options);
        if (typeof copyOptions.type === "number" && !copyOptions.converter) {
            const defaultConverter$1 = defaultConverter(options.type);
            if (!defaultConverter$1) {
                throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);
            }
            copyOptions.converter = defaultConverter$1;
        }
        schema.items[propertyKey] = copyOptions;
    };

    class AsnSchemaValidationError extends Error {
        constructor() {
            super(...arguments);
            this.schemas = [];
        }
    }

    class AsnParser {
        static parse(data, target) {
            const asn1Parsed = fromBER(data);
            if (asn1Parsed.result.error) {
                throw new Error(asn1Parsed.result.error);
            }
            const res = this.fromASN(asn1Parsed.result, target);
            return res;
        }
        static fromASN(asn1Schema, target) {
            var _a;
            try {
                if (isConvertible(target)) {
                    const value = new target();
                    return value.fromASN(asn1Schema);
                }
                const schema = schemaStorage.get(target);
                schemaStorage.cache(target);
                let targetSchema = schema.schema;
                if (asn1Schema.constructor === Constructed && schema.type !== AsnTypeTypes.Choice) {
                    targetSchema = new Constructed({
                        idBlock: {
                            tagClass: 3,
                            tagNumber: asn1Schema.idBlock.tagNumber,
                        },
                        value: schema.schema.valueBlock.value,
                    });
                    for (const key in schema.items) {
                        delete asn1Schema[key];
                    }
                }
                const asn1ComparedSchema = compareSchema({}, asn1Schema, targetSchema);
                if (!asn1ComparedSchema.verified) {
                    throw new AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);
                }
                const res = new target();
                if (isTypeOfArray(target)) {
                    if (typeof schema.itemType === "number") {
                        const converter = defaultConverter(schema.itemType);
                        if (!converter) {
                            throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);
                        }
                        return target.from(asn1Schema.valueBlock.value, (element) => converter.fromASN(element));
                    }
                    else {
                        return target.from(asn1Schema.valueBlock.value, (element) => this.fromASN(element, schema.itemType));
                    }
                }
                for (const key in schema.items) {
                    const asn1SchemaValue = asn1ComparedSchema.result[key];
                    if (!asn1SchemaValue) {
                        continue;
                    }
                    const schemaItem = schema.items[key];
                    if (typeof (schemaItem.type) === "number" || isConvertible(schemaItem.type)) {
                        const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (isConvertible(schemaItem.type)
                            ? new schemaItem.type()
                            : null);
                        if (!converter) {
                            throw new Error("Converter is empty");
                        }
                        if (schemaItem.repeated) {
                            if (schemaItem.implicit) {
                                const Container = schemaItem.repeated === "sequence"
                                    ? Sequence
                                    : Set$1;
                                const newItem = new Container();
                                newItem.valueBlock = asn1SchemaValue.valueBlock;
                                const value = fromBER(newItem.toBER(false)).result.valueBlock.value;
                                res[key] = Array.from(value, (element) => converter.fromASN(element));
                            }
                            else {
                                res[key] = Array.from(asn1SchemaValue, (element) => converter.fromASN(element));
                            }
                        }
                        else {
                            let value = asn1SchemaValue;
                            if (schemaItem.implicit) {
                                let newItem;
                                if (isConvertible(schemaItem.type)) {
                                    newItem = new schemaItem.type().toSchema("");
                                }
                                else {
                                    const Asn1TypeName = AsnPropTypes[schemaItem.type];
                                    const Asn1Type = asn1[Asn1TypeName];
                                    if (!Asn1Type) {
                                        throw new Error(`Cannot get '${Asn1TypeName}' class from asn1js module`);
                                    }
                                    newItem = new Asn1Type();
                                }
                                newItem.valueBlock = value.valueBlock;
                                value = fromBER(newItem.toBER(false)).result;
                            }
                            res[key] = converter.fromASN(value);
                        }
                    }
                    else {
                        if (schemaItem.repeated) {
                            res[key] = Array.from(asn1SchemaValue, (element) => this.fromASN(element, schemaItem.type));
                        }
                        else {
                            res[key] = this.fromASN(asn1SchemaValue, schemaItem.type);
                        }
                    }
                }
                return res;
            }
            catch (error) {
                if (error instanceof AsnSchemaValidationError) {
                    error.schemas.push(target.name);
                }
                throw error;
            }
        }
    }

    class AsnSerializer {
        static serialize(obj) {
            if (obj instanceof BaseBlock) {
                return obj.toBER(false);
            }
            return this.toASN(obj).toBER(false);
        }
        static toASN(obj) {
            if (obj && isConvertible(obj.constructor)) {
                return obj.toASN();
            }
            const target = obj.constructor;
            const schema = schemaStorage.get(target);
            schemaStorage.cache(target);
            let asn1Value = [];
            if (schema.itemType) {
                if (typeof schema.itemType === "number") {
                    const converter = defaultConverter(schema.itemType);
                    if (!converter) {
                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);
                    }
                    asn1Value = obj.map((o) => converter.toASN(o));
                }
                else {
                    asn1Value = obj.map((o) => this.toAsnItem({ type: schema.itemType }, "[]", target, o));
                }
            }
            else {
                for (const key in schema.items) {
                    const schemaItem = schema.items[key];
                    const objProp = obj[key];
                    if (objProp === undefined
                        || schemaItem.defaultValue === objProp
                        || (typeof schemaItem.defaultValue === "object" && typeof objProp === "object"
                            && isArrayEqual(this.serialize(schemaItem.defaultValue), this.serialize(objProp)))) {
                        continue;
                    }
                    let asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);
                    if (typeof schemaItem.context === "number") {
                        if (schemaItem.implicit) {
                            if (!schemaItem.repeated
                                && (typeof schemaItem.type === "number" || isConvertible(schemaItem.type))) {
                                const value = {};
                                value.valueHex = asn1Item instanceof Null ? asn1Item.valueBeforeDecode : asn1Item.valueBlock.toBER();
                                asn1Value.push(new Primitive({
                                    optional: schemaItem.optional,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: schemaItem.context,
                                    },
                                    ...value,
                                }));
                            }
                            else {
                                asn1Value.push(new Constructed({
                                    optional: schemaItem.optional,
                                    idBlock: {
                                        tagClass: 3,
                                        tagNumber: schemaItem.context,
                                    },
                                    value: asn1Item.valueBlock.value,
                                }));
                            }
                        }
                        else {
                            asn1Value.push(new Constructed({
                                optional: schemaItem.optional,
                                idBlock: {
                                    tagClass: 3,
                                    tagNumber: schemaItem.context,
                                },
                                value: [asn1Item],
                            }));
                        }
                    }
                    else if (schemaItem.repeated) {
                        asn1Value = asn1Value.concat(asn1Item);
                    }
                    else {
                        asn1Value.push(asn1Item);
                    }
                }
            }
            let asnSchema;
            switch (schema.type) {
                case AsnTypeTypes.Sequence:
                    asnSchema = new Sequence({ value: asn1Value });
                    break;
                case AsnTypeTypes.Set:
                    asnSchema = new Set$1({ value: asn1Value });
                    break;
                case AsnTypeTypes.Choice:
                    if (!asn1Value[0]) {
                        throw new Error(`Schema '${target.name}' has wrong data. Choice cannot be empty.`);
                    }
                    asnSchema = asn1Value[0];
                    break;
            }
            return asnSchema;
        }
        static toAsnItem(schemaItem, key, target, objProp) {
            let asn1Item;
            if (typeof (schemaItem.type) === "number") {
                const converter = schemaItem.converter;
                if (!converter) {
                    throw new Error(`Property '${key}' doesn't have converter for type ${AsnPropTypes[schemaItem.type]} in schema '${target.name}'`);
                }
                if (schemaItem.repeated) {
                    const items = Array.from(objProp, (element) => converter.toASN(element));
                    const Container = schemaItem.repeated === "sequence"
                        ? Sequence
                        : Set$1;
                    asn1Item = new Container({
                        value: items,
                    });
                }
                else {
                    asn1Item = converter.toASN(objProp);
                }
            }
            else {
                if (schemaItem.repeated) {
                    const items = Array.from(objProp, (element) => this.toASN(element));
                    const Container = schemaItem.repeated === "sequence"
                        ? Sequence
                        : Set$1;
                    asn1Item = new Container({
                        value: items,
                    });
                }
                else {
                    asn1Item = this.toASN(objProp);
                }
            }
            return asn1Item;
        }
    }

    class AsnArray extends Array {
        constructor(items = []) {
            if (typeof items === "number") {
                super(items);
            }
            else {
                super();
                for (const item of items) {
                    this.push(item);
                }
            }
        }
    }

    class AsnConvert {
        static serialize(obj) {
            return AsnSerializer.serialize(obj);
        }
        static parse(data, target) {
            return AsnParser.parse(data, target);
        }
        static toString(data) {
            const buf = build.BufferSourceConverter.isBufferSource(data)
                ? build.BufferSourceConverter.toArrayBuffer(data)
                : AsnConvert.serialize(data);
            const asn = fromBER(buf);
            if (asn.offset === -1) {
                throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);
            }
            return asn.result.toString();
        }
    }

    var es2015$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AsnProp: AsnProp,
        AsnType: AsnType,
        get AsnTypeTypes () { return AsnTypeTypes; },
        get AsnPropTypes () { return AsnPropTypes; },
        AsnParser: AsnParser,
        AsnSerializer: AsnSerializer,
        AsnAnyConverter: AsnAnyConverter,
        AsnIntegerConverter: AsnIntegerConverter,
        AsnEnumeratedConverter: AsnEnumeratedConverter,
        AsnIntegerArrayBufferConverter: AsnIntegerArrayBufferConverter,
        AsnBitStringConverter: AsnBitStringConverter,
        AsnObjectIdentifierConverter: AsnObjectIdentifierConverter,
        AsnBooleanConverter: AsnBooleanConverter,
        AsnOctetStringConverter: AsnOctetStringConverter,
        AsnUtf8StringConverter: AsnUtf8StringConverter,
        AsnBmpStringConverter: AsnBmpStringConverter,
        AsnUniversalStringConverter: AsnUniversalStringConverter,
        AsnNumericStringConverter: AsnNumericStringConverter,
        AsnPrintableStringConverter: AsnPrintableStringConverter,
        AsnTeletexStringConverter: AsnTeletexStringConverter,
        AsnVideotexStringConverter: AsnVideotexStringConverter,
        AsnIA5StringConverter: AsnIA5StringConverter,
        AsnGraphicStringConverter: AsnGraphicStringConverter,
        AsnVisibleStringConverter: AsnVisibleStringConverter,
        AsnGeneralStringConverter: AsnGeneralStringConverter,
        AsnCharacterStringConverter: AsnCharacterStringConverter,
        AsnUTCTimeConverter: AsnUTCTimeConverter,
        AsnGeneralizedTimeConverter: AsnGeneralizedTimeConverter,
        AsnNullConverter: AsnNullConverter,
        defaultConverter: defaultConverter,
        BitString: BitString,
        OctetString: OctetString,
        AsnSchemaValidationError: AsnSchemaValidationError,
        AsnArray: AsnArray,
        AsnConvert: AsnConvert
    });

    var asn1_schema_1 = /*@__PURE__*/getAugmentedNamespace(es2015$1);

    var ProofOfExponentASN = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsageProof = exports.Proof = void 0;

    class Proof {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], Proof.prototype, "riddle", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], Proof.prototype, "challengePoint", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], Proof.prototype, "responseValue", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], Proof.prototype, "nonce", void 0);
    exports.Proof = Proof;
    class UsageProof {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], UsageProof.prototype, "challengePoint", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], UsageProof.prototype, "responseValue", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], UsageProof.prototype, "nonce", void 0);
    exports.UsageProof = UsageProof;

    });

    /* eslint no-invalid-this: 1 */

    var ERROR_MESSAGE$1 = 'Function.prototype.bind called on incompatible ';
    var slice$2 = Array.prototype.slice;
    var toStr$a = Object.prototype.toString;
    var funcType = '[object Function]';

    var implementation$3 = function bind(that) {
        var target = this;
        if (typeof target !== 'function' || toStr$a.call(target) !== funcType) {
            throw new TypeError(ERROR_MESSAGE$1 + target);
        }
        var args = slice$2.call(arguments, 1);

        var bound;
        var binder = function () {
            if (this instanceof bound) {
                var result = target.apply(
                    this,
                    args.concat(slice$2.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;
            } else {
                return target.apply(
                    that,
                    args.concat(slice$2.call(arguments))
                );
            }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

        if (target.prototype) {
            var Empty = function Empty() {};
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            Empty.prototype = null;
        }

        return bound;
    };

    var functionBind$1 = Function.prototype.bind || implementation$3;

    /* eslint complexity: [2, 18], max-statements: [2, 33] */
    var shams$3 = function hasSymbols() {
    	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    	if (typeof Symbol.iterator === 'symbol') { return true; }

    	var obj = {};
    	var sym = Symbol('test');
    	var symObj = Object(sym);
    	if (typeof sym === 'string') { return false; }

    	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    	// temp disabled per https://github.com/ljharb/object.assign/issues/17
    	// if (sym instanceof Symbol) { return false; }
    	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    	// if (!(symObj instanceof Symbol)) { return false; }

    	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    	var symVal = 42;
    	obj[sym] = symVal;
    	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    	var syms = Object.getOwnPropertySymbols(obj);
    	if (syms.length !== 1 || syms[0] !== sym) { return false; }

    	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    	if (typeof Object.getOwnPropertyDescriptor === 'function') {
    		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    	}

    	return true;
    };

    var origSymbol$3 = typeof Symbol !== 'undefined' && Symbol;


    var hasSymbols$a = function hasNativeSymbols() {
    	if (typeof origSymbol$3 !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol$3('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return shams$3();
    };

    var src$1 = functionBind$1.call(Function.call, Object.prototype.hasOwnProperty);

    var undefined$1;

    var $SyntaxError$3 = SyntaxError;
    var $Function$1 = Function;
    var $TypeError$p = TypeError;

    // eslint-disable-next-line consistent-return
    var getEvalledConstructor$1 = function (expressionSyntax) {
    	try {
    		return $Function$1('"use strict"; return (' + expressionSyntax + ').constructor;')();
    	} catch (e) {}
    };

    var $gOPD$2 = Object.getOwnPropertyDescriptor;
    if ($gOPD$2) {
    	try {
    		$gOPD$2({}, '');
    	} catch (e) {
    		$gOPD$2 = null; // this is IE 8, which has a broken gOPD
    	}
    }

    var throwTypeError$1 = function () {
    	throw new $TypeError$p();
    };
    var ThrowTypeError$1 = $gOPD$2
    	? (function () {
    		try {
    			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
    			arguments.callee; // IE 8 does not throw here
    			return throwTypeError$1;
    		} catch (calleeThrows) {
    			try {
    				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
    				return $gOPD$2(arguments, 'callee').get;
    			} catch (gOPDthrows) {
    				return throwTypeError$1;
    			}
    		}
    	}())
    	: throwTypeError$1;

    var hasSymbols$9 = hasSymbols$a();

    var getProto$2 = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

    var needsEval$1 = {};

    var TypedArray$1 = typeof Uint8Array === 'undefined' ? undefined$1 : getProto$2(Uint8Array);

    var INTRINSICS$1 = {
    	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
    	'%Array%': Array,
    	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
    	'%ArrayIteratorPrototype%': hasSymbols$9 ? getProto$2([][Symbol.iterator]()) : undefined$1,
    	'%AsyncFromSyncIteratorPrototype%': undefined$1,
    	'%AsyncFunction%': needsEval$1,
    	'%AsyncGenerator%': needsEval$1,
    	'%AsyncGeneratorFunction%': needsEval$1,
    	'%AsyncIteratorPrototype%': needsEval$1,
    	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
    	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
    	'%Boolean%': Boolean,
    	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
    	'%Date%': Date,
    	'%decodeURI%': decodeURI,
    	'%decodeURIComponent%': decodeURIComponent,
    	'%encodeURI%': encodeURI,
    	'%encodeURIComponent%': encodeURIComponent,
    	'%Error%': Error,
    	'%eval%': eval, // eslint-disable-line no-eval
    	'%EvalError%': EvalError,
    	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
    	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
    	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
    	'%Function%': $Function$1,
    	'%GeneratorFunction%': needsEval$1,
    	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
    	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
    	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
    	'%isFinite%': isFinite,
    	'%isNaN%': isNaN,
    	'%IteratorPrototype%': hasSymbols$9 ? getProto$2(getProto$2([][Symbol.iterator]())) : undefined$1,
    	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
    	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
    	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$9 ? undefined$1 : getProto$2(new Map()[Symbol.iterator]()),
    	'%Math%': Math,
    	'%Number%': Number,
    	'%Object%': Object,
    	'%parseFloat%': parseFloat,
    	'%parseInt%': parseInt,
    	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
    	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
    	'%RangeError%': RangeError,
    	'%ReferenceError%': ReferenceError,
    	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
    	'%RegExp%': RegExp,
    	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
    	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$9 ? undefined$1 : getProto$2(new Set()[Symbol.iterator]()),
    	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
    	'%String%': String,
    	'%StringIteratorPrototype%': hasSymbols$9 ? getProto$2(''[Symbol.iterator]()) : undefined$1,
    	'%Symbol%': hasSymbols$9 ? Symbol : undefined$1,
    	'%SyntaxError%': $SyntaxError$3,
    	'%ThrowTypeError%': ThrowTypeError$1,
    	'%TypedArray%': TypedArray$1,
    	'%TypeError%': $TypeError$p,
    	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
    	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
    	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
    	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
    	'%URIError%': URIError,
    	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
    	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
    	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
    };

    var doEval = function doEval(name) {
    	var value;
    	if (name === '%AsyncFunction%') {
    		value = getEvalledConstructor$1('async function () {}');
    	} else if (name === '%GeneratorFunction%') {
    		value = getEvalledConstructor$1('function* () {}');
    	} else if (name === '%AsyncGeneratorFunction%') {
    		value = getEvalledConstructor$1('async function* () {}');
    	} else if (name === '%AsyncGenerator%') {
    		var fn = doEval('%AsyncGeneratorFunction%');
    		if (fn) {
    			value = fn.prototype;
    		}
    	} else if (name === '%AsyncIteratorPrototype%') {
    		var gen = doEval('%AsyncGenerator%');
    		if (gen) {
    			value = getProto$2(gen.prototype);
    		}
    	}

    	INTRINSICS$1[name] = value;

    	return value;
    };

    var LEGACY_ALIASES$1 = {
    	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
    	'%ArrayPrototype%': ['Array', 'prototype'],
    	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
    	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
    	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
    	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
    	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
    	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
    	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
    	'%BooleanPrototype%': ['Boolean', 'prototype'],
    	'%DataViewPrototype%': ['DataView', 'prototype'],
    	'%DatePrototype%': ['Date', 'prototype'],
    	'%ErrorPrototype%': ['Error', 'prototype'],
    	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
    	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
    	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
    	'%FunctionPrototype%': ['Function', 'prototype'],
    	'%Generator%': ['GeneratorFunction', 'prototype'],
    	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
    	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
    	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
    	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
    	'%JSONParse%': ['JSON', 'parse'],
    	'%JSONStringify%': ['JSON', 'stringify'],
    	'%MapPrototype%': ['Map', 'prototype'],
    	'%NumberPrototype%': ['Number', 'prototype'],
    	'%ObjectPrototype%': ['Object', 'prototype'],
    	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
    	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
    	'%PromisePrototype%': ['Promise', 'prototype'],
    	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
    	'%Promise_all%': ['Promise', 'all'],
    	'%Promise_reject%': ['Promise', 'reject'],
    	'%Promise_resolve%': ['Promise', 'resolve'],
    	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
    	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
    	'%RegExpPrototype%': ['RegExp', 'prototype'],
    	'%SetPrototype%': ['Set', 'prototype'],
    	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
    	'%StringPrototype%': ['String', 'prototype'],
    	'%SymbolPrototype%': ['Symbol', 'prototype'],
    	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
    	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
    	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
    	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
    	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
    	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
    	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
    	'%URIErrorPrototype%': ['URIError', 'prototype'],
    	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
    	'%WeakSetPrototype%': ['WeakSet', 'prototype']
    };



    var $concat$2 = functionBind$1.call(Function.call, Array.prototype.concat);
    var $spliceApply$1 = functionBind$1.call(Function.apply, Array.prototype.splice);
    var $replace$3 = functionBind$1.call(Function.call, String.prototype.replace);
    var $strSlice$2 = functionBind$1.call(Function.call, String.prototype.slice);

    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
    var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar$1 = /\\(\\)?/g; /** Used to match backslashes in property paths. */
    var stringToPath$1 = function stringToPath(string) {
    	var first = $strSlice$2(string, 0, 1);
    	var last = $strSlice$2(string, -1);
    	if (first === '%' && last !== '%') {
    		throw new $SyntaxError$3('invalid intrinsic syntax, expected closing `%`');
    	} else if (last === '%' && first !== '%') {
    		throw new $SyntaxError$3('invalid intrinsic syntax, expected opening `%`');
    	}
    	var result = [];
    	$replace$3(string, rePropName$1, function (match, number, quote, subString) {
    		result[result.length] = quote ? $replace$3(subString, reEscapeChar$1, '$1') : number || match;
    	});
    	return result;
    };
    /* end adaptation */

    var getBaseIntrinsic$1 = function getBaseIntrinsic(name, allowMissing) {
    	var intrinsicName = name;
    	var alias;
    	if (src$1(LEGACY_ALIASES$1, intrinsicName)) {
    		alias = LEGACY_ALIASES$1[intrinsicName];
    		intrinsicName = '%' + alias[0] + '%';
    	}

    	if (src$1(INTRINSICS$1, intrinsicName)) {
    		var value = INTRINSICS$1[intrinsicName];
    		if (value === needsEval$1) {
    			value = doEval(intrinsicName);
    		}
    		if (typeof value === 'undefined' && !allowMissing) {
    			throw new $TypeError$p('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
    		}

    		return {
    			alias: alias,
    			name: intrinsicName,
    			value: value
    		};
    	}

    	throw new $SyntaxError$3('intrinsic ' + name + ' does not exist!');
    };

    var getIntrinsic$1 = function GetIntrinsic(name, allowMissing) {
    	if (typeof name !== 'string' || name.length === 0) {
    		throw new $TypeError$p('intrinsic name must be a non-empty string');
    	}
    	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    		throw new $TypeError$p('"allowMissing" argument must be a boolean');
    	}

    	var parts = stringToPath$1(name);
    	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

    	var intrinsic = getBaseIntrinsic$1('%' + intrinsicBaseName + '%', allowMissing);
    	var intrinsicRealName = intrinsic.name;
    	var value = intrinsic.value;
    	var skipFurtherCaching = false;

    	var alias = intrinsic.alias;
    	if (alias) {
    		intrinsicBaseName = alias[0];
    		$spliceApply$1(parts, $concat$2([0, 1], alias));
    	}

    	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
    		var part = parts[i];
    		var first = $strSlice$2(part, 0, 1);
    		var last = $strSlice$2(part, -1);
    		if (
    			(
    				(first === '"' || first === "'" || first === '`')
    				|| (last === '"' || last === "'" || last === '`')
    			)
    			&& first !== last
    		) {
    			throw new $SyntaxError$3('property names with quotes must have matching quotes');
    		}
    		if (part === 'constructor' || !isOwn) {
    			skipFurtherCaching = true;
    		}

    		intrinsicBaseName += '.' + part;
    		intrinsicRealName = '%' + intrinsicBaseName + '%';

    		if (src$1(INTRINSICS$1, intrinsicRealName)) {
    			value = INTRINSICS$1[intrinsicRealName];
    		} else if (value != null) {
    			if (!(part in value)) {
    				if (!allowMissing) {
    					throw new $TypeError$p('base intrinsic for ' + name + ' exists, but the property is not available.');
    				}
    				return void undefined$1;
    			}
    			if ($gOPD$2 && (i + 1) >= parts.length) {
    				var desc = $gOPD$2(value, part);
    				isOwn = !!desc;

    				// By convention, when a data property is converted to an accessor
    				// property to emulate a data property that does not suffer from
    				// the override mistake, that accessor's getter is marked with
    				// an `originalValue` property. Here, when we detect this, we
    				// uphold the illusion by pretending to see that original data
    				// property, i.e., returning the value rather than the getter
    				// itself.
    				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
    					value = desc.get;
    				} else {
    					value = value[part];
    				}
    			} else {
    				isOwn = src$1(value, part);
    				value = value[part];
    			}

    			if (isOwn && !skipFurtherCaching) {
    				INTRINSICS$1[intrinsicRealName] = value;
    			}
    		}
    	}
    	return value;
    };

    var callBind$1 = createCommonjsModule$2(function (module) {




    var $apply = getIntrinsic$1('%Function.prototype.apply%');
    var $call = getIntrinsic$1('%Function.prototype.call%');
    var $reflectApply = getIntrinsic$1('%Reflect.apply%', true) || functionBind$1.call($call, $apply);

    var $gOPD = getIntrinsic$1('%Object.getOwnPropertyDescriptor%', true);
    var $defineProperty = getIntrinsic$1('%Object.defineProperty%', true);
    var $max = getIntrinsic$1('%Math.max%');

    if ($defineProperty) {
    	try {
    		$defineProperty({}, 'a', { value: 1 });
    	} catch (e) {
    		// IE 8 has a broken defineProperty
    		$defineProperty = null;
    	}
    }

    module.exports = function callBind(originalFunction) {
    	var func = $reflectApply(functionBind$1, $call, arguments);
    	if ($gOPD && $defineProperty) {
    		var desc = $gOPD(func, 'length');
    		if (desc.configurable) {
    			// original length, plus the receiver, minus any additional arguments (after the receiver)
    			$defineProperty(
    				func,
    				'length',
    				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
    			);
    		}
    	}
    	return func;
    };

    var applyBind = function applyBind() {
    	return $reflectApply(functionBind$1, $apply, arguments);
    };

    if ($defineProperty) {
    	$defineProperty(module.exports, 'apply', { value: applyBind });
    } else {
    	module.exports.apply = applyBind;
    }
    });

    var toStr$9 = Object.prototype.toString;

    var isArguments = function isArguments(value) {
    	var str = toStr$9.call(value);
    	var isArgs = str === '[object Arguments]';
    	if (!isArgs) {
    		isArgs = str !== '[object Array]' &&
    			value !== null &&
    			typeof value === 'object' &&
    			typeof value.length === 'number' &&
    			value.length >= 0 &&
    			toStr$9.call(value.callee) === '[object Function]';
    	}
    	return isArgs;
    };

    var keysShim$1;
    if (!Object.keys) {
    	// modified from https://github.com/es-shims/es5-shim
    	var has$7 = Object.prototype.hasOwnProperty;
    	var toStr$8 = Object.prototype.toString;
    	var isArgs = isArguments; // eslint-disable-line global-require
    	var isEnumerable$3 = Object.prototype.propertyIsEnumerable;
    	var hasDontEnumBug = !isEnumerable$3.call({ toString: null }, 'toString');
    	var hasProtoEnumBug = isEnumerable$3.call(function () {}, 'prototype');
    	var dontEnums = [
    		'toString',
    		'toLocaleString',
    		'valueOf',
    		'hasOwnProperty',
    		'isPrototypeOf',
    		'propertyIsEnumerable',
    		'constructor'
    	];
    	var equalsConstructorPrototype = function (o) {
    		var ctor = o.constructor;
    		return ctor && ctor.prototype === o;
    	};
    	var excludedKeys = {
    		$applicationCache: true,
    		$console: true,
    		$external: true,
    		$frame: true,
    		$frameElement: true,
    		$frames: true,
    		$innerHeight: true,
    		$innerWidth: true,
    		$onmozfullscreenchange: true,
    		$onmozfullscreenerror: true,
    		$outerHeight: true,
    		$outerWidth: true,
    		$pageXOffset: true,
    		$pageYOffset: true,
    		$parent: true,
    		$scrollLeft: true,
    		$scrollTop: true,
    		$scrollX: true,
    		$scrollY: true,
    		$self: true,
    		$webkitIndexedDB: true,
    		$webkitStorageInfo: true,
    		$window: true
    	};
    	var hasAutomationEqualityBug = (function () {
    		/* global window */
    		if (typeof window === 'undefined') { return false; }
    		for (var k in window) {
    			try {
    				if (!excludedKeys['$' + k] && has$7.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
    					try {
    						equalsConstructorPrototype(window[k]);
    					} catch (e) {
    						return true;
    					}
    				}
    			} catch (e) {
    				return true;
    			}
    		}
    		return false;
    	}());
    	var equalsConstructorPrototypeIfNotBuggy = function (o) {
    		/* global window */
    		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
    			return equalsConstructorPrototype(o);
    		}
    		try {
    			return equalsConstructorPrototype(o);
    		} catch (e) {
    			return false;
    		}
    	};

    	keysShim$1 = function keys(object) {
    		var isObject = object !== null && typeof object === 'object';
    		var isFunction = toStr$8.call(object) === '[object Function]';
    		var isArguments = isArgs(object);
    		var isString = isObject && toStr$8.call(object) === '[object String]';
    		var theKeys = [];

    		if (!isObject && !isFunction && !isArguments) {
    			throw new TypeError('Object.keys called on a non-object');
    		}

    		var skipProto = hasProtoEnumBug && isFunction;
    		if (isString && object.length > 0 && !has$7.call(object, 0)) {
    			for (var i = 0; i < object.length; ++i) {
    				theKeys.push(String(i));
    			}
    		}

    		if (isArguments && object.length > 0) {
    			for (var j = 0; j < object.length; ++j) {
    				theKeys.push(String(j));
    			}
    		} else {
    			for (var name in object) {
    				if (!(skipProto && name === 'prototype') && has$7.call(object, name)) {
    					theKeys.push(String(name));
    				}
    			}
    		}

    		if (hasDontEnumBug) {
    			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

    			for (var k = 0; k < dontEnums.length; ++k) {
    				if (!(skipConstructor && dontEnums[k] === 'constructor') && has$7.call(object, dontEnums[k])) {
    					theKeys.push(dontEnums[k]);
    				}
    			}
    		}
    		return theKeys;
    	};
    }
    var implementation$2 = keysShim$1;

    var slice$1 = Array.prototype.slice;


    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) { return origKeys(o); } : implementation$2;

    var originalKeys = Object.keys;

    keysShim.shim = function shimObjectKeys() {
    	if (Object.keys) {
    		var keysWorksWithArguments = (function () {
    			// Safari 5.0 bug
    			var args = Object.keys(arguments);
    			return args && args.length === arguments.length;
    		}(1, 2));
    		if (!keysWorksWithArguments) {
    			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
    				if (isArguments(object)) {
    					return originalKeys(slice$1.call(object));
    				}
    				return originalKeys(object);
    			};
    		}
    	} else {
    		Object.keys = keysShim;
    	}
    	return Object.keys || keysShim;
    };

    var objectKeys = keysShim;

    var hasSymbols$8 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

    var toStr$7 = Object.prototype.toString;
    var concat = Array.prototype.concat;
    var origDefineProperty = Object.defineProperty;

    var isFunction = function (fn) {
    	return typeof fn === 'function' && toStr$7.call(fn) === '[object Function]';
    };

    var arePropertyDescriptorsSupported = function () {
    	var obj = {};
    	try {
    		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
    		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
    		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
    			return false;
    		}
    		return obj.x === obj;
    	} catch (e) { /* this is IE 8. */
    		return false;
    	}
    };
    var supportsDescriptors$2 = origDefineProperty && arePropertyDescriptorsSupported();

    var defineProperty$1 = function (object, name, value, predicate) {
    	if (name in object && (!isFunction(predicate) || !predicate())) {
    		return;
    	}
    	if (supportsDescriptors$2) {
    		origDefineProperty(object, name, {
    			configurable: true,
    			enumerable: false,
    			value: value,
    			writable: true
    		});
    	} else {
    		object[name] = value;
    	}
    };

    var defineProperties = function (object, map) {
    	var predicates = arguments.length > 2 ? arguments[2] : {};
    	var props = objectKeys(map);
    	if (hasSymbols$8) {
    		props = concat.call(props, Object.getOwnPropertySymbols(map));
    	}
    	for (var i = 0; i < props.length; i += 1) {
    		defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
    	}
    };

    defineProperties.supportsDescriptors = !!supportsDescriptors$2;

    var defineProperties_1 = defineProperties;

    var $indexOf$3 = callBind$1(getIntrinsic$1('String.prototype.indexOf'));

    var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
    	var intrinsic = getIntrinsic$1(name, !!allowMissing);
    	if (typeof intrinsic === 'function' && $indexOf$3(name, '.prototype.') > -1) {
    		return callBind$1(intrinsic);
    	}
    	return intrinsic;
    };

    var $Array = getIntrinsic$1('%Array%');

    // eslint-disable-next-line global-require
    var toStr$6 = !$Array.isArray && callBound$1('Object.prototype.toString');

    var IsArray$1 = $Array.isArray || function IsArray(argument) {
    	return toStr$6(argument) === '[object Array]';
    };

    // https://ecma-international.org/ecma-262/6.0/#sec-isarray
    var IsArray = IsArray$1;

    var $TypeError$o = getIntrinsic$1('%TypeError%');



    var $apply = getIntrinsic$1('%Reflect.apply%', true) || callBound$1('%Function.prototype.apply%');

    // https://ecma-international.org/ecma-262/6.0/#sec-call

    var Call = function Call(F, V) {
    	var argumentsList = arguments.length > 2 ? arguments[2] : [];
    	if (!IsArray(argumentsList)) {
    		throw new $TypeError$o('Assertion failed: optional `argumentsList`, if provided, must be a List');
    	}
    	return $apply(F, V, argumentsList);
    };

    var hasMap$2 = typeof Map === 'function' && Map.prototype;
    var mapSizeDescriptor$2 = Object.getOwnPropertyDescriptor && hasMap$2 ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
    var mapSize$2 = hasMap$2 && mapSizeDescriptor$2 && typeof mapSizeDescriptor$2.get === 'function' ? mapSizeDescriptor$2.get : null;
    var mapForEach$2 = hasMap$2 && Map.prototype.forEach;
    var hasSet$2 = typeof Set === 'function' && Set.prototype;
    var setSizeDescriptor$2 = Object.getOwnPropertyDescriptor && hasSet$2 ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
    var setSize$2 = hasSet$2 && setSizeDescriptor$2 && typeof setSizeDescriptor$2.get === 'function' ? setSizeDescriptor$2.get : null;
    var setForEach$2 = hasSet$2 && Set.prototype.forEach;
    var hasWeakMap$1 = typeof WeakMap === 'function' && WeakMap.prototype;
    var weakMapHas$2 = hasWeakMap$1 ? WeakMap.prototype.has : null;
    var hasWeakSet$1 = typeof WeakSet === 'function' && WeakSet.prototype;
    var weakSetHas$2 = hasWeakSet$1 ? WeakSet.prototype.has : null;
    var hasWeakRef$1 = typeof WeakRef === 'function' && WeakRef.prototype;
    var weakRefDeref$2 = hasWeakRef$1 ? WeakRef.prototype.deref : null;
    var booleanValueOf$2 = Boolean.prototype.valueOf;
    var objectToString$2 = Object.prototype.toString;
    var functionToString$2 = Function.prototype.toString;
    var $match$1 = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace$2 = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat$1 = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor$1 = Math.floor;
    var bigIntValueOf$2 = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
    var gOPS$2 = Object.getOwnPropertySymbols;
    var symToString$2 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
    var hasShammedSymbols$2 = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
    // ie, `has-tostringtag/shams
    var toStringTag$2 = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols$2 ? 'object' : 'symbol')
        ? Symbol.toStringTag
        : null;
    var isEnumerable$2 = Object.prototype.propertyIsEnumerable;

    var gPO$2 = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
        [].__proto__ === Array.prototype // eslint-disable-line no-proto
            ? function (O) {
                return O.__proto__; // eslint-disable-line no-proto
            }
            : null
    );

    function addNumericSeparator(num, str) {
        if (
            num === Infinity
            || num === -Infinity
            || num !== num
            || (num && num > -1000 && num < 1000)
            || $test.call(/e/, str)
        ) {
            return str;
        }
        var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
        if (typeof num === 'number') {
            var int = num < 0 ? -$floor$1(-num) : $floor$1(num); // trunc(num)
            if (int !== num) {
                var intStr = String(int);
                var dec = $slice.call(str, intStr.length + 1);
                return $replace$2.call(intStr, sepRegex, '$&_') + '.' + $replace$2.call($replace$2.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
            }
        }
        return $replace$2.call(str, sepRegex, '$&_');
    }


    var inspectCustom$2 = require$$0$3.custom;
    var inspectSymbol$2 = isSymbol$3(inspectCustom$2) ? inspectCustom$2 : null;

    var objectInspect$2 = function inspect_(obj, options, depth, seen) {
        var opts = options || {};

        if (has$6(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
            throw new TypeError('option "quoteStyle" must be "single" or "double"');
        }
        if (
            has$6(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
                ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
                : opts.maxStringLength !== null
            )
        ) {
            throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
        }
        var customInspect = has$6(opts, 'customInspect') ? opts.customInspect : true;
        if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
            throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
        }

        if (
            has$6(opts, 'indent')
            && opts.indent !== null
            && opts.indent !== '\t'
            && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
        ) {
            throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
        }
        if (has$6(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
            throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
        }
        var numericSeparator = opts.numericSeparator;

        if (typeof obj === 'undefined') {
            return 'undefined';
        }
        if (obj === null) {
            return 'null';
        }
        if (typeof obj === 'boolean') {
            return obj ? 'true' : 'false';
        }

        if (typeof obj === 'string') {
            return inspectString$1(obj, opts);
        }
        if (typeof obj === 'number') {
            if (obj === 0) {
                return Infinity / obj > 0 ? '0' : '-0';
            }
            var str = String(obj);
            return numericSeparator ? addNumericSeparator(obj, str) : str;
        }
        if (typeof obj === 'bigint') {
            var bigIntStr = String(obj) + 'n';
            return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
        }

        var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
        if (typeof depth === 'undefined') { depth = 0; }
        if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
            return isArray$6(obj) ? '[Array]' : '[Object]';
        }

        var indent = getIndent$1(opts, depth);

        if (typeof seen === 'undefined') {
            seen = [];
        } else if (indexOf$2(seen, obj) >= 0) {
            return '[Circular]';
        }

        function inspect(value, from, noIndent) {
            if (from) {
                seen = $arrSlice.call(seen);
                seen.push(from);
            }
            if (noIndent) {
                var newOpts = {
                    depth: opts.depth
                };
                if (has$6(opts, 'quoteStyle')) {
                    newOpts.quoteStyle = opts.quoteStyle;
                }
                return inspect_(value, newOpts, depth + 1, seen);
            }
            return inspect_(value, opts, depth + 1, seen);
        }

        if (typeof obj === 'function' && !isRegExp$1(obj)) { // in older engines, regexes are callable
            var name = nameOf$1(obj);
            var keys = arrObjKeys$2(obj, inspect);
            return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
        }
        if (isSymbol$3(obj)) {
            var symString = hasShammedSymbols$2 ? $replace$2.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString$2.call(obj);
            return typeof obj === 'object' && !hasShammedSymbols$2 ? markBoxed$2(symString) : symString;
        }
        if (isElement$1(obj)) {
            var s = '<' + $toLowerCase.call(String(obj.nodeName));
            var attrs = obj.attributes || [];
            for (var i = 0; i < attrs.length; i++) {
                s += ' ' + attrs[i].name + '=' + wrapQuotes$2(quote$2(attrs[i].value), 'double', opts);
            }
            s += '>';
            if (obj.childNodes && obj.childNodes.length) { s += '...'; }
            s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
            return s;
        }
        if (isArray$6(obj)) {
            if (obj.length === 0) { return '[]'; }
            var xs = arrObjKeys$2(obj, inspect);
            if (indent && !singleLineValues$1(xs)) {
                return '[' + indentedJoin$2(xs, indent) + ']';
            }
            return '[ ' + $join.call(xs, ', ') + ' ]';
        }
        if (isError$1(obj)) {
            var parts = arrObjKeys$2(obj, inspect);
            if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable$2.call(obj, 'cause')) {
                return '{ [' + String(obj) + '] ' + $join.call($concat$1.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
            }
            if (parts.length === 0) { return '[' + String(obj) + ']'; }
            return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
        }
        if (typeof obj === 'object' && customInspect) {
            if (inspectSymbol$2 && typeof obj[inspectSymbol$2] === 'function' && require$$0$3) {
                return require$$0$3(obj, { depth: maxDepth - depth });
            } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
                return obj.inspect();
            }
        }
        if (isMap$1(obj)) {
            var mapParts = [];
            mapForEach$2.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
            return collectionOf$2('Map', mapSize$2.call(obj), mapParts, indent);
        }
        if (isSet$1(obj)) {
            var setParts = [];
            setForEach$2.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
            return collectionOf$2('Set', setSize$2.call(obj), setParts, indent);
        }
        if (isWeakMap$1(obj)) {
            return weakCollectionOf$2('WeakMap');
        }
        if (isWeakSet$1(obj)) {
            return weakCollectionOf$2('WeakSet');
        }
        if (isWeakRef$1(obj)) {
            return weakCollectionOf$2('WeakRef');
        }
        if (isNumber$1(obj)) {
            return markBoxed$2(inspect(Number(obj)));
        }
        if (isBigInt$1(obj)) {
            return markBoxed$2(inspect(bigIntValueOf$2.call(obj)));
        }
        if (isBoolean$1(obj)) {
            return markBoxed$2(booleanValueOf$2.call(obj));
        }
        if (isString$1(obj)) {
            return markBoxed$2(inspect(String(obj)));
        }
        if (!isDate$1(obj) && !isRegExp$1(obj)) {
            var ys = arrObjKeys$2(obj, inspect);
            var isPlainObject = gPO$2 ? gPO$2(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
            var protoTag = obj instanceof Object ? '' : 'null prototype';
            var stringTag = !isPlainObject && toStringTag$2 && Object(obj) === obj && toStringTag$2 in obj ? $slice.call(toStr$5(obj), 8, -1) : protoTag ? 'Object' : '';
            var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
            var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat$1.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
            if (ys.length === 0) { return tag + '{}'; }
            if (indent) {
                return tag + '{' + indentedJoin$2(ys, indent) + '}';
            }
            return tag + '{ ' + $join.call(ys, ', ') + ' }';
        }
        return String(obj);
    };

    function wrapQuotes$2(s, defaultStyle, opts) {
        var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
        return quoteChar + s + quoteChar;
    }

    function quote$2(s) {
        return $replace$2.call(String(s), /"/g, '&quot;');
    }

    function isArray$6(obj) { return toStr$5(obj) === '[object Array]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }
    function isDate$1(obj) { return toStr$5(obj) === '[object Date]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }
    function isRegExp$1(obj) { return toStr$5(obj) === '[object RegExp]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }
    function isError$1(obj) { return toStr$5(obj) === '[object Error]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }
    function isString$1(obj) { return toStr$5(obj) === '[object String]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }
    function isNumber$1(obj) { return toStr$5(obj) === '[object Number]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }
    function isBoolean$1(obj) { return toStr$5(obj) === '[object Boolean]' && (!toStringTag$2 || !(typeof obj === 'object' && toStringTag$2 in obj)); }

    // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
    function isSymbol$3(obj) {
        if (hasShammedSymbols$2) {
            return obj && typeof obj === 'object' && obj instanceof Symbol;
        }
        if (typeof obj === 'symbol') {
            return true;
        }
        if (!obj || typeof obj !== 'object' || !symToString$2) {
            return false;
        }
        try {
            symToString$2.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    function isBigInt$1(obj) {
        if (!obj || typeof obj !== 'object' || !bigIntValueOf$2) {
            return false;
        }
        try {
            bigIntValueOf$2.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    var hasOwn$2 = Object.prototype.hasOwnProperty || function (key) { return key in this; };
    function has$6(obj, key) {
        return hasOwn$2.call(obj, key);
    }

    function toStr$5(obj) {
        return objectToString$2.call(obj);
    }

    function nameOf$1(f) {
        if (f.name) { return f.name; }
        var m = $match$1.call(functionToString$2.call(f), /^function\s*([\w$]+)/);
        if (m) { return m[1]; }
        return null;
    }

    function indexOf$2(xs, x) {
        if (xs.indexOf) { return xs.indexOf(x); }
        for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) { return i; }
        }
        return -1;
    }

    function isMap$1(x) {
        if (!mapSize$2 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            mapSize$2.call(x);
            try {
                setSize$2.call(x);
            } catch (s) {
                return true;
            }
            return x instanceof Map; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakMap$1(x) {
        if (!weakMapHas$2 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakMapHas$2.call(x, weakMapHas$2);
            try {
                weakSetHas$2.call(x, weakSetHas$2);
            } catch (s) {
                return true;
            }
            return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakRef$1(x) {
        if (!weakRefDeref$2 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakRefDeref$2.call(x);
            return true;
        } catch (e) {}
        return false;
    }

    function isSet$1(x) {
        if (!setSize$2 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            setSize$2.call(x);
            try {
                mapSize$2.call(x);
            } catch (m) {
                return true;
            }
            return x instanceof Set; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakSet$1(x) {
        if (!weakSetHas$2 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakSetHas$2.call(x, weakSetHas$2);
            try {
                weakMapHas$2.call(x, weakMapHas$2);
            } catch (s) {
                return true;
            }
            return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isElement$1(x) {
        if (!x || typeof x !== 'object') { return false; }
        if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
            return true;
        }
        return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
    }

    function inspectString$1(str, opts) {
        if (str.length > opts.maxStringLength) {
            var remaining = str.length - opts.maxStringLength;
            var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
            return inspectString$1($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
        }
        // eslint-disable-next-line no-control-regex
        var s = $replace$2.call($replace$2.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte$2);
        return wrapQuotes$2(s, 'single', opts);
    }

    function lowbyte$2(c) {
        var n = c.charCodeAt(0);
        var x = {
            8: 'b',
            9: 't',
            10: 'n',
            12: 'f',
            13: 'r'
        }[n];
        if (x) { return '\\' + x; }
        return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
    }

    function markBoxed$2(str) {
        return 'Object(' + str + ')';
    }

    function weakCollectionOf$2(type) {
        return type + ' { ? }';
    }

    function collectionOf$2(type, size, entries, indent) {
        var joinedEntries = indent ? indentedJoin$2(entries, indent) : $join.call(entries, ', ');
        return type + ' (' + size + ') {' + joinedEntries + '}';
    }

    function singleLineValues$1(xs) {
        for (var i = 0; i < xs.length; i++) {
            if (indexOf$2(xs[i], '\n') >= 0) {
                return false;
            }
        }
        return true;
    }

    function getIndent$1(opts, depth) {
        var baseIndent;
        if (opts.indent === '\t') {
            baseIndent = '\t';
        } else if (typeof opts.indent === 'number' && opts.indent > 0) {
            baseIndent = $join.call(Array(opts.indent + 1), ' ');
        } else {
            return null;
        }
        return {
            base: baseIndent,
            prev: $join.call(Array(depth + 1), baseIndent)
        };
    }

    function indentedJoin$2(xs, indent) {
        if (xs.length === 0) { return ''; }
        var lineJoiner = '\n' + indent.prev + indent.base;
        return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
    }

    function arrObjKeys$2(obj, inspect) {
        var isArr = isArray$6(obj);
        var xs = [];
        if (isArr) {
            xs.length = obj.length;
            for (var i = 0; i < obj.length; i++) {
                xs[i] = has$6(obj, i) ? inspect(obj[i], obj) : '';
            }
        }
        var syms = typeof gOPS$2 === 'function' ? gOPS$2(obj) : [];
        var symMap;
        if (hasShammedSymbols$2) {
            symMap = {};
            for (var k = 0; k < syms.length; k++) {
                symMap['$' + syms[k]] = syms[k];
            }
        }

        for (var key in obj) { // eslint-disable-line no-restricted-syntax
            if (!has$6(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (hasShammedSymbols$2 && symMap['$' + key] instanceof Symbol) {
                // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
                continue; // eslint-disable-line no-restricted-syntax, no-continue
            } else if ($test.call(/[^\w$]/, key)) {
                xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
            } else {
                xs.push(key + ': ' + inspect(obj[key], obj));
            }
        }
        if (typeof gOPS$2 === 'function') {
            for (var j = 0; j < syms.length; j++) {
                if (isEnumerable$2.call(obj, syms[j])) {
                    xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
                }
            }
        }
        return xs;
    }

    // https://ecma-international.org/ecma-262/6.0/#sec-ispropertykey

    var IsPropertyKey = function IsPropertyKey(argument) {
    	return typeof argument === 'string' || typeof argument === 'symbol';
    };

    // https://262.ecma-international.org/5.1/#sec-8

    var Type$1 = function Type(x) {
    	if (x === null) {
    		return 'Null';
    	}
    	if (typeof x === 'undefined') {
    		return 'Undefined';
    	}
    	if (typeof x === 'function' || typeof x === 'object') {
    		return 'Object';
    	}
    	if (typeof x === 'number') {
    		return 'Number';
    	}
    	if (typeof x === 'boolean') {
    		return 'Boolean';
    	}
    	if (typeof x === 'string') {
    		return 'String';
    	}
    };

    // https://262.ecma-international.org/11.0/#sec-ecmascript-data-types-and-values

    var Type = function Type(x) {
    	if (typeof x === 'symbol') {
    		return 'Symbol';
    	}
    	if (typeof x === 'bigint') {
    		return 'BigInt';
    	}
    	return Type$1(x);
    };

    var $TypeError$n = getIntrinsic$1('%TypeError%');






    // https://ecma-international.org/ecma-262/6.0/#sec-get-o-p

    var Get = function Get(O, P) {
    	// 7.3.1.1
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$n('Assertion failed: Type(O) is not Object');
    	}
    	// 7.3.1.2
    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$n('Assertion failed: IsPropertyKey(P) is not true, got ' + objectInspect$2(P));
    	}
    	// 7.3.1.3
    	return O[P];
    };

    var $TypeError$m = getIntrinsic$1('%TypeError%');

    // http://262.ecma-international.org/5.1/#sec-9.10

    var CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
    	if (value == null) {
    		throw new $TypeError$m(optMessage || ('Cannot call method on ' + value));
    	}
    	return value;
    };

    var RequireObjectCoercible = CheckObjectCoercible;

    var $Object = getIntrinsic$1('%Object%');



    // https://ecma-international.org/ecma-262/6.0/#sec-toobject

    var ToObject = function ToObject(value) {
    	RequireObjectCoercible(value);
    	return $Object(value);
    };

    var $TypeError$l = getIntrinsic$1('%TypeError%');




    // https://ecma-international.org/ecma-262/6.0/#sec-getv

    var GetV = function GetV(V, P) {
    	// 7.3.2.1
    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$l('Assertion failed: IsPropertyKey(P) is not true');
    	}

    	// 7.3.2.2-3
    	var O = ToObject(V);

    	// 7.3.2.4
    	return O[P];
    };

    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
    	try {
    		badArrayLike = Object.defineProperty({}, 'length', {
    			get: function () {
    				throw isCallableMarker;
    			}
    		});
    		isCallableMarker = {};
    		// eslint-disable-next-line no-throw-literal
    		reflectApply(function () { throw 42; }, null, badArrayLike);
    	} catch (_) {
    		if (_ !== isCallableMarker) {
    			reflectApply = null;
    		}
    	}
    } else {
    	reflectApply = null;
    }

    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
    	try {
    		var fnStr = fnToStr.call(value);
    		return constructorRegex.test(fnStr);
    	} catch (e) {
    		return false; // not a function
    	}
    };

    var tryFunctionObject = function tryFunctionToStr(value) {
    	try {
    		if (isES6ClassFn(value)) { return false; }
    		fnToStr.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };
    var toStr$4 = Object.prototype.toString;
    var fnClass = '[object Function]';
    var genClass = '[object GeneratorFunction]';
    var hasToStringTag$2 = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
    /* globals document: false */
    var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

    var isCallable = reflectApply
    	? function isCallable(value) {
    		if (value === documentDotAll) { return true; }
    		if (!value) { return false; }
    		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    		if (typeof value === 'function' && !value.prototype) { return true; }
    		try {
    			reflectApply(value, null, badArrayLike);
    		} catch (e) {
    			if (e !== isCallableMarker) { return false; }
    		}
    		return !isES6ClassFn(value);
    	}
    	: function isCallable(value) {
    		if (value === documentDotAll) { return true; }
    		if (!value) { return false; }
    		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
    		if (typeof value === 'function' && !value.prototype) { return true; }
    		if (hasToStringTag$2) { return tryFunctionObject(value); }
    		if (isES6ClassFn(value)) { return false; }
    		var strClass = toStr$4.call(value);
    		return strClass === fnClass || strClass === genClass;
    	};

    // http://262.ecma-international.org/5.1/#sec-9.11

    var IsCallable = isCallable;

    var $TypeError$k = getIntrinsic$1('%TypeError%');





    // https://ecma-international.org/ecma-262/6.0/#sec-getmethod

    var GetMethod$1 = function GetMethod(O, P) {
    	// 7.3.9.1
    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$k('Assertion failed: IsPropertyKey(P) is not true');
    	}

    	// 7.3.9.2
    	var func = GetV(O, P);

    	// 7.3.9.4
    	if (func == null) {
    		return void 0;
    	}

    	// 7.3.9.5
    	if (!IsCallable(func)) {
    		throw new $TypeError$k(P + 'is not a function');
    	}

    	// 7.3.9.6
    	return func;
    };

    var shams$2 = function hasToStringTagShams() {
    	return shams$3() && !!Symbol.toStringTag;
    };

    var hasToStringTag$1 = shams$2();
    var has$5;
    var $exec$1;
    var isRegexMarker;
    var badStringifier;

    if (hasToStringTag$1) {
    	has$5 = callBound$1('Object.prototype.hasOwnProperty');
    	$exec$1 = callBound$1('RegExp.prototype.exec');
    	isRegexMarker = {};

    	var throwRegexMarker = function () {
    		throw isRegexMarker;
    	};
    	badStringifier = {
    		toString: throwRegexMarker,
    		valueOf: throwRegexMarker
    	};

    	if (typeof Symbol.toPrimitive === 'symbol') {
    		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
    	}
    }

    var $toString = callBound$1('Object.prototype.toString');
    var gOPD$4 = Object.getOwnPropertyDescriptor;
    var regexClass = '[object RegExp]';

    var isRegex = hasToStringTag$1
    	// eslint-disable-next-line consistent-return
    	? function isRegex(value) {
    		if (!value || typeof value !== 'object') {
    			return false;
    		}

    		var descriptor = gOPD$4(value, 'lastIndex');
    		var hasLastIndexDataProperty = descriptor && has$5(descriptor, 'value');
    		if (!hasLastIndexDataProperty) {
    			return false;
    		}

    		try {
    			$exec$1(value, badStringifier);
    		} catch (e) {
    			return e === isRegexMarker;
    		}
    	}
    	: function isRegex(value) {
    		// In older browsers, typeof regex incorrectly returns 'function'
    		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
    			return false;
    		}

    		return $toString(value) === regexClass;
    	};

    // http://262.ecma-international.org/5.1/#sec-9.2

    var ToBoolean = function ToBoolean(value) { return !!value; };

    var $match = getIntrinsic$1('%Symbol.match%', true);





    // https://ecma-international.org/ecma-262/6.0/#sec-isregexp

    var IsRegExp = function IsRegExp(argument) {
    	if (!argument || typeof argument !== 'object') {
    		return false;
    	}
    	if ($match) {
    		var isRegExp = argument[$match];
    		if (typeof isRegExp !== 'undefined') {
    			return ToBoolean(isRegExp);
    		}
    	}
    	return isRegex(argument);
    };

    var $String = getIntrinsic$1('%String%');
    var $TypeError$j = getIntrinsic$1('%TypeError%');

    // https://ecma-international.org/ecma-262/6.0/#sec-tostring

    var ToString = function ToString(argument) {
    	if (typeof argument === 'symbol') {
    		throw new $TypeError$j('Cannot convert a Symbol value to a string');
    	}
    	return $String(argument);
    };

    /* eslint complexity: [2, 18], max-statements: [2, 33] */
    var shams$1 = function hasSymbols() {
    	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    	if (typeof Symbol.iterator === 'symbol') { return true; }

    	var obj = {};
    	var sym = Symbol('test');
    	var symObj = Object(sym);
    	if (typeof sym === 'string') { return false; }

    	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    	// temp disabled per https://github.com/ljharb/object.assign/issues/17
    	// if (sym instanceof Symbol) { return false; }
    	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    	// if (!(symObj instanceof Symbol)) { return false; }

    	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    	var symVal = 42;
    	obj[sym] = symVal;
    	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    	var syms = Object.getOwnPropertySymbols(obj);
    	if (syms.length !== 1 || syms[0] !== sym) { return false; }

    	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    	if (typeof Object.getOwnPropertyDescriptor === 'function') {
    		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    	}

    	return true;
    };

    var origSymbol$2 = typeof Symbol !== 'undefined' && Symbol;


    var hasSymbols$7 = function hasNativeSymbols() {
    	if (typeof origSymbol$2 !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol$2('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return shams$1();
    };

    var functionsHaveNames = function functionsHaveNames() {
    	return typeof function f() {}.name === 'string';
    };

    var gOPD$3 = Object.getOwnPropertyDescriptor;
    if (gOPD$3) {
    	try {
    		gOPD$3([], 'length');
    	} catch (e) {
    		// IE 8 has a broken gOPD
    		gOPD$3 = null;
    	}
    }

    functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
    	if (!functionsHaveNames() || !gOPD$3) {
    		return false;
    	}
    	var desc = gOPD$3(function () {}, 'name');
    	return !!desc && !!desc.configurable;
    };

    var $bind = Function.prototype.bind;

    functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
    	return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
    };

    var functionsHaveNames_1 = functionsHaveNames;

    var implementation$1 = createCommonjsModule$2(function (module) {

    var functionsHaveConfigurableNames = functionsHaveNames_1.functionsHaveConfigurableNames();

    var $Object = Object;
    var $TypeError = TypeError;

    module.exports = function flags() {
    	if (this != null && this !== $Object(this)) {
    		throw new $TypeError('RegExp.prototype.flags getter called on non-object');
    	}
    	var result = '';
    	if (this.hasIndices) {
    		result += 'd';
    	}
    	if (this.global) {
    		result += 'g';
    	}
    	if (this.ignoreCase) {
    		result += 'i';
    	}
    	if (this.multiline) {
    		result += 'm';
    	}
    	if (this.dotAll) {
    		result += 's';
    	}
    	if (this.unicode) {
    		result += 'u';
    	}
    	if (this.sticky) {
    		result += 'y';
    	}
    	return result;
    };

    if (functionsHaveConfigurableNames && Object.defineProperty) {
    	Object.defineProperty(module.exports, 'name', { value: 'get flags' });
    }
    });

    var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
    var $gOPD$1 = Object.getOwnPropertyDescriptor;

    var polyfill$1 = function getPolyfill() {
    	if (supportsDescriptors$1 && (/a/mig).flags === 'gim') {
    		var descriptor = $gOPD$1(RegExp.prototype, 'flags');
    		if (
    			descriptor
    			&& typeof descriptor.get === 'function'
    			&& typeof RegExp.prototype.dotAll === 'boolean'
    			&& typeof RegExp.prototype.hasIndices === 'boolean'
    		) {
    			/* eslint getter-return: 0 */
    			var calls = '';
    			var o = {};
    			Object.defineProperty(o, 'hasIndices', {
    				get: function () {
    					calls += 'd';
    				}
    			});
    			Object.defineProperty(o, 'sticky', {
    				get: function () {
    					calls += 'y';
    				}
    			});
    			if (calls === 'dy') {
    				return descriptor.get;
    			}
    		}
    	}
    	return implementation$1;
    };

    var supportsDescriptors = defineProperties_1.supportsDescriptors;

    var gOPD$2 = Object.getOwnPropertyDescriptor;
    var defineProperty = Object.defineProperty;
    var TypeErr = TypeError;
    var getProto$1 = Object.getPrototypeOf;
    var regex = /a/;

    var shim$1 = function shimFlags() {
    	if (!supportsDescriptors || !getProto$1) {
    		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
    	}
    	var polyfill = polyfill$1();
    	var proto = getProto$1(regex);
    	var descriptor = gOPD$2(proto, 'flags');
    	if (!descriptor || descriptor.get !== polyfill) {
    		defineProperty(proto, 'flags', {
    			configurable: true,
    			enumerable: false,
    			get: polyfill
    		});
    	}
    	return polyfill;
    };

    var flagsBound = callBind$1(polyfill$1());

    defineProperties_1(flagsBound, {
    	getPolyfill: polyfill$1,
    	implementation: implementation$1,
    	shim: shim$1
    });

    var regexp_prototype_flags = flagsBound;

    /* eslint complexity: [2, 18], max-statements: [2, 33] */
    var shams = function hasSymbols() {
    	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
    	if (typeof Symbol.iterator === 'symbol') { return true; }

    	var obj = {};
    	var sym = Symbol('test');
    	var symObj = Object(sym);
    	if (typeof sym === 'string') { return false; }

    	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
    	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

    	// temp disabled per https://github.com/ljharb/object.assign/issues/17
    	// if (sym instanceof Symbol) { return false; }
    	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    	// if (!(symObj instanceof Symbol)) { return false; }

    	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
    	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

    	var symVal = 42;
    	obj[sym] = symVal;
    	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

    	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

    	var syms = Object.getOwnPropertySymbols(obj);
    	if (syms.length !== 1 || syms[0] !== sym) { return false; }

    	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

    	if (typeof Object.getOwnPropertyDescriptor === 'function') {
    		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
    	}

    	return true;
    };

    var origSymbol$1 = typeof Symbol !== 'undefined' && Symbol;


    var hasSymbols$6 = function hasNativeSymbols() {
    	if (typeof origSymbol$1 !== 'function') { return false; }
    	if (typeof Symbol !== 'function') { return false; }
    	if (typeof origSymbol$1('foo') !== 'symbol') { return false; }
    	if (typeof Symbol('bar') !== 'symbol') { return false; }

    	return shams();
    };

    var isLeadingSurrogate = function isLeadingSurrogate(charCode) {
    	return typeof charCode === 'number' && charCode >= 0xD800 && charCode <= 0xDBFF;
    };

    var isTrailingSurrogate = function isTrailingSurrogate(charCode) {
    	return typeof charCode === 'number' && charCode >= 0xDC00 && charCode <= 0xDFFF;
    };

    var $TypeError$i = getIntrinsic$1('%TypeError%');
    var $fromCharCode = getIntrinsic$1('%String.fromCharCode%');




    // https://tc39.es/ecma262/2020/#sec-utf16decodesurrogatepair

    var UTF16SurrogatePairToCodePoint = function UTF16SurrogatePairToCodePoint(lead, trail) {
    	if (!isLeadingSurrogate(lead) || !isTrailingSurrogate(trail)) {
    		throw new $TypeError$i('Assertion failed: `lead` must be a leading surrogate char code, and `trail` must be a trailing surrogate char code');
    	}
    	// var cp = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    	return $fromCharCode(lead) + $fromCharCode(trail);
    };

    var $TypeError$h = getIntrinsic$1('%TypeError%');







    var $charAt = callBound$1('String.prototype.charAt');
    var $charCodeAt = callBound$1('String.prototype.charCodeAt');

    // https://ecma-international.org/ecma-262/12.0/#sec-codepointat

    var CodePointAt = function CodePointAt(string, position) {
    	if (Type(string) !== 'String') {
    		throw new $TypeError$h('Assertion failed: `string` must be a String');
    	}
    	var size = string.length;
    	if (position < 0 || position >= size) {
    		throw new $TypeError$h('Assertion failed: `position` must be >= 0, and < the length of `string`');
    	}
    	var first = $charCodeAt(string, position);
    	var cp = $charAt(string, position);
    	var firstIsLeading = isLeadingSurrogate(first);
    	var firstIsTrailing = isTrailingSurrogate(first);
    	if (!firstIsLeading && !firstIsTrailing) {
    		return {
    			'[[CodePoint]]': cp,
    			'[[CodeUnitCount]]': 1,
    			'[[IsUnpairedSurrogate]]': false
    		};
    	}
    	if (firstIsTrailing || (position + 1 === size)) {
    		return {
    			'[[CodePoint]]': cp,
    			'[[CodeUnitCount]]': 1,
    			'[[IsUnpairedSurrogate]]': true
    		};
    	}
    	var second = $charCodeAt(string, position + 1);
    	if (!isTrailingSurrogate(second)) {
    		return {
    			'[[CodePoint]]': cp,
    			'[[CodeUnitCount]]': 1,
    			'[[IsUnpairedSurrogate]]': true
    		};
    	}

    	return {
    		'[[CodePoint]]': UTF16SurrogatePairToCodePoint(first, second),
    		'[[CodeUnitCount]]': 2,
    		'[[IsUnpairedSurrogate]]': false
    	};
    };

    var $abs = getIntrinsic$1('%Math.abs%');

    // http://262.ecma-international.org/5.1/#sec-5.2

    var abs = function abs(x) {
    	return $abs(x);
    };

    // var modulo = require('./modulo');
    var $floor = Math.floor;

    // http://262.ecma-international.org/5.1/#sec-5.2

    var floor = function floor(x) {
    	// return x - modulo(x, 1);
    	return $floor(x);
    };

    var _isNaN = Number.isNaN || function isNaN(a) {
    	return a !== a;
    };

    var $isNaN = Number.isNaN || function (a) { return a !== a; };

    var _isFinite = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };

    // https://tc39.es/ecma262/#sec-isintegralnumber

    var IsIntegralNumber = function IsIntegralNumber(argument) {
    	if (Type(argument) !== 'Number' || _isNaN(argument) || !_isFinite(argument)) {
    		return false;
    	}
    	var absValue = abs(argument);
    	return floor(absValue) === absValue;
    };

    var $Math = getIntrinsic$1('%Math%');
    var $Number$1 = getIntrinsic$1('%Number%');

    var maxSafeInteger = $Number$1.MAX_SAFE_INTEGER || $Math.pow(2, 53) - 1;

    var $TypeError$g = getIntrinsic$1('%TypeError%');

    // https://ecma-international.org/ecma-262/12.0/#sec-advancestringindex

    var AdvanceStringIndex = function AdvanceStringIndex(S, index, unicode) {
    	if (Type(S) !== 'String') {
    		throw new $TypeError$g('Assertion failed: `S` must be a String');
    	}
    	if (!IsIntegralNumber(index) || index < 0 || index > maxSafeInteger) {
    		throw new $TypeError$g('Assertion failed: `length` must be an integer >= 0 and <= 2**53');
    	}
    	if (Type(unicode) !== 'Boolean') {
    		throw new $TypeError$g('Assertion failed: `unicode` must be a Boolean');
    	}
    	if (!unicode) {
    		return index + 1;
    	}
    	var length = S.length;
    	if ((index + 1) >= length) {
    		return index + 1;
    	}
    	var cp = CodePointAt(S, index);
    	return index + cp['[[CodeUnitCount]]'];
    };

    var $TypeError$f = getIntrinsic$1('%TypeError%');



    // https://ecma-international.org/ecma-262/6.0/#sec-createiterresultobject

    var CreateIterResultObject = function CreateIterResultObject(value, done) {
    	if (Type(done) !== 'Boolean') {
    		throw new $TypeError$f('Assertion failed: Type(done) is not Boolean');
    	}
    	return {
    		value: value,
    		done: done
    	};
    };

    var $defineProperty$2 = getIntrinsic$1('%Object.defineProperty%', true);

    var hasPropertyDescriptors = function hasPropertyDescriptors() {
    	if ($defineProperty$2) {
    		try {
    			$defineProperty$2({}, 'a', { value: 1 });
    			return true;
    		} catch (e) {
    			// IE 8 has a broken defineProperty
    			return false;
    		}
    	}
    	return false;
    };

    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    	// node v0.6 has a bug where array lengths can be Set but not Defined
    	if (!hasPropertyDescriptors()) {
    		return null;
    	}
    	try {
    		return $defineProperty$2([], 'length', { value: 1 }).length !== 1;
    	} catch (e) {
    		// In Firefox 4-22, defining length on an array throws an exception.
    		return true;
    	}
    };

    var hasPropertyDescriptors_1 = hasPropertyDescriptors;

    var $defineProperty$1 = hasPropertyDescriptors_1() && getIntrinsic$1('%Object.defineProperty%', true);

    var hasArrayLengthDefineBug = hasPropertyDescriptors_1.hasArrayLengthDefineBug();

    // eslint-disable-next-line global-require
    var isArray$5 = hasArrayLengthDefineBug && IsArray$1;



    var $isEnumerable = callBound$1('Object.prototype.propertyIsEnumerable');

    // eslint-disable-next-line max-params
    var DefineOwnProperty = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
    	if (!$defineProperty$1) {
    		if (!IsDataDescriptor(desc)) {
    			// ES3 does not support getters/setters
    			return false;
    		}
    		if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {
    			return false;
    		}

    		// fallback for ES3
    		if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {
    			// a non-enumerable existing property
    			return false;
    		}

    		// property does not exist at all, or exists but is enumerable
    		var V = desc['[[Value]]'];
    		// eslint-disable-next-line no-param-reassign
    		O[P] = V; // will use [[Define]]
    		return SameValue(O[P], V);
    	}
    	if (
    		hasArrayLengthDefineBug
    		&& P === 'length'
    		&& '[[Value]]' in desc
    		&& isArray$5(O)
    		&& O.length !== desc['[[Value]]']
    	) {
    		// eslint-disable-next-line no-param-reassign
    		O.length = desc['[[Value]]'];
    		return O.length === desc['[[Value]]'];
    	}

    	$defineProperty$1(O, P, FromPropertyDescriptor(desc));
    	return true;
    };

    // https://262.ecma-international.org/13.0/#sec-match-records

    var isMatchRecord = function isMatchRecord(record) {
    	return (
    		src$1(record, '[[StartIndex]]')
            && src$1(record, '[[EndIndex]]')
            && record['[[StartIndex]]'] >= 0
            && record['[[EndIndex]]'] >= record['[[StartIndex]]']
            && String(parseInt(record['[[StartIndex]]'], 10)) === String(record['[[StartIndex]]'])
            && String(parseInt(record['[[EndIndex]]'], 10)) === String(record['[[EndIndex]]'])
    	);
    };

    var $TypeError$e = getIntrinsic$1('%TypeError%');
    var $SyntaxError$2 = getIntrinsic$1('%SyntaxError%');





    var predicates = {
    	// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type
    	'Property Descriptor': function isPropertyDescriptor(Desc) {
    		var allowed = {
    			'[[Configurable]]': true,
    			'[[Enumerable]]': true,
    			'[[Get]]': true,
    			'[[Set]]': true,
    			'[[Value]]': true,
    			'[[Writable]]': true
    		};

    		for (var key in Desc) { // eslint-disable-line
    			if (src$1(Desc, key) && !allowed[key]) {
    				return false;
    			}
    		}

    		var isData = src$1(Desc, '[[Value]]');
    		var IsAccessor = src$1(Desc, '[[Get]]') || src$1(Desc, '[[Set]]');
    		if (isData && IsAccessor) {
    			throw new $TypeError$e('Property Descriptors may not be both accessor and data descriptors');
    		}
    		return true;
    	},
    	// https://262.ecma-international.org/13.0/#sec-match-records
    	'Match Record': isMatchRecord
    };

    var assertRecord = function assertRecord(Type, recordType, argumentName, value) {
    	var predicate = predicates[recordType];
    	if (typeof predicate !== 'function') {
    		throw new $SyntaxError$2('unknown record type: ' + recordType);
    	}
    	if (Type(value) !== 'Object' || !predicate(value)) {
    		throw new $TypeError$e(argumentName + ' must be a ' + recordType);
    	}
    };

    var fromPropertyDescriptor = function fromPropertyDescriptor(Desc) {
    	if (typeof Desc === 'undefined') {
    		return Desc;
    	}
    	var obj = {};
    	if ('[[Value]]' in Desc) {
    		obj.value = Desc['[[Value]]'];
    	}
    	if ('[[Writable]]' in Desc) {
    		obj.writable = !!Desc['[[Writable]]'];
    	}
    	if ('[[Get]]' in Desc) {
    		obj.get = Desc['[[Get]]'];
    	}
    	if ('[[Set]]' in Desc) {
    		obj.set = Desc['[[Set]]'];
    	}
    	if ('[[Enumerable]]' in Desc) {
    		obj.enumerable = !!Desc['[[Enumerable]]'];
    	}
    	if ('[[Configurable]]' in Desc) {
    		obj.configurable = !!Desc['[[Configurable]]'];
    	}
    	return obj;
    };

    // https://ecma-international.org/ecma-262/6.0/#sec-frompropertydescriptor

    var FromPropertyDescriptor = function FromPropertyDescriptor(Desc) {
    	if (typeof Desc !== 'undefined') {
    		assertRecord(Type, 'Property Descriptor', 'Desc', Desc);
    	}

    	return fromPropertyDescriptor(Desc);
    };

    // https://ecma-international.org/ecma-262/6.0/#sec-isdatadescriptor

    var IsDataDescriptor = function IsDataDescriptor(Desc) {
    	if (typeof Desc === 'undefined') {
    		return false;
    	}

    	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

    	if (!src$1(Desc, '[[Value]]') && !src$1(Desc, '[[Writable]]')) {
    		return false;
    	}

    	return true;
    };

    // http://262.ecma-international.org/5.1/#sec-9.12

    var SameValue = function SameValue(x, y) {
    	if (x === y) { // 0 === -0, but they are not identical.
    		if (x === 0) { return 1 / x === 1 / y; }
    		return true;
    	}
    	return _isNaN(x) && _isNaN(y);
    };

    var $TypeError$d = getIntrinsic$1('%TypeError%');









    // https://ecma-international.org/ecma-262/6.0/#sec-createmethodproperty

    var CreateMethodProperty = function CreateMethodProperty(O, P, V) {
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$d('Assertion failed: Type(O) is not Object');
    	}

    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$d('Assertion failed: IsPropertyKey(P) is not true');
    	}

    	var newDesc = {
    		'[[Configurable]]': true,
    		'[[Enumerable]]': false,
    		'[[Value]]': V,
    		'[[Writable]]': true
    	};
    	return DefineOwnProperty(
    		IsDataDescriptor,
    		SameValue,
    		FromPropertyDescriptor,
    		O,
    		P,
    		newDesc
    	);
    };

    var $ObjectCreate = getIntrinsic$1('%Object.create%', true);
    var $TypeError$c = getIntrinsic$1('%TypeError%');
    var $SyntaxError$1 = getIntrinsic$1('%SyntaxError%');




    var hasProto = !({ __proto__: null } instanceof Object);

    // https://262.ecma-international.org/6.0/#sec-objectcreate

    var OrdinaryObjectCreate = function OrdinaryObjectCreate(proto) {
    	if (proto !== null && Type(proto) !== 'Object') {
    		throw new $TypeError$c('Assertion failed: `proto` must be null or an object');
    	}
    	var additionalInternalSlotsList = arguments.length < 2 ? [] : arguments[1];
    	if (!IsArray(additionalInternalSlotsList)) {
    		throw new $TypeError$c('Assertion failed: `additionalInternalSlotsList` must be an Array');
    	}
    	// var internalSlotsList = ['[[Prototype]]', '[[Extensible]]'];
    	if (additionalInternalSlotsList.length > 0) {
    		throw new $SyntaxError$1('es-abstract does not yet support internal slots');
    		// internalSlotsList.push(...additionalInternalSlotsList);
    	}
    	// var O = MakeBasicObject(internalSlotsList);
    	// setProto(O, proto);
    	// return O;

    	if ($ObjectCreate) {
    		return $ObjectCreate(proto);
    	}
    	if (hasProto) {
    		return { __proto__: proto };
    	}

    	if (proto === null) {
    		throw new $SyntaxError$1('native Object.create support is required to create null objects');
    	}
    	var T = function T() {};
    	T.prototype = proto;
    	return new T();
    };

    var $TypeError$b = getIntrinsic$1('%TypeError%');

    var regexExec = callBound$1('RegExp.prototype.exec');






    // https://ecma-international.org/ecma-262/6.0/#sec-regexpexec

    var RegExpExec = function RegExpExec(R, S) {
    	if (Type(R) !== 'Object') {
    		throw new $TypeError$b('Assertion failed: `R` must be an Object');
    	}
    	if (Type(S) !== 'String') {
    		throw new $TypeError$b('Assertion failed: `S` must be a String');
    	}
    	var exec = Get(R, 'exec');
    	if (IsCallable(exec)) {
    		var result = Call(exec, R, [S]);
    		if (result === null || Type(result) === 'Object') {
    			return result;
    		}
    		throw new $TypeError$b('"exec" method must return `null` or an Object');
    	}
    	return regexExec(R, S);
    };

    var $TypeError$a = getIntrinsic$1('%TypeError%');





    // IE 9 does not throw in strict mode when writability/configurability/extensibility is violated
    var noThrowOnStrictViolation = (function () {
    	try {
    		delete [].length;
    		return true;
    	} catch (e) {
    		return false;
    	}
    }());

    // https://ecma-international.org/ecma-262/6.0/#sec-set-o-p-v-throw

    var _Set = function Set(O, P, V, Throw) {
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$a('Assertion failed: `O` must be an Object');
    	}
    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$a('Assertion failed: `P` must be a Property Key');
    	}
    	if (Type(Throw) !== 'Boolean') {
    		throw new $TypeError$a('Assertion failed: `Throw` must be a Boolean');
    	}
    	if (Throw) {
    		O[P] = V; // eslint-disable-line no-param-reassign
    		if (noThrowOnStrictViolation && !SameValue(O[P], V)) {
    			throw new $TypeError$a('Attempted to assign to readonly property.');
    		}
    		return true;
    	}
    	try {
    		O[P] = V; // eslint-disable-line no-param-reassign
    		return noThrowOnStrictViolation ? SameValue(O[P], V) : true;
    	} catch (e) {
    		return false;
    	}

    };

    var $exec = callBound$1('RegExp.prototype.exec');

    var regexTester = function regexTester(regex) {
    	return function test(s) { return $exec(regex, s) !== null; };
    };

    var isPrimitive$1 = function isPrimitive(value) {
    	return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };

    var isPrimitive = function isPrimitive(value) {
    	return value === null || (typeof value !== 'function' && typeof value !== 'object');
    };

    var getDay = Date.prototype.getDay;
    var tryDateObject = function tryDateGetDayCall(value) {
    	try {
    		getDay.call(value);
    		return true;
    	} catch (e) {
    		return false;
    	}
    };

    var toStr$3 = Object.prototype.toString;
    var dateClass = '[object Date]';
    var hasToStringTag = shams$2();

    var isDateObject = function isDateObject(value) {
    	if (typeof value !== 'object' || value === null) {
    		return false;
    	}
    	return hasToStringTag ? tryDateObject(value) : toStr$3.call(value) === dateClass;
    };

    var isSymbol$2 = createCommonjsModule$2(function (module) {

    var toStr = Object.prototype.toString;
    var hasSymbols = hasSymbols$a();

    if (hasSymbols) {
    	var symToStr = Symbol.prototype.toString;
    	var symStringRegex = /^Symbol\(.*\)$/;
    	var isSymbolObject = function isRealSymbolObject(value) {
    		if (typeof value.valueOf() !== 'symbol') {
    			return false;
    		}
    		return symStringRegex.test(symToStr.call(value));
    	};

    	module.exports = function isSymbol(value) {
    		if (typeof value === 'symbol') {
    			return true;
    		}
    		if (toStr.call(value) !== '[object Symbol]') {
    			return false;
    		}
    		try {
    			return isSymbolObject(value);
    		} catch (e) {
    			return false;
    		}
    	};
    } else {

    	module.exports = function isSymbol(value) {
    		// this environment does not support Symbols.
    		return false ;
    	};
    }
    });

    var hasSymbols$5 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';






    var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
    	if (typeof O === 'undefined' || O === null) {
    		throw new TypeError('Cannot call method on ' + O);
    	}
    	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
    		throw new TypeError('hint must be "string" or "number"');
    	}
    	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
    	var method, result, i;
    	for (i = 0; i < methodNames.length; ++i) {
    		method = O[methodNames[i]];
    		if (isCallable(method)) {
    			result = method.call(O);
    			if (isPrimitive(result)) {
    				return result;
    			}
    		}
    	}
    	throw new TypeError('No default value');
    };

    var GetMethod = function GetMethod(O, P) {
    	var func = O[P];
    	if (func !== null && typeof func !== 'undefined') {
    		if (!isCallable(func)) {
    			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
    		}
    		return func;
    	}
    	return void 0;
    };

    // http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
    var es2015 = function ToPrimitive(input) {
    	if (isPrimitive(input)) {
    		return input;
    	}
    	var hint = 'default';
    	if (arguments.length > 1) {
    		if (arguments[1] === String) {
    			hint = 'string';
    		} else if (arguments[1] === Number) {
    			hint = 'number';
    		}
    	}

    	var exoticToPrim;
    	if (hasSymbols$5) {
    		if (Symbol.toPrimitive) {
    			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
    		} else if (isSymbol$2(input)) {
    			exoticToPrim = Symbol.prototype.valueOf;
    		}
    	}
    	if (typeof exoticToPrim !== 'undefined') {
    		var result = exoticToPrim.call(input, hint);
    		if (isPrimitive(result)) {
    			return result;
    		}
    		throw new TypeError('unable to convert exotic object to primitive');
    	}
    	if (hint === 'default' && (isDateObject(input) || isSymbol$2(input))) {
    		hint = 'string';
    	}
    	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
    };

    // https://ecma-international.org/ecma-262/6.0/#sec-toprimitive

    var ToPrimitive = function ToPrimitive(input) {
    	if (arguments.length > 1) {
    		return es2015(input, arguments[1]);
    	}
    	return es2015(input);
    };

    var $TypeError$9 = getIntrinsic$1('%TypeError%');
    var $Number = getIntrinsic$1('%Number%');
    var $RegExp = getIntrinsic$1('%RegExp%');
    var $parseInteger = getIntrinsic$1('%parseInt%');





    var $strSlice$1 = callBound$1('String.prototype.slice');
    var isBinary = regexTester(/^0b[01]+$/i);
    var isOctal = regexTester(/^0o[0-7]+$/i);
    var isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);
    var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
    var nonWSregex = new $RegExp('[' + nonWS + ']', 'g');
    var hasNonWS = regexTester(nonWSregex);

    // whitespace from: https://es5.github.io/#x15.5.4.20
    // implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
    var ws = [
    	'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
    	'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
    	'\u2029\uFEFF'
    ].join('');
    var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
    var $replace$1 = callBound$1('String.prototype.replace');
    var $trim = function (value) {
    	return $replace$1(value, trimRegex, '');
    };



    // https://ecma-international.org/ecma-262/6.0/#sec-tonumber

    var ToNumber = function ToNumber(argument) {
    	var value = isPrimitive$1(argument) ? argument : ToPrimitive(argument, $Number);
    	if (typeof value === 'symbol') {
    		throw new $TypeError$9('Cannot convert a Symbol value to a number');
    	}
    	if (typeof value === 'bigint') {
    		throw new $TypeError$9('Conversion from \'BigInt\' to \'number\' is not allowed.');
    	}
    	if (typeof value === 'string') {
    		if (isBinary(value)) {
    			return ToNumber($parseInteger($strSlice$1(value, 2), 2));
    		} else if (isOctal(value)) {
    			return ToNumber($parseInteger($strSlice$1(value, 2), 8));
    		} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
    			return NaN;
    		}
    		var trimmed = $trim(value);
    		if (trimmed !== value) {
    			return ToNumber(trimmed);
    		}

    	}
    	return $Number(value);
    };

    var sign = function sign(number) {
    	return number >= 0 ? 1 : -1;
    };

    // https://262.ecma-international.org/12.0/#sec-tointegerorinfinity

    var ToIntegerOrInfinity = function ToIntegerOrInfinity(value) {
    	var number = ToNumber(value);
    	if (_isNaN(number) || number === 0) { return 0; }
    	if (!_isFinite(number)) { return number; }
    	return sign(number) * floor(abs(number));
    };

    var ToLength = function ToLength(argument) {
    	var len = ToIntegerOrInfinity(argument);
    	if (len <= 0) { return 0; } // includes converting -0 to +0
    	if (len > maxSafeInteger) { return maxSafeInteger; }
    	return len;
    };

    var hasMap$1 = typeof Map === 'function' && Map.prototype;
    var mapSizeDescriptor$1 = Object.getOwnPropertyDescriptor && hasMap$1 ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
    var mapSize$1 = hasMap$1 && mapSizeDescriptor$1 && typeof mapSizeDescriptor$1.get === 'function' ? mapSizeDescriptor$1.get : null;
    var mapForEach$1 = hasMap$1 && Map.prototype.forEach;
    var hasSet$1 = typeof Set === 'function' && Set.prototype;
    var setSizeDescriptor$1 = Object.getOwnPropertyDescriptor && hasSet$1 ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
    var setSize$1 = hasSet$1 && setSizeDescriptor$1 && typeof setSizeDescriptor$1.get === 'function' ? setSizeDescriptor$1.get : null;
    var setForEach$1 = hasSet$1 && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
    var weakMapHas$1 = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
    var weakSetHas$1 = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
    var weakRefDeref$1 = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf$1 = Boolean.prototype.valueOf;
    var objectToString$1 = Object.prototype.toString;
    var functionToString$1 = Function.prototype.toString;
    var match$1 = String.prototype.match;
    var bigIntValueOf$1 = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
    var gOPS$1 = Object.getOwnPropertySymbols;
    var symToString$1 = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
    var hasShammedSymbols$1 = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
    var isEnumerable$1 = Object.prototype.propertyIsEnumerable;

    var gPO$1 = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
        [].__proto__ === Array.prototype // eslint-disable-line no-proto
            ? function (O) {
                return O.__proto__; // eslint-disable-line no-proto
            }
            : null
    );

    var inspectCustom$1 = require$$0$3.custom;
    var inspectSymbol$1 = inspectCustom$1 && isSymbol$1(inspectCustom$1) ? inspectCustom$1 : null;
    var toStringTag$1 = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;

    var objectInspect$1 = function inspect_(obj, options, depth, seen) {
        var opts = options || {};

        if (has$4(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
            throw new TypeError('option "quoteStyle" must be "single" or "double"');
        }
        if (
            has$4(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
                ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
                : opts.maxStringLength !== null
            )
        ) {
            throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
        }
        var customInspect = has$4(opts, 'customInspect') ? opts.customInspect : true;
        if (typeof customInspect !== 'boolean') {
            throw new TypeError('option "customInspect", if provided, must be `true` or `false`');
        }

        if (
            has$4(opts, 'indent')
            && opts.indent !== null
            && opts.indent !== '\t'
            && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
        ) {
            throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
        }

        if (typeof obj === 'undefined') {
            return 'undefined';
        }
        if (obj === null) {
            return 'null';
        }
        if (typeof obj === 'boolean') {
            return obj ? 'true' : 'false';
        }

        if (typeof obj === 'string') {
            return inspectString(obj, opts);
        }
        if (typeof obj === 'number') {
            if (obj === 0) {
                return Infinity / obj > 0 ? '0' : '-0';
            }
            return String(obj);
        }
        if (typeof obj === 'bigint') {
            return String(obj) + 'n';
        }

        var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
        if (typeof depth === 'undefined') { depth = 0; }
        if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
            return isArray$4(obj) ? '[Array]' : '[Object]';
        }

        var indent = getIndent(opts, depth);

        if (typeof seen === 'undefined') {
            seen = [];
        } else if (indexOf$1(seen, obj) >= 0) {
            return '[Circular]';
        }

        function inspect(value, from, noIndent) {
            if (from) {
                seen = seen.slice();
                seen.push(from);
            }
            if (noIndent) {
                var newOpts = {
                    depth: opts.depth
                };
                if (has$4(opts, 'quoteStyle')) {
                    newOpts.quoteStyle = opts.quoteStyle;
                }
                return inspect_(value, newOpts, depth + 1, seen);
            }
            return inspect_(value, opts, depth + 1, seen);
        }

        if (typeof obj === 'function') {
            var name = nameOf(obj);
            var keys = arrObjKeys$1(obj, inspect);
            return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
        }
        if (isSymbol$1(obj)) {
            var symString = hasShammedSymbols$1 ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, '$1') : symToString$1.call(obj);
            return typeof obj === 'object' && !hasShammedSymbols$1 ? markBoxed$1(symString) : symString;
        }
        if (isElement(obj)) {
            var s = '<' + String(obj.nodeName).toLowerCase();
            var attrs = obj.attributes || [];
            for (var i = 0; i < attrs.length; i++) {
                s += ' ' + attrs[i].name + '=' + wrapQuotes$1(quote$1(attrs[i].value), 'double', opts);
            }
            s += '>';
            if (obj.childNodes && obj.childNodes.length) { s += '...'; }
            s += '</' + String(obj.nodeName).toLowerCase() + '>';
            return s;
        }
        if (isArray$4(obj)) {
            if (obj.length === 0) { return '[]'; }
            var xs = arrObjKeys$1(obj, inspect);
            if (indent && !singleLineValues(xs)) {
                return '[' + indentedJoin$1(xs, indent) + ']';
            }
            return '[ ' + xs.join(', ') + ' ]';
        }
        if (isError(obj)) {
            var parts = arrObjKeys$1(obj, inspect);
            if (parts.length === 0) { return '[' + String(obj) + ']'; }
            return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
        }
        if (typeof obj === 'object' && customInspect) {
            if (inspectSymbol$1 && typeof obj[inspectSymbol$1] === 'function') {
                return obj[inspectSymbol$1]();
            } else if (typeof obj.inspect === 'function') {
                return obj.inspect();
            }
        }
        if (isMap(obj)) {
            var mapParts = [];
            mapForEach$1.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
            return collectionOf$1('Map', mapSize$1.call(obj), mapParts, indent);
        }
        if (isSet(obj)) {
            var setParts = [];
            setForEach$1.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
            return collectionOf$1('Set', setSize$1.call(obj), setParts, indent);
        }
        if (isWeakMap(obj)) {
            return weakCollectionOf$1('WeakMap');
        }
        if (isWeakSet(obj)) {
            return weakCollectionOf$1('WeakSet');
        }
        if (isWeakRef(obj)) {
            return weakCollectionOf$1('WeakRef');
        }
        if (isNumber(obj)) {
            return markBoxed$1(inspect(Number(obj)));
        }
        if (isBigInt(obj)) {
            return markBoxed$1(inspect(bigIntValueOf$1.call(obj)));
        }
        if (isBoolean(obj)) {
            return markBoxed$1(booleanValueOf$1.call(obj));
        }
        if (isString(obj)) {
            return markBoxed$1(inspect(String(obj)));
        }
        if (!isDate(obj) && !isRegExp(obj)) {
            var ys = arrObjKeys$1(obj, inspect);
            var isPlainObject = gPO$1 ? gPO$1(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
            var protoTag = obj instanceof Object ? '' : 'null prototype';
            var stringTag = !isPlainObject && toStringTag$1 && Object(obj) === obj && toStringTag$1 in obj ? toStr$2(obj).slice(8, -1) : protoTag ? 'Object' : '';
            var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
            var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');
            if (ys.length === 0) { return tag + '{}'; }
            if (indent) {
                return tag + '{' + indentedJoin$1(ys, indent) + '}';
            }
            return tag + '{ ' + ys.join(', ') + ' }';
        }
        return String(obj);
    };

    function wrapQuotes$1(s, defaultStyle, opts) {
        var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
        return quoteChar + s + quoteChar;
    }

    function quote$1(s) {
        return String(s).replace(/"/g, '&quot;');
    }

    function isArray$4(obj) { return toStr$2(obj) === '[object Array]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }
    function isDate(obj) { return toStr$2(obj) === '[object Date]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }
    function isRegExp(obj) { return toStr$2(obj) === '[object RegExp]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }
    function isError(obj) { return toStr$2(obj) === '[object Error]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }
    function isString(obj) { return toStr$2(obj) === '[object String]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }
    function isNumber(obj) { return toStr$2(obj) === '[object Number]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }
    function isBoolean(obj) { return toStr$2(obj) === '[object Boolean]' && (!toStringTag$1 || !(typeof obj === 'object' && toStringTag$1 in obj)); }

    // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
    function isSymbol$1(obj) {
        if (hasShammedSymbols$1) {
            return obj && typeof obj === 'object' && obj instanceof Symbol;
        }
        if (typeof obj === 'symbol') {
            return true;
        }
        if (!obj || typeof obj !== 'object' || !symToString$1) {
            return false;
        }
        try {
            symToString$1.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    function isBigInt(obj) {
        if (!obj || typeof obj !== 'object' || !bigIntValueOf$1) {
            return false;
        }
        try {
            bigIntValueOf$1.call(obj);
            return true;
        } catch (e) {}
        return false;
    }

    var hasOwn$1 = Object.prototype.hasOwnProperty || function (key) { return key in this; };
    function has$4(obj, key) {
        return hasOwn$1.call(obj, key);
    }

    function toStr$2(obj) {
        return objectToString$1.call(obj);
    }

    function nameOf(f) {
        if (f.name) { return f.name; }
        var m = match$1.call(functionToString$1.call(f), /^function\s*([\w$]+)/);
        if (m) { return m[1]; }
        return null;
    }

    function indexOf$1(xs, x) {
        if (xs.indexOf) { return xs.indexOf(x); }
        for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) { return i; }
        }
        return -1;
    }

    function isMap(x) {
        if (!mapSize$1 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            mapSize$1.call(x);
            try {
                setSize$1.call(x);
            } catch (s) {
                return true;
            }
            return x instanceof Map; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakMap(x) {
        if (!weakMapHas$1 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakMapHas$1.call(x, weakMapHas$1);
            try {
                weakSetHas$1.call(x, weakSetHas$1);
            } catch (s) {
                return true;
            }
            return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakRef(x) {
        if (!weakRefDeref$1 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakRefDeref$1.call(x);
            return true;
        } catch (e) {}
        return false;
    }

    function isSet(x) {
        if (!setSize$1 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            setSize$1.call(x);
            try {
                mapSize$1.call(x);
            } catch (m) {
                return true;
            }
            return x instanceof Set; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isWeakSet(x) {
        if (!weakSetHas$1 || !x || typeof x !== 'object') {
            return false;
        }
        try {
            weakSetHas$1.call(x, weakSetHas$1);
            try {
                weakMapHas$1.call(x, weakMapHas$1);
            } catch (s) {
                return true;
            }
            return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
        } catch (e) {}
        return false;
    }

    function isElement(x) {
        if (!x || typeof x !== 'object') { return false; }
        if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
            return true;
        }
        return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
    }

    function inspectString(str, opts) {
        if (str.length > opts.maxStringLength) {
            var remaining = str.length - opts.maxStringLength;
            var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
            return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
        }
        // eslint-disable-next-line no-control-regex
        var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte$1);
        return wrapQuotes$1(s, 'single', opts);
    }

    function lowbyte$1(c) {
        var n = c.charCodeAt(0);
        var x = {
            8: 'b',
            9: 't',
            10: 'n',
            12: 'f',
            13: 'r'
        }[n];
        if (x) { return '\\' + x; }
        return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
    }

    function markBoxed$1(str) {
        return 'Object(' + str + ')';
    }

    function weakCollectionOf$1(type) {
        return type + ' { ? }';
    }

    function collectionOf$1(type, size, entries, indent) {
        var joinedEntries = indent ? indentedJoin$1(entries, indent) : entries.join(', ');
        return type + ' (' + size + ') {' + joinedEntries + '}';
    }

    function singleLineValues(xs) {
        for (var i = 0; i < xs.length; i++) {
            if (indexOf$1(xs[i], '\n') >= 0) {
                return false;
            }
        }
        return true;
    }

    function getIndent(opts, depth) {
        var baseIndent;
        if (opts.indent === '\t') {
            baseIndent = '\t';
        } else if (typeof opts.indent === 'number' && opts.indent > 0) {
            baseIndent = Array(opts.indent + 1).join(' ');
        } else {
            return null;
        }
        return {
            base: baseIndent,
            prev: Array(depth + 1).join(baseIndent)
        };
    }

    function indentedJoin$1(xs, indent) {
        if (xs.length === 0) { return ''; }
        var lineJoiner = '\n' + indent.prev + indent.base;
        return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
    }

    function arrObjKeys$1(obj, inspect) {
        var isArr = isArray$4(obj);
        var xs = [];
        if (isArr) {
            xs.length = obj.length;
            for (var i = 0; i < obj.length; i++) {
                xs[i] = has$4(obj, i) ? inspect(obj[i], obj) : '';
            }
        }
        var syms = typeof gOPS$1 === 'function' ? gOPS$1(obj) : [];
        var symMap;
        if (hasShammedSymbols$1) {
            symMap = {};
            for (var k = 0; k < syms.length; k++) {
                symMap['$' + syms[k]] = syms[k];
            }
        }

        for (var key in obj) { // eslint-disable-line no-restricted-syntax
            if (!has$4(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
            if (hasShammedSymbols$1 && symMap['$' + key] instanceof Symbol) {
                // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
                continue; // eslint-disable-line no-restricted-syntax, no-continue
            } else if ((/[^\w$]/).test(key)) {
                xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
            } else {
                xs.push(key + ': ' + inspect(obj[key], obj));
            }
        }
        if (typeof gOPS$1 === 'function') {
            for (var j = 0; j < syms.length; j++) {
                if (isEnumerable$1.call(obj, syms[j])) {
                    xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
                }
            }
        }
        return xs;
    }

    var $TypeError$8 = getIntrinsic$1('%TypeError%');
    var $WeakMap$1 = getIntrinsic$1('%WeakMap%', true);
    var $Map$1 = getIntrinsic$1('%Map%', true);

    var $weakMapGet$1 = callBound$1('WeakMap.prototype.get', true);
    var $weakMapSet$1 = callBound$1('WeakMap.prototype.set', true);
    var $weakMapHas$1 = callBound$1('WeakMap.prototype.has', true);
    var $mapGet$1 = callBound$1('Map.prototype.get', true);
    var $mapSet$1 = callBound$1('Map.prototype.set', true);
    var $mapHas$1 = callBound$1('Map.prototype.has', true);

    /*
     * This function traverses the list returning the node corresponding to the
     * given key.
     *
     * That node is also moved to the head of the list, so that if it's accessed
     * again we don't need to traverse the whole list. By doing so, all the recently
     * used nodes can be accessed relatively quickly.
     */
    var listGetNode$1 = function (list, key) { // eslint-disable-line consistent-return
    	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
    		if (curr.key === key) {
    			prev.next = curr.next;
    			curr.next = list.next;
    			list.next = curr; // eslint-disable-line no-param-reassign
    			return curr;
    		}
    	}
    };

    var listGet = function (objects, key) {
    	var node = listGetNode$1(objects, key);
    	return node && node.value;
    };
    var listSet = function (objects, key, value) {
    	var node = listGetNode$1(objects, key);
    	if (node) {
    		node.value = value;
    	} else {
    		// Prepend the new node to the beginning of the list
    		objects.next = { // eslint-disable-line no-param-reassign
    			key: key,
    			next: objects.next,
    			value: value
    		};
    	}
    };
    var listHas = function (objects, key) {
    	return !!listGetNode$1(objects, key);
    };

    var sideChannel$1 = function getSideChannel() {
    	var $wm;
    	var $m;
    	var $o;
    	var channel = {
    		assert: function (key) {
    			if (!channel.has(key)) {
    				throw new $TypeError$8('Side channel does not contain ' + objectInspect$1(key));
    			}
    		},
    		get: function (key) { // eslint-disable-line consistent-return
    			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
    				if ($wm) {
    					return $weakMapGet$1($wm, key);
    				}
    			} else if ($Map$1) {
    				if ($m) {
    					return $mapGet$1($m, key);
    				}
    			} else {
    				if ($o) { // eslint-disable-line no-lonely-if
    					return listGet($o, key);
    				}
    			}
    		},
    		has: function (key) {
    			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
    				if ($wm) {
    					return $weakMapHas$1($wm, key);
    				}
    			} else if ($Map$1) {
    				if ($m) {
    					return $mapHas$1($m, key);
    				}
    			} else {
    				if ($o) { // eslint-disable-line no-lonely-if
    					return listHas($o, key);
    				}
    			}
    			return false;
    		},
    		set: function (key, value) {
    			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
    				if (!$wm) {
    					$wm = new $WeakMap$1();
    				}
    				$weakMapSet$1($wm, key, value);
    			} else if ($Map$1) {
    				if (!$m) {
    					$m = new $Map$1();
    				}
    				$mapSet$1($m, key, value);
    			} else {
    				if (!$o) {
    					/*
    					 * Initialize the linked list as an empty node, so that we don't have
    					 * to special-case handling of the first node: we can always refer to
    					 * it as (previous node).next, instead of something like (list).head
    					 */
    					$o = { key: {}, next: null };
    				}
    				listSet($o, key, value);
    			}
    		}
    	};
    	return channel;
    };

    var channel = sideChannel$1();

    var $TypeError$7 = getIntrinsic$1('%TypeError%');

    var SLOT = {
    	assert: function (O, slot) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError$7('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError$7('`slot` must be a string');
    		}
    		channel.assert(O);
    	},
    	get: function (O, slot) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError$7('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError$7('`slot` must be a string');
    		}
    		var slots = channel.get(O);
    		return slots && slots['$' + slot];
    	},
    	has: function (O, slot) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError$7('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError$7('`slot` must be a string');
    		}
    		var slots = channel.get(O);
    		return !!slots && src$1(slots, '$' + slot);
    	},
    	set: function (O, slot, V) {
    		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
    			throw new $TypeError$7('`O` is not an object');
    		}
    		if (typeof slot !== 'string') {
    			throw new $TypeError$7('`slot` must be a string');
    		}
    		var slots = channel.get(O);
    		if (!slots) {
    			slots = {};
    			channel.set(O, slots);
    		}
    		slots['$' + slot] = V;
    	}
    };

    if (Object.freeze) {
    	Object.freeze(SLOT);
    }

    var internalSlot = SLOT;

    var hasSymbols$4 = hasSymbols$6();

    var $TypeError$6 = getIntrinsic$1('%TypeError%');
    var IteratorPrototype = getIntrinsic$1('%IteratorPrototype%', true);
    var $defineProperty = getIntrinsic$1('%Object.defineProperty%', true);














    var RegExpStringIterator = function RegExpStringIterator(R, S, global, fullUnicode) {
    	if (Type(S) !== 'String') {
    		throw new $TypeError$6('`S` must be a string');
    	}
    	if (Type(global) !== 'Boolean') {
    		throw new $TypeError$6('`global` must be a boolean');
    	}
    	if (Type(fullUnicode) !== 'Boolean') {
    		throw new $TypeError$6('`fullUnicode` must be a boolean');
    	}
    	internalSlot.set(this, '[[IteratingRegExp]]', R);
    	internalSlot.set(this, '[[IteratedString]]', S);
    	internalSlot.set(this, '[[Global]]', global);
    	internalSlot.set(this, '[[Unicode]]', fullUnicode);
    	internalSlot.set(this, '[[Done]]', false);
    };

    if (IteratorPrototype) {
    	RegExpStringIterator.prototype = OrdinaryObjectCreate(IteratorPrototype);
    }

    var RegExpStringIteratorNext = function next() {
    	var O = this; // eslint-disable-line no-invalid-this
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$6('receiver must be an object');
    	}
    	if (
    		!(O instanceof RegExpStringIterator)
    		|| !internalSlot.has(O, '[[IteratingRegExp]]')
    		|| !internalSlot.has(O, '[[IteratedString]]')
    		|| !internalSlot.has(O, '[[Global]]')
    		|| !internalSlot.has(O, '[[Unicode]]')
    		|| !internalSlot.has(O, '[[Done]]')
    	) {
    		throw new $TypeError$6('"this" value must be a RegExpStringIterator instance');
    	}
    	if (internalSlot.get(O, '[[Done]]')) {
    		return CreateIterResultObject(undefined, true);
    	}
    	var R = internalSlot.get(O, '[[IteratingRegExp]]');
    	var S = internalSlot.get(O, '[[IteratedString]]');
    	var global = internalSlot.get(O, '[[Global]]');
    	var fullUnicode = internalSlot.get(O, '[[Unicode]]');
    	var match = RegExpExec(R, S);
    	if (match === null) {
    		internalSlot.set(O, '[[Done]]', true);
    		return CreateIterResultObject(undefined, true);
    	}
    	if (global) {
    		var matchStr = ToString(Get(match, '0'));
    		if (matchStr === '') {
    			var thisIndex = ToLength(Get(R, 'lastIndex'));
    			var nextIndex = AdvanceStringIndex(S, thisIndex, fullUnicode);
    			_Set(R, 'lastIndex', nextIndex, true);
    		}
    		return CreateIterResultObject(match, false);
    	}
    	internalSlot.set(O, '[[Done]]', true);
    	return CreateIterResultObject(match, false);
    };
    CreateMethodProperty(RegExpStringIterator.prototype, 'next', RegExpStringIteratorNext);

    if (hasSymbols$4) {
    	if (Symbol.toStringTag) {
    		if ($defineProperty) {
    			$defineProperty(RegExpStringIterator.prototype, Symbol.toStringTag, {
    				configurable: true,
    				enumerable: false,
    				value: 'RegExp String Iterator',
    				writable: false
    			});
    		} else {
    			RegExpStringIterator.prototype[Symbol.toStringTag] = 'RegExp String Iterator';
    		}
    	}

    	if (Symbol.iterator && typeof RegExpStringIterator.prototype[Symbol.iterator] !== 'function') {
    		var iteratorFn = function SymbolIterator() {
    			return this;
    		};
    		CreateMethodProperty(RegExpStringIterator.prototype, Symbol.iterator, iteratorFn);
    	}
    }

    // https://262.ecma-international.org/11.0/#sec-createregexpstringiterator
    var CreateRegExpStringIterator = function CreateRegExpStringIterator(R, S, global, fullUnicode) {
    	// assert R.global === global && R.unicode === fullUnicode?
    	return new RegExpStringIterator(R, S, global, fullUnicode);
    };

    // TODO: remove, semver-major

    var GetIntrinsic = getIntrinsic$1;

    var $TypeError$5 = getIntrinsic$1('%TypeError%');

    var isPropertyDescriptor = function IsPropertyDescriptor(ES, Desc) {
    	if (ES.Type(Desc) !== 'Object') {
    		return false;
    	}
    	var allowed = {
    		'[[Configurable]]': true,
    		'[[Enumerable]]': true,
    		'[[Get]]': true,
    		'[[Set]]': true,
    		'[[Value]]': true,
    		'[[Writable]]': true
    	};

    	for (var key in Desc) { // eslint-disable-line no-restricted-syntax
    		if (src$1(Desc, key) && !allowed[key]) {
    			return false;
    		}
    	}

    	if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
    		throw new $TypeError$5('Property Descriptors may not be both accessor and data descriptors');
    	}
    	return true;
    };

    // https://ecma-international.org/ecma-262/6.0/#sec-isaccessordescriptor

    var IsAccessorDescriptor = function IsAccessorDescriptor(Desc) {
    	if (typeof Desc === 'undefined') {
    		return false;
    	}

    	assertRecord(Type, 'Property Descriptor', 'Desc', Desc);

    	if (!src$1(Desc, '[[Get]]') && !src$1(Desc, '[[Set]]')) {
    		return false;
    	}

    	return true;
    };

    var $TypeError$4 = getIntrinsic$1('%TypeError%');





    // https://262.ecma-international.org/5.1/#sec-8.10.5

    var ToPropertyDescriptor = function ToPropertyDescriptor(Obj) {
    	if (Type(Obj) !== 'Object') {
    		throw new $TypeError$4('ToPropertyDescriptor requires an object');
    	}

    	var desc = {};
    	if (src$1(Obj, 'enumerable')) {
    		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
    	}
    	if (src$1(Obj, 'configurable')) {
    		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
    	}
    	if (src$1(Obj, 'value')) {
    		desc['[[Value]]'] = Obj.value;
    	}
    	if (src$1(Obj, 'writable')) {
    		desc['[[Writable]]'] = ToBoolean(Obj.writable);
    	}
    	if (src$1(Obj, 'get')) {
    		var getter = Obj.get;
    		if (typeof getter !== 'undefined' && !IsCallable(getter)) {
    			throw new $TypeError$4('getter must be a function');
    		}
    		desc['[[Get]]'] = getter;
    	}
    	if (src$1(Obj, 'set')) {
    		var setter = Obj.set;
    		if (typeof setter !== 'undefined' && !IsCallable(setter)) {
    			throw new $TypeError$4('setter must be a function');
    		}
    		desc['[[Set]]'] = setter;
    	}

    	if ((src$1(desc, '[[Get]]') || src$1(desc, '[[Set]]')) && (src$1(desc, '[[Value]]') || src$1(desc, '[[Writable]]'))) {
    		throw new $TypeError$4('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
    	}
    	return desc;
    };

    var $TypeError$3 = getIntrinsic$1('%TypeError%');












    // https://ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow

    var DefinePropertyOrThrow = function DefinePropertyOrThrow(O, P, desc) {
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$3('Assertion failed: Type(O) is not Object');
    	}

    	if (!IsPropertyKey(P)) {
    		throw new $TypeError$3('Assertion failed: IsPropertyKey(P) is not true');
    	}

    	var Desc = isPropertyDescriptor({
    		Type: Type,
    		IsDataDescriptor: IsDataDescriptor,
    		IsAccessorDescriptor: IsAccessorDescriptor
    	}, desc) ? desc : ToPropertyDescriptor(desc);
    	if (!isPropertyDescriptor({
    		Type: Type,
    		IsDataDescriptor: IsDataDescriptor,
    		IsAccessorDescriptor: IsAccessorDescriptor
    	}, Desc)) {
    		throw new $TypeError$3('Assertion failed: Desc is not a valid Property Descriptor');
    	}

    	return DefineOwnProperty(
    		IsDataDescriptor,
    		SameValue,
    		FromPropertyDescriptor,
    		O,
    		P,
    		Desc
    	);
    };

    var IsConstructor = createCommonjsModule$2(function (module) {



    var $construct = GetIntrinsic('%Reflect.construct%', true);

    var DefinePropertyOrThrow$1 = DefinePropertyOrThrow;
    try {
    	DefinePropertyOrThrow$1({}, '', { '[[Get]]': function () {} });
    } catch (e) {
    	// Accessor properties aren't supported
    	DefinePropertyOrThrow$1 = null;
    }

    // https://ecma-international.org/ecma-262/6.0/#sec-isconstructor

    if (DefinePropertyOrThrow$1 && $construct) {
    	var isConstructorMarker = {};
    	var badArrayLike = {};
    	DefinePropertyOrThrow$1(badArrayLike, 'length', {
    		'[[Get]]': function () {
    			throw isConstructorMarker;
    		},
    		'[[Enumerable]]': true
    	});

    	module.exports = function IsConstructor(argument) {
    		try {
    			// `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:
    			$construct(argument, badArrayLike);
    		} catch (err) {
    			return err === isConstructorMarker;
    		}
    	};
    } else {
    	module.exports = function IsConstructor(argument) {
    		// unfortunately there's no way to truly check this without try/catch `new argument` in old environments
    		return typeof argument === 'function' && !!argument.prototype;
    	};
    }
    });

    var $species = getIntrinsic$1('%Symbol.species%', true);
    var $TypeError$2 = getIntrinsic$1('%TypeError%');




    // https://ecma-international.org/ecma-262/6.0/#sec-speciesconstructor

    var SpeciesConstructor = function SpeciesConstructor(O, defaultConstructor) {
    	if (Type(O) !== 'Object') {
    		throw new $TypeError$2('Assertion failed: Type(O) is not Object');
    	}
    	var C = O.constructor;
    	if (typeof C === 'undefined') {
    		return defaultConstructor;
    	}
    	if (Type(C) !== 'Object') {
    		throw new $TypeError$2('O.constructor is not an Object');
    	}
    	var S = $species ? C[$species] : void 0;
    	if (S == null) {
    		return defaultConstructor;
    	}
    	if (IsConstructor(S)) {
    		return S;
    	}
    	throw new $TypeError$2('no constructor found');
    };

    // var Construct = require('es-abstract/2021/Construct');










    var $indexOf$2 = callBound$1('String.prototype.indexOf');

    var OrigRegExp = RegExp;

    var supportsConstructingWithFlags = 'flags' in RegExp.prototype;

    var constructRegexWithFlags = function constructRegex(C, R) {
    	var matcher;
    	// workaround for older engines that lack RegExp.prototype.flags
    	var flags = 'flags' in R ? Get(R, 'flags') : ToString(regexp_prototype_flags(R));
    	if (supportsConstructingWithFlags && typeof flags === 'string') {
    		matcher = new C(R, flags);
    	} else if (C === OrigRegExp) {
    		// workaround for older engines that can not construct a RegExp with flags
    		matcher = new C(R.source, flags);
    	} else {
    		matcher = new C(R, flags);
    	}
    	return { flags: flags, matcher: matcher };
    };

    var regexMatchAll = function SymbolMatchAll(string) {
    	var R = this;
    	if (Type(R) !== 'Object') {
    		throw new TypeError('"this" value must be an Object');
    	}
    	var S = ToString(string);
    	var C = SpeciesConstructor(R, OrigRegExp);

    	var tmp = constructRegexWithFlags(C, R);
    	// var flags = ToString(Get(R, 'flags'));
    	var flags = tmp.flags;
    	// var matcher = Construct(C, [R, flags]);
    	var matcher = tmp.matcher;

    	var lastIndex = ToLength(Get(R, 'lastIndex'));
    	_Set(matcher, 'lastIndex', lastIndex, true);
    	var global = $indexOf$2(flags, 'g') > -1;
    	var fullUnicode = $indexOf$2(flags, 'u') > -1;
    	return CreateRegExpStringIterator(matcher, S, global, fullUnicode);
    };

    var defineP$1 = Object.defineProperty;
    var gOPD$1 = Object.getOwnPropertyDescriptor;

    if (defineP$1 && gOPD$1) {
    	var desc = gOPD$1(regexMatchAll, 'name');
    	if (desc && desc.configurable) {
    		defineP$1(regexMatchAll, 'name', { value: '[Symbol.matchAll]' });
    	}
    }

    var regexpMatchall = regexMatchAll;

    var hasSymbols$3 = hasSymbols$7();


    var polyfillRegexpMatchall = function getRegExpMatchAllPolyfill() {
    	if (!hasSymbols$3 || typeof Symbol.matchAll !== 'symbol' || typeof RegExp.prototype[Symbol.matchAll] !== 'function') {
    		return regexpMatchall;
    	}
    	return RegExp.prototype[Symbol.matchAll];
    };

    var hasSymbols$2 = hasSymbols$7();


    var $indexOf$1 = callBound$1('String.prototype.indexOf');



    var getMatcher = function getMatcher(regexp) { // eslint-disable-line consistent-return
    	var matcherPolyfill = polyfillRegexpMatchall();
    	if (hasSymbols$2 && typeof Symbol.matchAll === 'symbol') {
    		var matcher = GetMethod$1(regexp, Symbol.matchAll);
    		if (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {
    			return matcherPolyfill;
    		}
    		return matcher;
    	}
    	// fallback for pre-Symbol.matchAll environments
    	if (IsRegExp(regexp)) {
    		return matcherPolyfill;
    	}
    };

    var implementation = function matchAll(regexp) {
    	var O = RequireObjectCoercible(this);

    	if (typeof regexp !== 'undefined' && regexp !== null) {
    		var isRegExp = IsRegExp(regexp);
    		if (isRegExp) {
    			// workaround for older engines that lack RegExp.prototype.flags
    			var flags = 'flags' in regexp ? Get(regexp, 'flags') : regexp_prototype_flags(regexp);
    			RequireObjectCoercible(flags);
    			if ($indexOf$1(ToString(flags), 'g') < 0) {
    				throw new TypeError('matchAll requires a global regular expression');
    			}
    		}

    		var matcher = getMatcher(regexp);
    		if (typeof matcher !== 'undefined') {
    			return Call(matcher, regexp, [O]);
    		}
    	}

    	var S = ToString(O);
    	// var rx = RegExpCreate(regexp, 'g');
    	var rx = new RegExp(regexp, 'g');
    	return Call(getMatcher(rx), rx, [S]);
    };

    var polyfill = function getPolyfill() {
    	if (String.prototype.matchAll) {
    		try {
    			''.matchAll(RegExp.prototype);
    		} catch (e) {
    			return String.prototype.matchAll;
    		}
    	}
    	return implementation;
    };

    var hasSymbols = hasSymbols$7();



    var defineP = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;

    var shim = function shimMatchAll() {
    	var polyfill$1 = polyfill();
    	defineProperties_1(
    		String.prototype,
    		{ matchAll: polyfill$1 },
    		{ matchAll: function () { return String.prototype.matchAll !== polyfill$1; } }
    	);
    	if (hasSymbols) {
    		// eslint-disable-next-line no-restricted-properties
    		var symbol = Symbol.matchAll || (Symbol['for'] ? Symbol['for']('Symbol.matchAll') : Symbol('Symbol.matchAll'));
    		defineProperties_1(
    			Symbol,
    			{ matchAll: symbol },
    			{ matchAll: function () { return Symbol.matchAll !== symbol; } }
    		);

    		if (defineP && gOPD) {
    			var desc = gOPD(Symbol, symbol);
    			if (!desc || desc.configurable) {
    				defineP(Symbol, symbol, {
    					configurable: false,
    					enumerable: false,
    					value: symbol,
    					writable: false
    				});
    			}
    		}

    		var regexpMatchAll = polyfillRegexpMatchall();
    		var func = {};
    		func[symbol] = regexpMatchAll;
    		var predicate = {};
    		predicate[symbol] = function () {
    			return RegExp.prototype[symbol] !== regexpMatchAll;
    		};
    		defineProperties_1(RegExp.prototype, func, predicate);
    	}
    	return polyfill$1;
    };

    var boundMatchAll = callBind$1(implementation);

    defineProperties_1(boundMatchAll, {
    	getPolyfill: polyfill,
    	implementation: implementation,
    	shim: shim
    });

    var DerUtility = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Asn1Der = exports.X500NamesLabels = void 0;



    const Asn1DerTagByType = {
        END_OF_CONTENT: 0,
        BOOLEAN: 1,
        INTEGER: 2,
        BIT_STRING: 3,
        OCTET_STRING: 4,
        NULL_VALUE: 5,
        OBJECT_ID: 6,
        OBJECT_DESCRIPTOR: 7,
        EXTERNAL: 8,
        REAL: 9,
        ENUMERATED: 10,
        EMBEDDED_PDV: 11,
        UTF8STRING: 12,
        RELATIVE_OID: 13,
        //reserved: 14,
        //reserved: 15,
        SEQUENCE_10: 16,
        SET_OF: 17,
        NUMERABLE_STRING: 18,
        PRINTABLE_STRING: 19,
        T61STRING: 20,
        VIDEO_TEX_STRING: 21,
        IA5STRING: 22,
        UTC_TIME: 23,
        GENERALIZED_TIME: 24,
        // SimpleDateFormat dateF = new SimpleDateFormat("yyyyMMddHHmmss'Z'", DateUtil.EN_Locale);
        // dateF.setTimeZone(new SimpleTimeZone(0, "Z"));
        // time = Strings.toByteArray(dateF.format(time));
        GRAPHIC_STRING: 25,
        VISIBLE_STRING: 26,
        GENERAL_STRING: 27,
        UNIVERSAL_STRING: 28,
        CHARACTER_STRING: 29,
        BMP_STRING: 30,
        //long_form: 31,
        SEQUENCE_30: 48,
        SET: 49
    };
    const Asn1DerTagById = {
        0: "END_OF_CONTENT",
        1: "BOOLEAN",
        2: "INTEGER",
        3: "BIT_STRING",
        4: "OCTET_STRING",
        5: "NULL_VALUE",
        6: "OBJECT_ID",
        7: "OBJECT_DESCRIPTOR",
        8: "EXTERNAL",
        9: "REAL",
        10: "ENUMERATED",
        11: "EMBEDDED_PDV",
        12: "UTF8STRING",
        13: "RELATIVE_OID",
        16: "SEQUENCE_10",
        19: "PRINTABLE_STRING",
        22: "IA5STRING",
        24: "GENERALIZED_TIME",
        26: "VISIBLE_STRING",
        48: "SEQUENCE_30",
        49: "SET",
    };
    exports.X500NamesLabels = {
        'CN': "2.5.4.3",
        'C': "2.5.4.6",
        'O': "2.5.4.10",
        'OU': "2.5.4.11",
        'L': "2.5.4.7",
        'labeledURI': "1.3.6.1.4.1.250.1.57"
    };
    class Asn1Der {
        static encodeAsInteger(value) {
            return this.encode('INTEGER', value);
        }
        static encodeObjectId(objectId) {
            return Asn1Der.encode('SEQUENCE_30', Asn1Der.encode('OBJECT_ID', objectId));
        }
        static parseX500Names(str) {
            let matches = str.matchAll(/(\w+)=("[^"]+"|[\w\.]+)/g);
            let alg = '';
            if (!matches) {
                throw new Error('wrong Name format');
            }
            let result = [];
            for (const match of matches) {
                let type = match[1];
                let value = match[2];
                // remove quotes if exists
                if (value.substr(0, 1) == "\"" && value.substr(-1) == "\"") {
                    value = value.slice(1, value.length - 1);
                }
                alg = exports.X500NamesLabels[type];
                if (!alg)
                    throw new Error('Type "' + type + '" not implemented yet');
                result.push({ type, value });
            }
            return result;
        }
        static encodeName(str) {
            let set = '';
            let dataArr = Asn1Der.parseX500Names(str);
            dataArr.forEach((item) => {
                let OID = exports.X500NamesLabels[item.type];
                if (!OID) {
                    throw new Error(`X500 Name Object ID not implemented.(${item.value})`);
                }
                let itemData = Asn1Der.encode('OBJECT_ID', OID) + Asn1Der.encode('UTF8STRING', item.value);
                set += Asn1Der.encode('SEQUENCE_30', itemData);
            });
            return Asn1Der.encode('SEQUENCE_30', Asn1Der.encode('SET', set));
        }
        static encode(type, value, id = 0) {
            if (typeof value === "undefined") {
                throw new Error('Missing value for Der encoding');
            }
            let encType = Asn1DerTagByType[type];
            let encValue = '';
            switch (type) {
                case 'OBJECT_ID':
                    if (typeof value !== "string") {
                        throw new Error('OBJECT_ID value must be a string');
                    }
                    let valArr = value.split('.');
                    let v1 = valArr.shift();
                    let v2 = valArr.shift();
                    valArr.unshift((parseInt(v1) * 40 + parseInt(v2)).toString());
                    valArr.forEach(v => {
                        let num = parseInt(v);
                        let singleVal = '';
                        let firstByte = true;
                        do {
                            let tail127 = num & 127;
                            num = num >> 7;
                            tail127 += firstByte ? 0 : 128;
                            singleVal = tail127.toString(16).padStart(2, '0') + singleVal;
                            firstByte = false;
                        } while (num);
                        encValue += singleVal;
                    });
                    break;
                case "NULL_VALUE":
                    encValue = '';
                    break;
                case 'GENERALIZED_TIME':
                    encValue = (0, utils$1.stringToHex)((0, utils$1.formatGeneralizedDateTime)(value));
                    break;
                case "VISIBLE_STRING":
                case "UTF8STRING":
                    encValue = (0, utils$1.stringToHex)(value);
                    break;
                case 'INTEGER':
                    encValue = BigInt(value).toString(16);
                    encValue = (encValue.length % 2 ? '0' : '') + encValue;
                    if (parseInt('0x' + encValue.slice(0, 1), 16) > 7) {
                        encValue = '00' + encValue;
                    }
                    break;
                case 'TAG':
                    if (id > 15) {
                        throw new Error('DER TAG more than 15 is not implemented');
                    }
                    encType = parseInt('0xA' + id);
                case "SEQUENCE_30":
                case "SET":
                case "OCTET_STRING":
                    if (typeof value == "string") {
                        // suppose that its already encoded
                        encValue = value;
                    }
                    else if (value.constructor === Uint8Array) {
                        encValue = (0, utils$1.uint8tohex)(value);
                    }
                    else {
                        throw new Error('Wrong data type for OCTET_STRING');
                    }
                    break;
                case "BIT_STRING":
                    encValue = '00' + value;
                    break;
                case "BOOLEAN":
                    encValue = parseInt(value).toString().padStart(2, '0');
                    break;
                default:
                    throw new Error('Sorry, ' + type + ' not implemented.');
            }
            // TODO maybe worth it to code indefinite form
            // 8.1.3.6	For the indefinite form, the length octets indicate that the contents octets are terminated by end-of-contents octets (see 8.1.5), and shall consist of a single octet.
            // 8.1.3.6.1	The single octet shall have bit 8 set to one, and bits 7 to 1 set to zero.
            // 8.1.3.6.2	If this form of length is used, then end-of-contents octets (see 8.1.5) shall be present in the encoding following the contents octets.
            let encLength = '';
            let dataLength = Math.ceil(encValue.length / 2);
            let dataLengthHex = dataLength.toString(16);
            if (!dataLength)
                dataLengthHex = '00';
            dataLengthHex = (dataLengthHex.length % 2 ? '0' : '') + dataLengthHex;
            if (dataLength < 128) {
                encLength = dataLengthHex;
            }
            else {
                encLength = (128 + Math.round(dataLengthHex.length / 2)).toString(16) + dataLengthHex;
            }
            encValue = (encValue.length % 2 ? '0' : '') + encValue;
            return encType.toString(16).padStart(2, '0') + encLength + encValue;
        }
        decode(byteArray) {
            let arr = Array.from(byteArray);
            return this.read(arr);
        }
        lenEncoded(derArr) {
            let b1 = derArr.shift();
            if (b1 < 128) {
                return b1;
            }
            else if (b1 > 128) {
                let extLength = 0;
                for (let i = 0; i < (b1 - 128); i++) {
                    extLength = (extLength << 8) + derArr.shift();
                }
                return extLength;
            }
            else if (b1 == 128) {
                throw new Error('have to code variable length');
            }
        }
        readFromHexString(str) {
            return this.read((0, utils$1.hexStringToArray)(str));
        }
        readFromUint8Array(u8) {
            return this.read(Array.from(u8));
        }
        readFromBase64String(base64str) {
            return this.readFromUint8Array((0, utils$1.base64ToUint8array)(base64str));
        }
        readFromUrlBase64String(urlBase64str) {
            let base64str = urlBase64str
                .split('_').join('/')
                .split('-').join('+')
                .split('.').join('=');
            // .replace('.','');
            return this.readFromBase64String(base64str);
        }
        read(derArr) {
            let typeTag = derArr.shift();
            let len = this.lenEncoded(derArr);
            let typeTagName = Asn1DerTagById[typeTag];
            (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, "Der utility typeTagName:" + typeTagName);
            let content = [];
            for (let i = 0; i < len; i++) {
                content.push(derArr.shift());
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, "Der Utility content");
            (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, content);
            let outputStr = '';
            switch (typeTagName) {
                case "SEQUENCE_30":
                    return this.BodySequence(content);
                case "INTEGER":
                case "BIT_STRING":
                    let output = 0n;
                    while (content.length) {
                        output = output << 8n;
                        output += BigInt(content.shift());
                    }
                    return output;
                case "OCTET_STRING":
                    while (content.length) {
                        outputStr += content.shift().toString(16).padStart(2, '0');
                    }
                    return outputStr;
                case "GENERALIZED_TIME":
                case "VISIBLE_STRING":
                    while (content.length) {
                        outputStr += String.fromCharCode(content.shift());
                    }
                    return outputStr;
            }
        }
        BodySequence(derArr) {
            let entries = [];
            while (derArr.length) {
                entries.push(this.read(derArr));
            }
            return entries;
        }
    }
    exports.Asn1Der = Asn1Der;

    });

    var UsageProofOfExponent_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsageProofOfExponent = void 0;





    class UsageProofOfExponent {
        constructor() {
        }
        static fromData(tPoint, challengeResponse, nonce = new Uint8Array([])) {
            let me = new this();
            me.tPoint = tPoint;
            me.challengeResponse = challengeResponse;
            me.nonce = nonce;
            me.encoding = me.makeEncoding();
            return me;
        }
        fromBase64(base64DerEncoded) {
            this.encoding = base64DerEncoded;
            this.fromBytes((0, utils$1.base64ToUint8array)(base64DerEncoded));
        }
        fromBytes(bytes) {
            this.encodingBytes = bytes;
            // UsageProof
            let usageProof = asn1_schema_1.AsnParser.parse(bytes, ProofOfExponentASN.UsageProof);
            this.challengeResponse = (0, utils$1.uint8ToBn)(new Uint8Array(usageProof.challengePoint));
            let tPointEnc = new Uint8Array(usageProof.responseValue);
            this.nonce = new Uint8Array(usageProof.nonce);
            this.tPoint = Point_1.Point.decodeFromHex((0, utils$1.uint8tohex)(tPointEnc), Point_1.CURVE_BN256);
        }
        makeEncoding() {
            let res = DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)((0, utils$1.bnToUint8)(this.challengeResponse))) +
                DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(this.tPoint.getEncoded(false))) +
                DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(this.nonce));
            return DerUtility.Asn1Der.encode('SEQUENCE_30', res);
        }
        getPoint() {
            return this.tPoint;
        }
        getChallengeResponse() {
            return this.challengeResponse;
        }
        getDerEncoding() {
            return this.encoding;
        }
        getNonce() {
            return this.nonce;
        }
    }
    exports.UsageProofOfExponent = UsageProofOfExponent;

    });

    var FullProofOfExponent_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FullProofOfExponent = void 0;






    class FullProofOfExponent {
        constructor() { }
        static fromData(riddle, tPoint, challengeResponse, nonce = new Uint8Array([])) {
            let me = new this();
            me.riddle = riddle;
            me.tPoint = tPoint;
            me.challengeResponse = challengeResponse;
            me.nonce = nonce;
            me.encoding = me.makeEncoding(riddle, tPoint, challengeResponse, nonce);
            return me;
        }
        static fromBytes(uint8data) {
            let proof = asn1_schema_1.AsnParser.parse(uint8data, ProofOfExponentASN.Proof);
            return this.fromASNType(proof);
        }
        static fromASNType(proof) {
            let riddleEnc = new Uint8Array(proof.riddle);
            let riddle = Point_1.Point.decodeFromUint8(riddleEnc, Point_1.CURVE_BN256);
            let challengeEnc = new Uint8Array(proof.challengePoint);
            let challengeResponse = (0, utils$1.uint8ToBn)(challengeEnc);
            let tPointEnc = new Uint8Array(proof.responseValue);
            let tPoint = Point_1.Point.decodeFromUint8(tPointEnc, Point_1.CURVE_BN256);
            let nonce = new Uint8Array(proof.nonce);
            return this.fromData(riddle, tPoint, challengeResponse, nonce);
        }
        static fromBase64(base64DerEncoded) {
            return FullProofOfExponent.fromBytes((0, utils$1.base64ToUint8array)(base64DerEncoded));
        }
        makeEncoding(riddle, tPoint, challengeResponse, nonce = new Uint8Array([])) {
            let proof = DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(riddle.getEncoded()))
                + DerUtility.Asn1Der.encode('OCTET_STRING', challengeResponse.toString(16))
                + DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(tPoint.getEncoded()))
                + DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(nonce));
            return DerUtility.Asn1Der.encode('SEQUENCE_30', proof);
        }
        getRiddle() {
            return this.riddle;
        }
        getPoint() {
            return this.tPoint;
        }
        getChallengeResponse() {
            return this.challengeResponse;
        }
        getNonce() {
            return this.nonce;
        }
        getUsageProofOfExponent() {
            return UsageProofOfExponent_1.UsageProofOfExponent.fromData(this.tPoint, this.challengeResponse, this.nonce);
        }
        getDerEncoding() {
            return this.encoding;
        }
        getAsnType() {
            const proof = new ProofOfExponentASN.Proof();
            proof.nonce = this.getNonce();
            let point = (0, utils$1.bnToUint8)(this.getChallengeResponse());
            if (point.length < 32) {
                let prevPoint = point;
                point = new Uint8Array(32);
                point.set(prevPoint, 32 - prevPoint.length);
            }
            proof.challengePoint = point;
            proof.riddle = this.getRiddle().getEncoded();
            proof.responseValue = this.getPoint().getEncoded();
            return proof;
        }
    }
    exports.FullProofOfExponent = FullProofOfExponent;

    });

    var AttestationCrypto_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttestationCrypto = exports.Pedestren_H = exports.Pedestren_G = void 0;







    // Generator for message part of Pedersen commitments generated deterministically from mapToInteger queried on 0 and mapped to the curve using try-and-increment
    exports.Pedestren_G = new Point_1.Point(21282764439311451829394129092047993080259557426320933158672611067687630484067n, 3813889942691430704369624600187664845713336792511424430006907067499686345744n, Point_1.CURVE_BN256);
    exports.Pedestren_H = new Point_1.Point(10844896013696871595893151490650636250667003995871483372134187278207473369077n, 9393217696329481319187854592386054938412168121447413803797200472841959383227n, Point_1.CURVE_BN256);
    class AttestationCrypto {
        constructor() {
            this.curveOrderBitLength = 254n;
            this.rand = this.makeSecret();
            // if (mod(CURVE_BN256.P,4n) != 3n) {
            //     throw new Error("The crypto will not work with this choice of curve");
            // }
            if (!this.verifyCurveOrder(Point_1.CURVE_BN256.n)) {
                throw new Error("Static values do not work with current implementation");
            }
        }
        verifyCurveOrder(curveOrder) {
            // Verify that the curve order is less than 2^256 bits, which is required by mapToCurveMultiplier
            // Specifically checking if it is larger than 2^curveOrderBitLength and that no bits at position curveOrderBitLength+1 or larger are set
            let curveOrderBitLength = BigInt(curveOrder.toString(2).length);
            if (curveOrder < (1n << (curveOrderBitLength - 1n)) || (curveOrder >> curveOrderBitLength) > 0n) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Curve order is not 253 bits which is required by the current implementation");
                return false;
            }
            return true;
        }
        getType(type) {
            switch (type.toLowerCase()) {
                case "mail":
                    return interfaces.ATTESTATION_TYPE.mail;
                case "phone":
                    return interfaces.ATTESTATION_TYPE.phone;
                case "inetpersona":
                    return interfaces.ATTESTATION_TYPE.InetPersona;
                default:
                    throw new Error("Wrong type of identifier");
            }
        }
        // makeRiddle(identifier: string, type: number, secret: bigint): Uint8Array {
        //     let hashedIdentifier = this.hashIdentifier(type, identifier);
        //     return hashedIdentifier.multiplyDA(secret).getEncoded(false);
        // }
        /**
         * Construct a Pedersen commitment to an identifier using a specific secret.
         * @param identifier The common identifier
         * @param type The type of identifier
         * @param secret The secret randomness to be used in the commitment
         * @return
         */
        makeCommitment(identifier, type, secret) {
            let hashedIdentifier = this.mapToCurveMultiplier(type, identifier);
            let commitment = exports.Pedestren_G.multiplyDA(hashedIdentifier).add(exports.Pedestren_H.multiplyDA(secret));
            return commitment.getEncoded(false);
            // let hiding:Point = Pedestren_H.multiplyDA(secret);
            // return this.makeCommitmentFromHiding(identifier, type, hiding);
        }
        /**
         * Constructs a commitment to an identifier based on hidden randomization supplied from a user.
         * This is used to construct an attestation.
         * @param identifier The user's identifier.
         * @param type The type of identifier.
         * @param hiding The hiding the user has picked
         * @return
         */
        makeCommitmentFromHiding(identifier, type, hiding) {
            // let hashedIdentifier:bigint = this.mapToIntegerIntString(type, identifier);
            let hashedIdentifier = this.mapToCurveMultiplier(type, identifier);
            // Construct Pedersen commitment
            let commitment = exports.Pedestren_G.multiplyDA(hashedIdentifier).add(hiding);
            return commitment.getEncoded(false);
        }
        // TODO use type
        // hashIdentifier(type: number , identifier: string): Point {
        //     let idenNum = this.mapToInteger(type, Uint8Array.from(stringToArray(identifier.trim().toLowerCase())));
        //     // logger(DEBUGLEVEL.HIGH, `idenNum(for base point) = ${idenNum}`);
        //     return this.computePoint_bn256(idenNum);
        // }
        injectIdentifierType(type, arr) {
            // add prefix [0,0,0,1] for email type
            return (0, utils$1.uint8merge)([Uint8Array.from([0, 0, 0, type]), arr]);
        }
        mapToInteger(arr) {
            return BigInt('0x' + sha3.keccak256(arr)) >> (256n - this.curveOrderBitLength);
        }
        mapToCurveMultiplier(type, identifier) {
            let identifierBytes = Uint8Array.from((0, utils$1.stringToArray)(identifier.trim().toLowerCase()));
            let uintArr = this.injectIdentifierType(type, identifierBytes);
            let sampledVal = (0, utils$1.uint8ToBn)(uintArr);
            do {
                sampledVal = this.mapToInteger((0, utils$1.bnToUint8)(sampledVal));
            } while (sampledVal >= Point_1.CURVE_BN256.n);
            return sampledVal;
        }
        // mapToIntegerFromUint8(arr: Uint8Array ):bigint {
        //     let hash0: string = sha3.keccak256( uint8merge([Uint8Array.from([0]),arr]) );
        //     let hash1: string = sha3.keccak256( uint8merge([Uint8Array.from([1]),arr]) );
        //
        //     return BigInt('0x' + hash0 + hash1);
        // }
        // computePoint_SECP256k1( x: bigint ): Point {
        //     x = mod ( x );
        //     let y = 0n, expected = 0n, ySquare = 0n;
        //     let resPoint,referencePoint: Point;
        //     let p = CURVE_SECP256k1.P;
        //     let a = CURVE_SECP256k1.A;
        //     let b = CURVE_SECP256k1.B;
        //     do {
        //         do {
        //             x = mod(x + 1n);
        //             ySquare = mod(BnPowMod(x, 3n, p) + a * x + b);
        //             y = BnPowMod(ySquare, CURVE_SECP256k1.magicExp, p);
        //             expected = mod(y * y);
        //         } while (expected !== ySquare);
        //         resPoint = new Point(x, y);
        //         // TODO add Point.negate() and use following logic
        //         // Ensure that we have a consistent choice of which "sign" of y we use. We always use the smallest possible value of y
        //         if (resPoint.y > (p / 2n)) {
        //             resPoint = new Point(x, p - y);
        //         }
        //         referencePoint = resPoint.multiplyDA(CURVE_SECP256k1.n - 1n);
        //         if (referencePoint.y > (p / 2n)) {
        //             referencePoint = new Point(referencePoint.x, p - referencePoint.y);
        //         }
        //     } while (!resPoint.equals(referencePoint))
        //     return resPoint;
        // }
        computePoint_bn256(x) {
            let fieldSize = Point_1.CURVE_BN256.P;
            x = (0, utils$1.mod)(x, fieldSize);
            let y = 0n, ySquare = 0n;
            let resPoint, referencePoint;
            let quadraticResidue;
            let magicExp = (fieldSize + 1n) >> 2n; // fieldSize + 1 / 4
            let quadraticResidueExp = (fieldSize - 1n) >> 1n;
            do {
                do {
                    x = (0, utils$1.mod)(x + 1n);
                    ySquare = (0, utils$1.mod)((0, utils$1.BnPowMod)(x, 3n, fieldSize) + Point_1.CURVE_BN256.A * x + Point_1.CURVE_BN256.B);
                    quadraticResidue = (0, utils$1.BnPowMod)(ySquare, quadraticResidueExp, fieldSize);
                } while (quadraticResidue !== 1n);
                // We use the Lagrange trick to compute the squareroot (since fieldSize mod 4=3)
                y = (0, utils$1.BnPowMod)(ySquare, magicExp, fieldSize);
                resPoint = new Point_1.Point(x, y, Point_1.CURVE_BN256);
                // Ensure that we have a consistent choice of which "sign" of y we use. We always use the smallest possible value of y
                if (resPoint.x > (fieldSize >> 1n)) {
                    resPoint = new Point_1.Point(x, fieldSize - y, Point_1.CURVE_BN256);
                }
                referencePoint = resPoint.multiplyDA(Point_1.CURVE_BN256.n - 1n);
                if (referencePoint.y > (fieldSize >> 1n)) {
                    referencePoint = new Point_1.Point(referencePoint.x, fieldSize - referencePoint.y, Point_1.CURVE_BN256);
                }
                // Verify that the element is a member of the expected (subgroup) by ensuring that it has the right order, through Fermat's little theorem
                // NOTE: this is ONLY needed if we DON'T use secp256k1, so currently it is superflous but we are keeping it this check is crucial for security on most other curves!
            } while (!resPoint.equals(referencePoint) || resPoint.isInfinity());
            return resPoint;
        }
        makeSecret(bytes = 48) {
            return (0, utils$1.mod)(BigInt(AttestationCrypto.generateRandomHexString(bytes)), Point_1.CURVE_BN256.n);
        }
        static generateRandomHexString(len) {
            var array = new Uint8Array(len);
            if (window && window.crypto) {
                window.crypto.getRandomValues(array);
            }
            else {
                array = new Uint8Array(require$$0$3.randomBytes(len));
            }
            let output = '0x';
            for (var i = 0; i < array.length; i++) {
                output += array[i].toString(16).padStart(2, '0');
            }
            return output;
        }
        /**
         * Computes a proof of knowledge of a random exponent
         * This is used to convince the attestor that the user knows a secret which the attestor will
         * then use to construct a Pedersen commitment to the user's identifier.
         * @param randomness The randomness used in the commitment
         * @return
         */
        computeAttestationProof(randomness, nonce = new Uint8Array([])) {
            // Compute the random part of the commitment, i.e. H^randomness
            let riddle = exports.Pedestren_H.multiplyDA(randomness);
            let challengeList = [exports.Pedestren_H, riddle];
            return this.constructSchnorrPOK(riddle, randomness, challengeList, nonce);
        }
        /**
         * Compute a proof that commitment1 and commitment2 are Pedersen commitments to the same message and that the user
         * knows randomness1-randomness2.
         * NOTE: We are actually not proving that the user knows the message and randomness1 and randomness2.
         * This is because we assume the user has already proven knowledge of his message (mail) and the
         * randomness1 used in the attestation to the attestor. Because of this assumption it is enough to prove
         * knowledge of randomness2 (equivalent to proving knowledge of randomness1-randomness2) and that the
         * commitments are to the same message.
         * The reason we do this is that this weaker proof is significantly cheaper to execute on the blockchain.
         *
         * In conclusion what this method actually proves is knowledge that randomness1-randomness2 is the
         * discrete log of commitment1/commitment2.
         * I.e. that commitment1/commitment2 =H^(randomness1-randomness2)
         * @param commitment1 First Pedersen commitment to some message m
         * @param commitment2 Second Pedersen commitment to some message m
         * @param randomness1 The randomness used in commitment1
         * @param randomness2 The randomness used in commitment2
         * @return
         */
        computeEqualityProof(commitment1, commitment2, randomness1, randomness2, nonce = new Uint8Array([])) {
            let comPoint1 = Point_1.Point.decodeFromHex(commitment1, Point_1.CURVE_BN256);
            let comPoint2 = Point_1.Point.decodeFromHex(commitment2, Point_1.CURVE_BN256);
            // Compute H*(randomness1-randomness2=commitment1-commitment2=G*msg+H*randomness1-G*msg+H*randomness2
            let riddle = comPoint1.subtract(comPoint2);
            let exponent = (0, utils$1.mod)(randomness1 - randomness2, Point_1.CURVE_BN256.n);
            let challengeList = [exports.Pedestren_H, comPoint1, comPoint2];
            return this.constructSchnorrPOK(riddle, exponent, challengeList, nonce).getUsageProofOfExponent();
        }
        /**
         * Constructs a Schnorr proof of knowledge of exponent of a riddle to base H.
         * The challenge value used (c) is computed from the challengeList and the internal t value.
         * The method uses rejection sampling to ensure that the t value is sampled s.t. the
         * challenge will always be less than curveOrder.
         */
        constructSchnorrPOK(riddle, exponent, challengePoints, nonce) {
            let t;
            let hiding, c, d;
            // Use rejection sampling to sample a hiding value s.t. the random oracle challenge c computed from it is less than curveOrder
            do {
                hiding = this.makeSecret();
                t = exports.Pedestren_H.multiplyDA(hiding);
                // c = this.mapToInteger(this.makeArray(challengeList.concat([t])));
                c = this.computeChallenge(t, challengePoints, nonce);
            } while (c >= Point_1.CURVE_BN256.n);
            d = (0, utils$1.mod)(hiding + c * exponent, Point_1.CURVE_BN256.n);
            return FullProofOfExponent_1.FullProofOfExponent.fromData(riddle, t, d, nonce);
        }
        computeChallenge(t, challengeList, nonce) {
            let finalChallengeList = challengeList.concat(t);
            let challengePointBytes = this.makeArray(finalChallengeList);
            let challengeBytes = (0, utils$1.uint8merge)([challengePointBytes, nonce]);
            return this.mapToInteger(challengeBytes);
        }
        /**
         * Verifies a zero knowledge proof of knowledge of a riddle used in an attestation request
         * @param pok The proof to verify
         * @return True if the proof is OK and false otherwise
         */
        verifyFullProof(pok) {
            // let c:bigint = this.mapToInteger(this.makeArray([Pedestren_H, pok.getRiddle(), pok.getPoint()]));
            let c = this.computeChallenge(pok.getPoint(), [exports.Pedestren_H, pok.getRiddle()], pok.getNonce());
            return this.verifyPok(pok, c);
        }
        /**
         * Verifies a zero knowledge proof of knowledge of the two riddles used in two different
         * commitments to the same message.
         * This is used by the smart contract to verify that a request is ok where one commitment is the
         * riddle for a cheque/ticket and the other is the riddle from an attesation.
         * @param pok The proof to verify
         * @return True if the proof is OK and false otherwise
         */
        verifyEqualityProof(commitment1, commitment2, pok) {
            let comPoint1 = Point_1.Point.decodeFromUint8(commitment1, Point_1.CURVE_BN256);
            let comPoint2 = Point_1.Point.decodeFromUint8(commitment2, Point_1.CURVE_BN256);
            // Compute the value the riddle should have
            let riddle = comPoint1.subtract(comPoint2);
            // let c: bigint = this.mapToInteger(this.makeArray([Pedestren_H, comPoint1, comPoint2, pok.getPoint()]));
            let c = this.computeChallenge(pok.getPoint(), [exports.Pedestren_H, comPoint1, comPoint2], pok.getNonce());
            return this.verifyPok(FullProofOfExponent_1.FullProofOfExponent.fromData(riddle, pok.getPoint(), pok.getChallengeResponse(), pok.getNonce()), c);
        }
        verifyPok(pok, c) {
            // Check that the c has been sampled correctly using rejection sampling
            if (c >= Point_1.CURVE_BN256.n) {
                return false;
            }
            let lhs = exports.Pedestren_H.multiplyDA(pok.getChallengeResponse());
            let rhs = pok.getRiddle().multiplyDA(c).add(pok.getPoint());
            return lhs.equals(rhs);
        }
        // computeProof(base: Point, riddle: Point, exponent: bigint): ProofOfExponent{
        //     let r: bigint = this.makeSecret();
        //     let t: Point = base.multiplyDA(r);
        //     // TODO ideally Bob's ethreum address should also be part of the challenge
        //     let c: bigint = mod(this.mapToIntegerFromUint8(this.makeArray([base, riddle, t])), CURVE_BN256.n);
        //     let d: bigint = mod(r + c * exponent, CURVE_BN256.n);
        //     return  new ProofOfExponent(base, riddle, t, d);
        // }
        makeArray(pointArray) {
            let output = new Uint8Array(0);
            pointArray.forEach((item) => {
                output = new Uint8Array([...output, ...item.getEncoded(false)]);
            });
            return output;
        }
        // verifyProof(pok: ProofOfExponent)  {
        //     let c = mod(this.mapToIntegerFromUint8(this.makeArray([pok.getBase(), pok.getRiddle(), pok.getPoint()])), CURVE_BN256.n);
        //     let lhs: Point = pok.getBase().multiplyDA(pok.getChallenge());
        //     let rhs: Point = pok.getRiddle().multiplyDA(c).add(pok.getPoint());
        //     return lhs.equals(rhs);
        // }
        static hashWithKeccak(data) {
            return sha3.keccak256(data);
        }
    }
    exports.AttestationCrypto = AttestationCrypto;
    AttestationCrypto.OID_SIGNATURE_ALG = "1.2.840.10045.2.1";
    AttestationCrypto.BYTES_IN_DIGEST = 256 / 8;

    });

    var AttestableObject_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttestableObject = void 0;
    class AttestableObject {
        constructor() {
        }
        getDerEncoding() {
            return this.encoded;
        }
        getCommitment() {
            return this.commitment;
        }
    }
    exports.AttestableObject = AttestableObject;

    });

    var SignedDevconTicket_1 = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignedDevconTicket = exports.DevconTicket = void 0;

    // @AsnType({ type: AsnTypeTypes.Choice })
    // class StringOrInteger {
    //     @AsnProp({ type: AsnPropTypes.Integer}) public tiketIdNumber?: BigInt;
    //     @AsnProp({ type: AsnPropTypes.Utf8String }) public tiketIdString?: string;
    // }
    class DevconTicket {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Utf8String })
    ], DevconTicket.prototype, "devconId", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer, optional: true })
    ], DevconTicket.prototype, "ticketIdNumber", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Utf8String, optional: true })
    ], DevconTicket.prototype, "ticketIdString", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], DevconTicket.prototype, "ticketClass", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString, optional: true })
    ], DevconTicket.prototype, "commitment", void 0);
    exports.DevconTicket = DevconTicket;
    class SignedDevconTicket {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: DevconTicket })
    ], SignedDevconTicket.prototype, "ticket", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString, optional: true })
    ], SignedDevconTicket.prototype, "commitment", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.BitString })
    ], SignedDevconTicket.prototype, "signatureValue", void 0);
    exports.SignedDevconTicket = SignedDevconTicket;

    });

    var Ticket_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Ticket = void 0;






    class Ticket extends AttestableObject_1.AttestableObject {
        // protected encoded: string;
        constructor() {
            super();
            this.magicLinkURLPrefix = "https://ticket.devcon.org/";
            this.isLegasy = false;
        }
        fromData(devconId, ticketId, ticketClass, keys) {
            this.ticketId = ticketId;
            this.ticketClass = ticketClass;
            this.devconId = devconId;
            this.keys = keys;
            this.key = keys[devconId];
        }
        createWithCommitment(devconId, ticketId, ticketClass, commitment, signature, keys) {
            this.fromData(devconId, ticketId, ticketClass, keys);
            this.commitment = commitment;
            this.signature = signature;
            this.encoded = this.encodeSignedTicket(this.makeTicket());
            if (!this.verify()) {
                throw new Error("Ticket Signature is invalid");
            }
        }
        static createWithMail(mail, devconId, ticketId, ticketClass, keys, secret) {
            let me = new this();
            me.fromData(devconId, ticketId, ticketClass, keys);
            let crypto = new AttestationCrypto_1.AttestationCrypto();
            let signature;
            try {
                me.commitment = crypto.makeCommitment(mail, crypto.getType('mail'), secret);
                let asn1Tic = me.makeTicket();
                // signature = KeyPair.publicFromSubjectPublicKeyInfo( keys[me.devconId] ).signRawBytesWithEthereum(hexStringToArray(asn1Tic));
                signature = me.key.signRawBytesWithEthereum((0, utils$1.hexStringToArray)(asn1Tic));
            }
            catch (e) {
                throw new Error(e);
            }
            me.createWithCommitment(devconId, ticketId, ticketClass, me.commitment, signature, keys);
            return me;
        }
        makeTicket() {
            let ticketId;
            try {
                const asBN = BigInt(this.ticketId);
                ticketId = DerUtility.Asn1Der.encode('INTEGER', asBN);
            }
            catch (e) {
                ticketId = DerUtility.Asn1Der.encode('UTF8STRING', this.ticketId);
            }
            let ticket = DerUtility.Asn1Der.encode('UTF8STRING', this.devconId)
                + ticketId
                + DerUtility.Asn1Der.encode('INTEGER', this.ticketClass);
            if (!this.isLegasy) {
                ticket += DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(this.commitment));
            }
            return DerUtility.Asn1Der.encode('SEQUENCE_30', ticket);
        }
        encodeSignedTicket(ticket) {
            if (this.isLegasy) {
                ticket += DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(this.commitment));
            }
            ticket += DerUtility.Asn1Der.encode('BIT_STRING', this.signature);
            return DerUtility.Asn1Der.encode('SEQUENCE_30', ticket);
        }
        getDerEncodingWithPK() {
            let ticket = this.makeTicket();
            let signedTicket = ticket
                + DerUtility.Asn1Der.encode('OCTET_STRING', (0, utils$1.uint8tohex)(this.commitment))
                + this.key.getAsnDerPublic()
                + DerUtility.Asn1Der.encode('BIT_STRING', this.signature);
            return DerUtility.Asn1Der.encode('SEQUENCE_30', signedTicket);
        }
        getDerEncoding() {
            return this.encoded;
        }
        verify() {
            return this.key.verifyBytesWithEthereum((0, utils$1.hexStringToArray)(this.makeTicket()), this.signature);
        }
        checkValidity() {
            // The ticket is always valid on its own. It depends on which conference it is used
            // and whether it has been revoked that decides if it can be used
            return true;
        }
        getTicketId() {
            return this.ticketId;
        }
        getTicketClass() {
            return this.ticketClass;
        }
        getSignature() {
            return this.signature;
        }
        static fromBase64(base64str, keys) {
            let me = new this();
            me.fromBytes((0, utils$1.base64ToUint8array)(base64str), keys);
            return me;
        }
        fromBytes(bytes, keys) {
            const signedDevconTicket = asn1_schema_1.AsnParser.parse(bytes, SignedDevconTicket_1.SignedDevconTicket);
            let devconId = signedDevconTicket.ticket.devconId;
            if (!keys || !keys[devconId]) {
                throw new Error("Issuer key not defined.");
            }
            this.key = keys[devconId];
            let idAsNumber = signedDevconTicket.ticket.ticketIdNumber;
            let ticketId = idAsNumber ? idAsNumber.toString() : signedDevconTicket.ticket.ticketIdString;
            let ticketClassInt = signedDevconTicket.ticket.ticketClass;
            let commitment;
            if (signedDevconTicket.ticket.commitment) {
                commitment = signedDevconTicket.ticket.commitment;
            }
            else {
                commitment = signedDevconTicket.commitment;
                this.isLegasy = true;
            }
            let signature = signedDevconTicket.signatureValue;
            this.createWithCommitment(devconId, ticketId, ticketClassInt, new Uint8Array(commitment), (0, utils$1.uint8tohex)(new Uint8Array(signature)), keys);
        }
        getCommitment() {
            return this.commitment;
        }
        getKey() {
            return this.key;
        }
        getUrlEncoding() {
            // TODO implement
            // SubjectPublicKeyInfo keyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(this.publicKey);
            // return URLUtility.encodeList(Arrays.asList(this.encoded, keyInfo.getPublicKeyData().getEncoded()));
        }
    }
    exports.Ticket = Ticket;

    });

    var AuthenticationFramework = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Extensions = exports.Extension = exports.ValidityValue = exports.Version = exports.AlgorithmIdentifierASN = void 0;

    // import {Null} from "asn1js";
    class AlgorithmIdentifierASN {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.ObjectIdentifier })
    ], AlgorithmIdentifierASN.prototype, "algorithm", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any, optional: true })
    ], AlgorithmIdentifierASN.prototype, "parameters", void 0);
    exports.AlgorithmIdentifierASN = AlgorithmIdentifierASN;
    class Version {
        constructor() {
            this.version = 0; // Version ::= INTEGER { v1(0), v2(1), v3(2) }
        }
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], Version.prototype, "version", void 0);
    exports.Version = Version;
    // export class CertificateSerialNumber {
    //     @AsnProp({ type: AsnPropTypes.Integer }) public version: number = 0;
    // }
    // export class Time {
    //     @AsnProp({ type: AsnPropTypes.GeneralizedTime }) public generalizedTime: AsnPropTypes.GeneralizedTime;
    // }
    let Time = class Time {
    };
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.UTCTime })
    ], Time.prototype, "utcTime", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.GeneralizedTime })
    ], Time.prototype, "generalizedTime", void 0);
    Time = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Choice })
    ], Time);
    class ValidityValue {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: Time })
    ], ValidityValue.prototype, "notBefore", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer, optional: true })
    ], ValidityValue.prototype, "notBeforeInt", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: Time })
    ], ValidityValue.prototype, "notAfter", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer, optional: true })
    ], ValidityValue.prototype, "notAfterInt", void 0);
    exports.ValidityValue = ValidityValue;
    let Validity = class Validity {
    };
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: ValidityValue, context: 0 })
    ], Validity.prototype, "value", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer, context: 1 })
    ], Validity.prototype, "null", void 0);
    Validity = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Choice })
    ], Validity);
    class Extension {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.ObjectIdentifier })
    ], Extension.prototype, "extnId", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Boolean })
    ], Extension.prototype, "critical", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], Extension.prototype, "extnValue", void 0);
    exports.Extension = Extension;
    class Extensions {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: Extension })
    ], Extensions.prototype, "extension", void 0);
    exports.Extensions = Extensions;
    //
    // Extension ::= SEQUENCE {
    //     extnId		EXTENSION.&id,
    //         critical	BOOLEAN DEFAULT FALSE,
    //         extnValue	OCTET STRING
    //     -- contains a DER encoding of a value of type &ExtnType
    //     -- for the extension object identified by extnId
    // }

    });

    var InformationFramework = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RelativeDistinguishedName_1, RDNSequence_1;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Name = exports.AttributeTypeAndValue = void 0;

    /*
    // RelativeDistinguishedName ::=
    //     SET SIZE (1..MAX) OF AttributeTypeAndValue
    // @AsnType({ type: AsnTypeTypes.Set })
    export class RelativeDistinguishedName {
        @AsnProp({ type: AttributeTypeAndValue})
        public rdnSequence?: AttributeTypeAndValue;
    }

    // RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
    // export class RDNSequence {
    //     @AsnProp({ type: RelativeDistinguishedName})
    //     public rdnSequence?: RelativeDistinguishedName;
    // }
    // @AsnType({ type: AsnTypeTypes.Set })
    */
    class AttributeTypeAndValue {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.ObjectIdentifier })
    ], AttributeTypeAndValue.prototype, "type", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Utf8String })
    ], AttributeTypeAndValue.prototype, "value", void 0);
    exports.AttributeTypeAndValue = AttributeTypeAndValue;
    let RelativeDistinguishedName = RelativeDistinguishedName_1 = class RelativeDistinguishedName extends asn1_schema_1.AsnArray {
        constructor(items) {
            super(items);
            Object.setPrototypeOf(this, RelativeDistinguishedName_1.prototype);
        }
    };
    RelativeDistinguishedName = RelativeDistinguishedName_1 = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Set, itemType: AttributeTypeAndValue })
    ], RelativeDistinguishedName);
    let RDNSequence = RDNSequence_1 = class RDNSequence extends asn1_schema_1.AsnArray {
        constructor(items) {
            super(items);
            Object.setPrototypeOf(this, RDNSequence_1.prototype);
        }
    };
    RDNSequence = RDNSequence_1 = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Sequence, itemType: RelativeDistinguishedName })
    ], RDNSequence);
    let Name = class Name {
    };
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: RDNSequence })
    ], Name.prototype, "rdnSequence", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Null })
    ], Name.prototype, "null", void 0);
    Name = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Choice })
    ], Name);
    exports.Name = Name;

    });

    var AttestationFramework = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MyAttestationDecoded = exports.MyAttestation = exports.SignedInfo = exports.SmartContract = exports.Payload = exports.PrivateKeyInfo = exports.PrivateKeyData = exports.SubjectPublicKeyInfo = exports.PublicKeyInfoValue = void 0;



    class PublicKeyInfoValue {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], PublicKeyInfoValue.prototype, "algorithm", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.BitString })
    ], PublicKeyInfoValue.prototype, "publicKey", void 0);
    exports.PublicKeyInfoValue = PublicKeyInfoValue;
    let SubjectPublicKeyInfo = class SubjectPublicKeyInfo {
        constructor() {
            this.null = false;
        }
    };
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: PublicKeyInfoValue })
    ], SubjectPublicKeyInfo.prototype, "value", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], SubjectPublicKeyInfo.prototype, "null", void 0);
    SubjectPublicKeyInfo = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Choice })
    ], SubjectPublicKeyInfo);
    exports.SubjectPublicKeyInfo = SubjectPublicKeyInfo;
    class PrivateKeyData {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], PrivateKeyData.prototype, "one", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], PrivateKeyData.prototype, "privateKey", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any, context: 0 })
    ], PrivateKeyData.prototype, "algDescr", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.BitString, context: 1 })
    ], PrivateKeyData.prototype, "publicKey", void 0);
    exports.PrivateKeyData = PrivateKeyData;
    class PrivateKeyInfo {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], PrivateKeyInfo.prototype, "one", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], PrivateKeyInfo.prototype, "algIdent", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.OctetString })
    ], PrivateKeyInfo.prototype, "keysData", void 0);
    exports.PrivateKeyInfo = PrivateKeyInfo;
    let Payload = class Payload {
    };
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AuthenticationFramework.Extensions, context: 3 })
    ], Payload.prototype, "extensions", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any, context: 4 })
    ], Payload.prototype, "dataObject", void 0);
    Payload = __decorate([
        (0, asn1_schema_1.AsnType)({ type: asn1_schema_1.AsnTypeTypes.Choice })
    ], Payload);
    exports.Payload = Payload;
    //attestsTo         CHOICE {
    //             extensions        [3] EXPLICIT Extensions,
    //             dataObject        [4] DataObject -- defined per objectClass
    //     }
    class SmartContract {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], SmartContract.prototype, "value", void 0);
    exports.SmartContract = SmartContract;
    class SignedInfo {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AuthenticationFramework.Version })
    ], SignedInfo.prototype, "version", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], SignedInfo.prototype, "serialNumber", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AuthenticationFramework.AlgorithmIdentifierASN })
    ], SignedInfo.prototype, "signature", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: InformationFramework.Name })
    ], SignedInfo.prototype, "issuer", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AuthenticationFramework.ValidityValue, optional: true })
    ], SignedInfo.prototype, "validity", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: InformationFramework.Name })
    ], SignedInfo.prototype, "subject", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: SubjectPublicKeyInfo })
    ], SignedInfo.prototype, "subjectPublicKeyInfo", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: SmartContract, optional: true })
    ], SignedInfo.prototype, "contract", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: Payload, optional: true })
    ], SignedInfo.prototype, "attestsTo", void 0);
    exports.SignedInfo = SignedInfo;
    class MyAttestation {
        constructor() {
            // dont decode signedInfo to stay is solid for verification
            this.signedInfo = new Uint8Array();
        }
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], MyAttestation.prototype, "signedInfo", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AuthenticationFramework.AlgorithmIdentifierASN })
    ], MyAttestation.prototype, "signatureAlgorithm", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.BitString })
    ], MyAttestation.prototype, "signatureValue", void 0);
    exports.MyAttestation = MyAttestation;
    class MyAttestationDecoded {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: SignedInfo })
    ], MyAttestationDecoded.prototype, "signedInfo", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AuthenticationFramework.AlgorithmIdentifierASN })
    ], MyAttestationDecoded.prototype, "signatureAlgorithm", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.BitString })
    ], MyAttestationDecoded.prototype, "signatureValue", void 0);
    exports.MyAttestationDecoded = MyAttestationDecoded;

    });

    var Signature_1 = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Signature = void 0;

    class Signature {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], Signature.prototype, "r", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], Signature.prototype, "s", void 0);
    exports.Signature = Signature;

    });

    var name = "elliptic";
    var version$1 = "6.5.4";
    var description = "EC cryptography";
    var main = "lib/elliptic.js";
    var files = [
    	"lib"
    ];
    var scripts = {
    	lint: "eslint lib test",
    	"lint:fix": "npm run lint -- --fix",
    	unit: "istanbul test _mocha --reporter=spec test/index.js",
    	test: "npm run lint && npm run unit",
    	version: "grunt dist && git add dist/"
    };
    var repository = {
    	type: "git",
    	url: "git@github.com:indutny/elliptic"
    };
    var keywords = [
    	"EC",
    	"Elliptic",
    	"curve",
    	"Cryptography"
    ];
    var author = "Fedor Indutny <fedor@indutny.com>";
    var license = "MIT";
    var bugs = {
    	url: "https://github.com/indutny/elliptic/issues"
    };
    var homepage = "https://github.com/indutny/elliptic";
    var devDependencies = {
    	brfs: "^2.0.2",
    	coveralls: "^3.1.0",
    	eslint: "^7.6.0",
    	grunt: "^1.2.1",
    	"grunt-browserify": "^5.3.0",
    	"grunt-cli": "^1.3.2",
    	"grunt-contrib-connect": "^3.0.0",
    	"grunt-contrib-copy": "^1.0.0",
    	"grunt-contrib-uglify": "^5.0.0",
    	"grunt-mocha-istanbul": "^5.0.2",
    	"grunt-saucelabs": "^9.0.1",
    	istanbul: "^0.4.5",
    	mocha: "^8.0.1"
    };
    var dependencies = {
    	"bn.js": "^4.11.9",
    	brorand: "^1.1.0",
    	"hash.js": "^1.0.0",
    	"hmac-drbg": "^1.0.1",
    	inherits: "^2.0.4",
    	"minimalistic-assert": "^1.0.1",
    	"minimalistic-crypto-utils": "^1.0.1"
    };
    var require$$0$1 = {
    	name: name,
    	version: version$1,
    	description: description,
    	main: main,
    	files: files,
    	scripts: scripts,
    	repository: repository,
    	keywords: keywords,
    	author: author,
    	license: license,
    	bugs: bugs,
    	homepage: homepage,
    	devDependencies: devDependencies,
    	dependencies: dependencies
    };

    var bn = createCommonjsModule$2(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0$3.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [ number & 0x3ffffff ];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [ 0 ];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        // '0' - '9'
        } else {
          return (c - 48) & 0xf;
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this.strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

          // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [ 0 ];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this.strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer (endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo (self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM (x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT (N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin (x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b (ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub (N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp (x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn (num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is BN v4 instance
            r.strip();
          } else {
            // r is BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal$1);
    });

    var utils_1$1 = createCommonjsModule$2(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1 = createCommonjsModule$2(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert$1;
    utils.toArray = utils_1$1.toArray;
    utils.zero2 = utils_1$1.zero2;
    utils.toHex = utils_1$1.toHex;
    utils.encode = utils_1$1.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });

    var r$1;

    var brorand = function rand(len) {
      if (!r$1)
        r$1 = new Rand(null);

      return r$1.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    var Rand_1 = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);

      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };

    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };

      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto$1 = require$$0$3;
        if (typeof crypto$1.randomBytes !== 'function')
          throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto$1.randomBytes(n);
        };
      } catch (e) {
      }
    }
    brorand.Rand = Rand_1;

    var getNAF = utils_1.getNAF;
    var getJSF = utils_1.getJSF;
    var assert$9 = utils_1.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new bn(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

      // Useful for many curves
      this.zero = new bn(0).toRed(this.red);
      this.one = new bn(1).toRed(this.red);
      this.two = new bn(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$9(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$9(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$9(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$9(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var assert$8 = utils_1.assert;

    function ShortCurve(conf) {
      base.call(this, 'short', conf);

      this.a = new bn(conf.a, 16).toRed(this.red);
      this.b = new bn(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser$1(ShortCurve, base);
    var short_1 = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$8(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn(vec.a, 16),
            b: new bn(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn.mont(num);
      var tinv = new bn(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn(1);
      var y1 = new bn(0);
      var x2 = new bn(0);
      var y2 = new bn(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point$2(curve, x, y, isRed) {
      base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser$1(Point$2, base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point$2(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point$2.fromJSON(this, obj, red);
    };

    Point$2.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point$2.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point$2.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point$2.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point$2.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point$2.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point$2.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point$2.prototype.mul = function mul(k) {
      k = new bn(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point$2.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point$2.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point$2.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn(0);
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = new bn(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser$1(JPoint, base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new bn(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    function MontCurve(conf) {
      base.call(this, 'mont', conf);

      this.a = new bn(conf.a, 16).toRed(this.red);
      this.b = new bn(conf.b, 16).toRed(this.red);
      this.i4 = new bn(4).toRed(this.red).redInvm();
      this.two = new bn(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits_browser$1(MontCurve, base);
    var mont = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point$1(curve, x, z) {
      base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new bn(x, 16);
        this.z = new bn(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits_browser$1(Point$1, base.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils_1.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point$1(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point$1.fromJSON(this, obj);
    };

    Point$1.prototype.precompute = function precompute() {
      // No-op
    };

    Point$1.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point$1.fromJSON = function fromJSON(curve, obj) {
      return new Point$1(curve, obj[0], obj[1] || curve.one);
    };

    Point$1.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point$1.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point$1.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point$1.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point$1.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point$1.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };

    var assert$7 = utils_1.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      base.call(this, 'edwards', conf);

      this.a = new bn(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new bn(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new bn(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert$7(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits_browser$1(EdwardsCurve, base);
    var edwards = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new bn(y, 16);
      if (!y.red)
        y = y.toRed(this.red);

      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = z ? new bn(z, 16) : this.curve.one;
        this.t = t && new bn(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits_browser$1(Point, base.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          h = this.z.redSqr();
          // J = F - 2 * H
          j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;

      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;

    var curve_1 = createCommonjsModule$2(function (module, exports) {

    var curve = exports;

    curve.base = base;
    curve.short = short_1;
    curve.mont = mont;
    curve.edwards = edwards;
    });

    var secp256k1 = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
          ],
        ],
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
          ],
        ],
      },
    };

    var curves_1 = createCommonjsModule$2(function (module, exports) {

    var curves = exports;





    var assert = utils_1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash_1$1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash_1$1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1$1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = secp256k1;
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash_1$1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    });

    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1$1.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1$1.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1$1.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert$1(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash_1$1.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1$1.toArray(entropy, entropyEnc);
      add = utils_1$1.toArray(add, addEnc);

      minimalisticAssert$1(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1$1.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1$1.encode(res, enc);
    };

    var assert$6 = utils_1.assert;

    function KeyPair$1(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key$1 = KeyPair$1;

    KeyPair$1.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair$1)
        return pub;

      return new KeyPair$1(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair$1.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair$1)
        return priv;

      return new KeyPair$1(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair$1.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair$1.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair$1.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair$1.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair$1.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$6(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$6(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair$1.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$6(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair$1.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair$1.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair$1.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };

    var assert$5 = utils_1.assert;

    function Signature$1(options, enc) {
      if (options instanceof Signature$1)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$5(options.r && options.s, 'Signature without r or s');
      this.r = new bn(options.r, 16);
      this.s = new bn(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature$1 = Signature$1;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature$1.prototype._importDER = function _importDER(data, enc) {
      data = utils_1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn(r);
      this.s = new bn(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature$1.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1.encode(res, enc);
    };

    var assert$4 = utils_1.assert;




    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$4(Object.prototype.hasOwnProperty.call(curves_1, options),
          'Unknown curve ' + options);

        options = curves_1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new key$1(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key$1.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key$1.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || brorand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn(2));
      for (;;) {
        var priv = new bn(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new bn(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature$1({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new bn(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new signature$1(signature, 'hex');

      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert$4((3 & j) === j, 'The recovery param is more than two bits');
      signature = new signature$1(signature, enc);

      var n = this.n;
      var e = new bn(msg);
      var r = signature.r;
      var s = signature.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new signature$1(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var assert$3 = utils_1.assert;
    var parseBytes$2 = utils_1.parseBytes;
    var cachedProperty$1 = utils_1.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes$2(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes$2(params.pub);
    }

    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub: pub });
    };

    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret: secret });
    };

    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty$1(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty$1(KeyPair, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty$1(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty$1(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty$1(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty$1(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair.prototype.sign = function sign(message) {
      assert$3(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert$3(this._secret, 'KeyPair is public only');
      return utils_1.encode(this.secret(), enc);
    };

    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils_1.encode(this.pubBytes(), enc);
    };

    var key = KeyPair;

    var assert$2 = utils_1.assert;
    var cachedProperty = utils_1.cachedProperty;
    var parseBytes$1 = utils_1.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object')
        sig = parseBytes$1(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }

      assert$2(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof bn)
        this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature.prototype.toHex = function toHex() {
      return utils_1.encode(this.toBytes(), 'hex').toUpperCase();
    };

    var signature = Signature;

    var assert$1 = utils_1.assert;
    var parseBytes = utils_1.parseBytes;



    function EDDSA(curve) {
      assert$1(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA))
        return new EDDSA(curve);

      curve = curves_1[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash_1$1.sha512;
    }

    var eddsa = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
        .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils_1.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return key.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return key.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof signature)
        return sig;
      return new signature(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils_1.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils_1.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils_1.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };

    var elliptic_1 = createCommonjsModule$2(function (module, exports) {

    var elliptic = exports;

    elliptic.version = require$$0$1.version;
    elliptic.utils = utils_1;
    elliptic.rand = brorand;
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;

    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = eddsa;
    });

    var ethers_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm);

    var KeyPair_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyPair = exports.subtle = void 0;









    if (typeof crypto === "object" && crypto.subtle) {
        exports.subtle = crypto.subtle;
    }
    else {
        let webcrypto = require$$0$3.webcrypto;
        if (webcrypto) {
            exports.subtle = webcrypto.subtle;
        }
        else {
            (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Webcrypto not accessible");
            throw new Error("webcrypto.subtle missing");
        }
    }
    let ec = new elliptic_1.ec('secp256k1');

    // keys = elliptic.js curves, value = browser subtle curve (also supported by node.js)
    // node.js supports 'P-256', 'P-384', 'P-521', 'NODE-ED25519', 'NODE-ED448', 'NODE-X25519', or 'NODE-X448'
    const EC_CURVES_SUBTLE = {
        p192: null,
        p224: null,
        p256: 'P-256',
        p384: 'P-384',
        p521: 'P-521',
        curve25519: null,
        ed25519: null,
        secp256k1: null,
    };
    // G x, y values taken from official secp256k1 document
    new Point_1.Point(55066263022277343669578718895168534326250603453777594175500187360389116729240n, 32670510020758816978083085130507043184471273380659243275938904335757337482424n);
    const DEFAULT_ALGORITHM = 'secp256k1';
    class KeyPair {
        constructor() {
            this.ethereumPrefix = "\u0019Ethereum Signed Message:\n";
            this.algorithmASNList = {
                secp256k1: ["3081ec06072a8648ce3d02013081e0020101302c06072a8648ce3d0101022100fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f3044042000000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000000704410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8022100fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141020101", "06052b8104000a"],
                sect283k1: ["3081f806072a8648ce3d02013081ec020101302506072a8648ce3d0102301a0202011b06092a8648ce3d01020303300902010502010702010c304c042400000000000000000000000000000000000000000000000000000000000000000000000004240000000000000000000000000000000000000000000000000000000000000000000000010449040503213f78ca44883f1a3b8162f188e553cd265f23c1567a16876913b0c2ac245849283601ccda380f1c9e318d90f95d07e5426fe87e45c0e8184698e45962364e34116177dd2259022401ffffffffffffffffffffffffffffffffffe9ae2ed07577265dff7f94451e061e163c61020104"],
                // NIST P-256, secp256r1, prime256v1
                p256: ["3081ec06072a8648ce3d02013081e0020101302c06072a8648ce3d0101022100ffffffff00000001000000000000000000000000ffffffffffffffffffffffff30440420ffffffff00000001000000000000000000000000fffffffffffffffffffffffc04205ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b0441046b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5022100ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551020101"]
            };
        }
        getPrivateAsUint8() {
            return this.privKey;
        }
        getPrivateAsHexString() {
            return (0, utils$1.uint8tohex)(this.privKey);
        }
        getPrivateAsBigInt() {
            return (0, utils$1.uint8ToBn)(this.privKey);
        }
        static privateFromBigInt(priv) {
            let me = new this();
            me.privKey = new Uint8Array((0, utils$1.hexStringToArray)(priv.toString(16).padStart(64, '0')));
            return me;
        }
        // hex string 129-130 symbols with leading 04 (it means uncompressed)
        static fromPublicHex(publicHex) {
            if (publicHex.toLowerCase().match(/^[a-f0-9]+$/i) === null) {
                throw new Error('Wrong Hex string input');
            }
            if (publicHex.length < 129 || publicHex.length > 130) {
                throw new Error('Wrong public hex length');
            }
            let me = new this();
            me.pubKey = new Uint8Array((0, utils$1.hexStringToArray)(publicHex));
            return me;
        }
        static fromPrivateUint8(privateUint, keyAlg = '') {
            if (!privateUint || privateUint.length != 32) {
                throw new Error('Wrong private key. Should be 32 bytes Uint8');
            }
            let me = new this();
            me.privKey = privateUint;
            if (keyAlg && Point_1.CURVES.hasOwnProperty(keyAlg)) {
                me.algorithm = keyAlg;
            }
            else {
                throw new Error(`Algorithm ${keyAlg} not implemented.`);
            }
            return me;
        }
        static publicFromBase64orPEM(encoded) {
            return KeyPair.publicFromPEM((0, utils$1.pemOrBase64Orbase64urlToString)(encoded));
        }
        static publicFromPEM(pem) {
            const pubUint8 = (0, utils$1.base64ToUint8array)(pem);
            let publicKeyObj = asn1_schema_1.AsnParser.parse(pubUint8, AttestationFramework.PublicKeyInfoValue);
            return KeyPair.publicFromUint(new Uint8Array(publicKeyObj.publicKey));
        }
        static publicFromUint(key) {
            let me = new this();
            if (key.byteLength != 65) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'Wrong public key length');
                throw new Error('Wrong public key length');
            }
            me.pubKey = new Uint8Array(key);
            return me;
        }
        static publicFromSubjectPublicKeyInfo(spki) {
            let me = new this();
            me.pubKey = new Uint8Array(spki.value.publicKey);
            return me;
        }
        static publicFromSubjectPublicKeyValue(spki) {
            let me = new this();
            me.pubKey = new Uint8Array(spki.publicKey);
            me.algorithm = me.getAlgorithNameFromASN1((0, utils$1.uint8tohex)(new Uint8Array(spki.algorithm)));
            return me;
        }
        static privateFromKeyInfo(spki) {
            let me = new this();
            let privateKeyObj = asn1_schema_1.AsnParser.parse(spki.keysData, AttestationFramework.PrivateKeyData);
            me.algorithm = me.getAlgorithNameFromASN1((0, utils$1.uint8tohex)(new Uint8Array(spki.algIdent)));
            me.privKey = new Uint8Array(privateKeyObj.privateKey);
            return me;
        }
        static privateFromKeyDataPEM(pem) {
            const receiverPrivUint8 = (0, utils$1.base64ToUint8array)(pem);
            let privateKeyObj = asn1_schema_1.AsnParser.parse(receiverPrivUint8, AttestationFramework.PrivateKeyData);
            let me = new this();
            // TODO detect and validate algorithm
            me.algorithm = me.getAlgorithNameFromASN1((0, utils$1.uint8tohex)(new Uint8Array(privateKeyObj.algDescr)));
            me.privKey = new Uint8Array(privateKeyObj.privateKey);
            return me;
        }
        getAlgorithNameFromASN1(alg) {
            let algEncodings = {};
            for (const property in this.algorithmASNList) {
                this.algorithmASNList[property].forEach((algAsn1) => {
                    algEncodings[algAsn1] = property;
                });
            }
            if (algEncodings.hasOwnProperty(alg)) {
                return algEncodings[alg];
            }
            else {
                let m = "Unknown algorithm.";
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                throw new Error(m);
            }
        }
        static privateFromPEM(pem) {
            const receiverPrivUint8 = (0, utils$1.base64ToUint8array)(pem);
            let privateKeyObj = asn1_schema_1.AsnParser.parse(receiverPrivUint8, AttestationFramework.PrivateKeyInfo);
            return KeyPair.privateFromKeyInfo(privateKeyObj);
        }
        // Generate a private key
        static async generateKeyAsync() {
            // using subtlecrypto to generate a key. note that we are using an AES key
            // as an secp256k1 key here, since browsers don't support the latter;
            // that means all the keys must be created exportable to work with.
            const keyPair = await crypto.subtle.generateKey({
                name: 'AES-GCM',
                length: 256
            }, true, ['encrypt']);
            let hex = ['0x'];
            const exported = await crypto.subtle.exportKey("raw", keyPair);
            (new Uint8Array(exported)).forEach(i => {
                var h = i.toString(16);
                if (h.length % 2) {
                    h = '0' + h;
                }
                hex.push(h);
            });
            // the next line works if AES key is always positive
            return this.privateFromBigInt(BigInt(hex.join('')) % Point_1.CURVE_SECP256k1.n);
        }
        static createKeys() {
            return this.privateFromBigInt(BigInt('0x' + (0, utils$1.uint8tohex)(crypto.getRandomValues(new Uint8Array(32)))) % Point_1.CURVE_SECP256k1.n);
        }
        getPublicKeyAsHexStr() {
            if (this.pubKey) {
                return (0, utils$1.uint8tohex)(this.pubKey);
            }
            else {
                // we can use it to count pubPoint without external lib, but it can not work for some curves, where we need to do BN reduction before compress point
                // if (CURVES.hasOwnProperty(this.algorithm) && EC_CURVES.includes(this.algorithm)) {
                //     let curve = CURVES[this.algorithm];
                //     logger(DEBUGLEVEL.HIGH, 'lets generate public key for ' + this.algorithm);
                //     let PointG = new Point(curve.GX, curve.GY, curve);
                //     let pubPoint = PointG.multiplyDA(mod(this.getPrivateAsBigInt(),curve.n));
                //     logger(DEBUGLEVEL.HIGH, 'point ' + pubPoint.useCurve);
                //     // prefix 04 means it is uncompressed key
                //     return '04' + pubPoint.x.toString(16).padStart(64, '0') + pubPoint.y.toString(16).padStart(64, '0')
                if (Point_1.CURVES.hasOwnProperty(this.algorithm) && EC_CURVES_SUBTLE.hasOwnProperty(this.algorithm)) {
                    let curve = new elliptic_1.ec(this.algorithm);
                    if (!this.getPrivateAsHexString()) {
                        (0, utils$1.logger)(config.DEBUGLEVEL.LOW, this);
                        throw new Error("Cant sign. This is only public key.");
                    }
                    let key = curve.keyFromPrivate(this.getPrivateAsHexString(), 'hex');
                    return key.getPublic('hex').toString();
                }
                else {
                    let m = 'Private -> Public key not implemented for that aglorighm - "' + this.algorithm + '"';
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                    throw new Error(m);
                }
            }
        }
        getAsnDerPublic() {
            var pubPoint = this.getPublicKeyAsHexStr();
            // algorithm description hardcoded
            let pubPointTypeDescrDER = '';
            if (!this.algorithm) {
                let m = 'algorithm undefined, lets use default.';
                (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, m);
                pubPointTypeDescrDER = this.algorithmASNList[DEFAULT_ALGORITHM][0];
            }
            else if (!this.algorithmASNList.hasOwnProperty(this.algorithm)) {
                let m = 'Fatal Error. Algorithm not implemented yet - ' + this.algorithm;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                throw new Error(m);
            }
            else {
                pubPointTypeDescrDER = this.algorithmASNList[this.algorithm][0];
            }
            return DerUtility.Asn1Der.encode('SEQUENCE_30', pubPointTypeDescrDER +
                DerUtility.Asn1Der.encode('BIT_STRING', pubPoint));
        }
        getAddress() {
            var pubPoint = this.getPublicKeyAsHexStr();
            pubPoint = pubPoint.substr(2);
            let hash = sha3.keccak256((0, utils$1.hexStringToArray)(pubPoint));
            return "0x" + hash.substr(-40).toUpperCase();
        }
        signBytes(bytes) {
            if (!this.getPrivateAsHexString()) {
                throw new Error("Cant sign. This is only public key.");
            }
            let ecKey = ec.keyFromPrivate(this.getPrivateAsHexString(), 'hex');
            let encodingHash = sha3.keccak256(bytes);
            let signature = ecKey.sign(encodingHash);
            return signature.toDER('hex');
        }
        signStringWithEthereum(message) {
            if (!this.getPrivateAsHexString()) {
                throw new Error("Cant sign. This is only public key.");
            }
            let ecKey = ec.keyFromPrivate(this.getPrivateAsHexString(), 'hex');
            let finalMsg = this.ethereumPrefix + message.length + message;
            let encodingHash = sha3.keccak256((0, utils$1.stringToArray)(finalMsg));
            let signature = ecKey.sign(encodingHash);
            return signature.toDER('hex');
        }
        signHexStringWithEthereum(message) {
            return this.signStringWithEthereum('0x' + message);
        }
        signBytesWithEthereum(bytes) {
            let message = '0x' + (0, utils$1.uint8tohex)(new Uint8Array(bytes));
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, "message: " + message);
            return this.signStringWithEthereum(message);
        }
        signDeterministicSHA256(bytes) {
            let sha256 = Array.from(ethers_1.ethers.utils.arrayify(ethers_1.ethers.utils.sha256(bytes)));
            return this.signBytes(sha256);
        }
        verifyDeterministicSHA256(bytes, signature) {
            let sha256 = ethers_1.ethers.utils.sha256(bytes).substr(2);
            let key, sign;
            if (Point_1.CURVES.hasOwnProperty(this.algorithm) && EC_CURVES_SUBTLE.hasOwnProperty(this.algorithm)) {
                let curve = new elliptic_1.ec(this.algorithm);
                key = curve.keyFromPublic(this.getPublicKeyAsHexStr(), 'hex');
            }
            else {
                let m = 'Elliptic.js curve not implemented for that aglorighm - "' + this.algorithm + '"';
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                throw new Error(m);
            }
            if (signature.length == 128 || signature.length == 130) {
                var m = signature.match(/([a-f\d]{64})/gi);
                sign = {
                    r: m[0],
                    s: m[1]
                };
            }
            else {
                let signatureAsn1 = asn1_schema_1.AsnParser.parse((0, utils$1.hexStringToUint8)(signature), Signature_1.Signature);
                sign = {
                    r: BigInt(signatureAsn1.r).toString(16).padStart(64, '0'),
                    s: BigInt(signatureAsn1.s).toString(16).padStart(64, '0')
                };
            }
            return key.verify(sha256, sign);
        }
        verifyHexStringWithEthereum(message, signature) {
            let finalMsg = '0x' + message;
            let encodingHash = sha3.keccak256((0, utils$1.stringToArray)(this.ethereumPrefix + finalMsg.length + finalMsg));
            let ecKey = ec.keyFromPublic(this.getPublicKeyAsHexStr(), 'hex');
            var m = signature.match(/([a-f\d]{64})/gi);
            let sign = {
                r: m[0],
                s: m[1]
            };
            return ecKey.verify(encodingHash, sign);
        }
        signRawBytesWithEthereum(bytes) {
            let encodingHash = ethers_1.ethers.utils.keccak256(bytes).substring(2);
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, `signRawBytesWithEthereum: key: ${this.getAddress()}, hash: ${encodingHash}`);
            if (!this.getPrivateAsHexString()) {
                throw new Error("Cant sign. This is only public key.");
            }
            let ecKey = ec.keyFromPrivate(this.getPrivateAsHexString(), 'hex');
            let signatureInstance = ecKey.sign((0, utils$1.hexStringToUint8)(encodingHash));
            return (0, utils$1.ecSignatureToSRVhex)(signatureInstance, ecKey);
        }
        verifyBytesWithEthereum(bytes, signature) {
            if (!bytes || !bytes.length) {
                throw new Error('Missing data to verify');
            }
            if (!signature) {
                throw new Error('Missing signature to verify');
            }
            // let encodingHash = sha3.keccak256(bytes);
            let encodingHash = (0, utils$1.hexStringToArray)(ethers_1.ethers.utils.keccak256(bytes));
            let ecKey = ec.keyFromPublic(this.getPublicKeyAsHexStr(), 'hex');
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, `verifyBytesWithEthereum: key: ${this.getAddress()}, hash: ${(0, utils$1.uint8tohex)(new Uint8Array(encodingHash))}`);
            // TODO add signature conversion
            signature = (0, utils$1.uint8tohex)(KeyPair.anySignatureToRawUint8(signature));
            var m = signature.match(/([a-f\d]{64})/gi);
            let sign = {
                r: m[0],
                s: m[1]
            };
            return ecKey.verify(encodingHash, sign);
            // return ecKey.verify(encodingHash, signature);
        }
        getJWTParams() {
            let curve = EC_CURVES_SUBTLE[this.algorithm];
            if (!curve) {
                let m = `Cant create subtleCrypto key for curve '${this.algorithm}'`;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                throw new Error(m);
            }
            let pub = this.getPublicKeyAsHexStr();
            return {
                crv: curve,
                d: (0, utils$1.uint8arrayToBase64)(this.getPrivateAsUint8()),
                // ext: true,
                key_ops: ["sign"],
                kty: "EC",
                x: (0, utils$1.uint8arrayToBase64)((0, utils$1.hexStringToUint8)(pub.substr(2, 64))),
                y: (0, utils$1.uint8arrayToBase64)((0, utils$1.hexStringToUint8)(pub.substr(66, 64)))
            };
        }
        getSubtlePrivateKey() {
            let curve = EC_CURVES_SUBTLE[this.algorithm];
            return exports.subtle.importKey("jwk", this.getJWTParams(), {
                name: "ECDSA",
                namedCurve: curve
            }, true, ["sign"]);
        }
        getSubtlePublicKey() {
            let curve = EC_CURVES_SUBTLE[this.algorithm];
            let params = this.getJWTParams();
            delete params.d;
            params.key_ops = ['verify'];
            return exports.subtle.importKey("jwk", params, {
                name: "ECDSA",
                namedCurve: curve
            }, true, ["verify"]);
        }
        async signStringWithSubtle(msg) {
            return await exports.subtle.sign({
                name: "ECDSA",
                hash: { name: "SHA-256" },
            }, await this.getSubtlePrivateKey(), 
            // ethers.utils.sha256(Uint8Array.from(stringToArray(msg)))
            // subtle sign do the sha256 encoding internally
            Uint8Array.from((0, utils$1.stringToArray)(msg)));
        }
        async verifyStringWithSubtle(signature, msg) {
            (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, 'pubkey: ' + this.getPublicKeyAsHexStr() + ' msg:' + msg + ' signature:' + (0, utils$1.uint8tohex)(signature));
            (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, await this.getSubtlePublicKey());
            return await exports.subtle.verify({
                name: "ECDSA",
                hash: { name: "SHA-256" },
            }, await this.getSubtlePublicKey(), signature, Uint8Array.from((0, utils$1.stringToArray)(msg)));
        }
        async verifyStringWithSubtleDerSignature(signature, msg) {
            let signatureAsn1 = asn1_schema_1.AsnParser.parse(signature, Signature_1.Signature);
            const javaSignatureHexRaw = BigInt(signatureAsn1.r).toString(16).padStart(64, '0') + BigInt(signatureAsn1.s).toString(16).padStart(64, '0');
            return this.verifyStringWithSubtle((0, utils$1.hexStringToUint8)(javaSignatureHexRaw), msg);
        }
        static anySignatureToRawUint8(derSignature) {
            let signatureUint8;
            if (typeof derSignature == "string") {
                signatureUint8 = (0, utils$1.hexStringToUint8)(derSignature);
            }
            else {
                signatureUint8 = derSignature;
            }
            if (!signatureUint8 || !signatureUint8.length) {
                throw new Error('Empty signature received');
            }
            let output;
            switch (signatureUint8.length) {
                case 64:
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, `anySignatureToRawUint8 received 64 bytes signature (without v value) = ${(0, utils$1.uint8tohex)(signatureUint8)}`);
                case 65:
                    output = signatureUint8;
                    break;
                // remove last byte ( v ) value
                // output = signatureUint8.slice(0,64);
                // break;
                case 66:
                    // remove 04 at start
                    if (signatureUint8[0] != 4) {
                        throw new Error(`Cant recognize signature: ${(0, utils$1.uint8tohex)(signatureUint8)}`);
                    }
                    output = signatureUint8.slice(1, 65);
                    break;
                case 70:
                case 71:
                case 72:
                    let signatureAsn1 = asn1_schema_1.AsnParser.parse(signatureUint8, Signature_1.Signature);
                    output = (0, utils$1.hexStringToUint8)(BigInt(signatureAsn1.r).toString(16).padStart(64, '0') +
                        BigInt(signatureAsn1.s).toString(16).padStart(64, '0'));
                    break;
                default:
                    let m = 'wrong Signature: ' + (0, utils$1.uint8tohex)(signatureUint8);
                    throw new Error(m);
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, "ready signature:" + (0, utils$1.uint8tohex)(output));
            return output;
        }
        static parseKeyArrayStrings(keys) {
            for (let i in keys) {
                if (typeof keys[i] === "string")
                    keys[i] = KeyPair.publicFromBase64orPEM(keys[i]);
            }
            return keys;
        }
    }
    exports.KeyPair = KeyPair;

    });

    var Timestamp_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Timestamp = void 0;


    class Timestamp {
        constructor(timeSinceEpochInMs = null) {
            this.ALLOWED_ROUNDING = 10000; // 10 sec, since we are always rounding to the nearest second in the string representation
            this.validity = 0;
            if (!timeSinceEpochInMs)
                this.time = Date.now();
            if (typeof timeSinceEpochInMs === 'number') {
                this.time = timeSinceEpochInMs;
            }
            if (typeof timeSinceEpochInMs === 'string') {
                this.time = Timestamp.stringTimestampToLong(timeSinceEpochInMs);
            }
            this.time = this.time - this.time % 1000;
        }
        fromString(timeAsString) {
            this.time = Timestamp.stringTimestampToLong(timeAsString);
        }
        getValidity() {
            return this.validity;
        }
        setValidity(validity) {
            this.validity = validity;
        }
        getTime() {
            return this.time;
        }
        getTimeAsString() {
            let preTime = new Date(this.time).toString(); //.replace('GMT',' GMT');
            return preTime.substr(0, preTime.indexOf('(') - 1);
        }
        validateTimestamp() {
            let currentTime = this.getCurrentTime();
            if (this.time > currentTime + this.ALLOWED_ROUNDING) {
                return false;
            }
            // Slack only goes into the future
            if (this.time + this.ALLOWED_ROUNDING + this.validity < currentTime) {
                return false;
            }
            return true;
        }
        validateAgainstExpiration(expirationTimeInMs) {
            let currentTime = this.getCurrentTime();
            // If timestamp is in the future
            if (this.time > (currentTime + this.ALLOWED_ROUNDING)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Object still not valid. Details: not valid before = " + this.time + ", currentTime = " + currentTime);
                return false;
            }
            // If token has expired
            if (expirationTimeInMs < (currentTime - this.ALLOWED_ROUNDING)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Object is not longer valid. Details: attNotAfter = " + expirationTimeInMs + ", currentTime = " + currentTime);
                return false;
            }
            // If the token is valid for too long
            if ((expirationTimeInMs - this.time) > (this.validity + this.ALLOWED_ROUNDING)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, expirationTimeInMs + "\n" + this.time + "\n" + this.validity + "\n" + this.ALLOWED_ROUNDING + "\n" + (expirationTimeInMs - this.time) + "\n" + (this.validity + this.ALLOWED_ROUNDING) + "\n");
                return false;
            }
            return true;
        }
        static stringTimestampToLong(timestamp) {
            return Date.parse(timestamp);
        }
        getCurrentTime() {
            return Date.now();
        }
    }
    exports.Timestamp = Timestamp;
    // Timestamp with millisecond accuracy and timezone info
    // Date.parse('Thu, 01 Jan 1970 00:00:00 GMT-0400');
    // Tue Mar 30 2021 21:14:22 GMT+0300
    Timestamp.TIMESTAMP_FORMAT = "EEE MMM d yyyy HH:mm:ss 'GMT'Z";
    Timestamp.ALLOWED_ROUNDING = 10000; // 10 sec, since we are always rounding to the nearest second in the string representation
    Timestamp.UNLIMITED = 253402297199000;
    Timestamp.DEFAULT_TOKEN_TIME_LIMIT = 1000 * 60 * 60 * 24 * 365; // 1 year
    Timestamp.DEFAULT_TIME_LIMIT_MS = 1000 * 60 * 20; // 20 minutes

    });

    var Attestation_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Attestation = void 0;







    class Attestation {
        constructor() {
            this.version = 18; // = 0x10+0x02 where 0x02 means x509 v3 (v1 has version 0) and 0x10 is Attestation v 0
            this.blockchainFriendly = true;
        }
        parseNames(rdn) {
            let invertedX500NamesLabels = {};
            Object.keys(DerUtility.X500NamesLabels).forEach((key) => {
                invertedX500NamesLabels[DerUtility.X500NamesLabels[key].toLowerCase()] = key;
            });
            let nameArray = [];
            rdn.forEach((obj) => {
                let type = invertedX500NamesLabels[obj.type.toString().toLowerCase()];
                if (!type)
                    throw new Error(`X500 with name ${obj.type.toString()} not implemented yet.`);
                nameArray.push(`${type}="${obj.value}"`);
            });
            return nameArray.join(',');
        }
        fromBytes(uint8bytes) {
            const me = this;
            let decodedAttestationObj = asn1_schema_1.AsnParser.parse(uint8bytes, AttestationFramework.SignedInfo);
            me.signedInfo = uint8bytes;
            me.version = decodedAttestationObj.version.version;
            me.serialNumber = decodedAttestationObj.serialNumber;
            me.signingAlgorithm = decodedAttestationObj.signature.algorithm.toString();
            if (decodedAttestationObj.validity) {
                me.notValidBefore = decodedAttestationObj.validity.notBefore.generalizedTime.getTime();
                me.notValidAfter = decodedAttestationObj.validity.notAfter.generalizedTime.getTime();
                // TODO validate time when it will be updated in Java code
                // if (
                //     (decodedAttestationObj.validity.notAfterInt && (decodedAttestationObj.validity.notAfterInt != Math.floor( me.notValidAfter / 1000 ) )) ||
                //     (decodedAttestationObj.validity.notBeforeInt && (decodedAttestationObj.validity.notBeforeInt != Math.floor( me.notValidBefore / 1000 ) ))
                // ) {
                //     throw new Error("Date doesnt fit");
                // }
                if (typeof decodedAttestationObj.validity.notBeforeInt === 'undefined' || typeof decodedAttestationObj.validity.notAfterInt === 'undefined') {
                    this.blockchainFriendly = false;
                }
                else {
                    this.blockchainFriendly = true;
                }
            }
            let rdn = decodedAttestationObj.subject.rdnSequence;
            me.subject = "";
            if (rdn && rdn[0] && rdn[0].length) {
                me.subject = this.parseNames(rdn[0]);
            }
            me.subjectKey = KeyPair_1.KeyPair.publicFromSubjectPublicKeyInfo(decodedAttestationObj.subjectPublicKeyInfo);
            let issuerSet = decodedAttestationObj.issuer.rdnSequence;
            me.issuer = '';
            if (issuerSet.length) {
                me.issuer = this.parseNames(issuerSet[0]);
            }
            if (decodedAttestationObj.contract) {
                me.smartcontracts = decodedAttestationObj.contract;
            }
            if (decodedAttestationObj.attestsTo && decodedAttestationObj.attestsTo.extensions) {
                me.extensions = decodedAttestationObj.attestsTo.extensions;
                me.commitment = new Uint8Array(me.extensions.extension.extnValue);
            }
            else if (decodedAttestationObj.attestsTo && decodedAttestationObj.attestsTo.dataObject) {
                throw new Error("Implement parse dataObject");
                // TODO parse dataObject
                //this.extensions = decodedAttestationObj.attestsTo.dataObject;
            }
        }
        isValidX509() {
            if (this.version != 0
                && this.version != 1
                && this.version != 2) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Incorrect version number");
                return false;
            }
            if (!this.issuer) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Issuer info not set");
                return false;
            }
            if (this.notValidBefore == null || this.notValidAfter == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Validity period not set");
                return false;
            }
            if (this.subject == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Subject info not set");
                return false;
            }
            if (!this.subjectKey) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "No subject public key info set");
                return false;
            }
            if (this.smartcontracts != null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Smart contract info set");
                return false;
            }
            if (this.dataObject != null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Data object set");
                return false;
            }
            if (this.version == null || this.serialNumber == null || this.signingAlgorithm == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Version, serial number, subject or algorithm missing");
                return false;
            }
            return true;
        }
        getDerEncoding() {
            if (!this.signedInfo) {
                this.signedInfo = this.getPrehash();
            }
            if (!this.signedInfo) {
                throw new Error('Empty Attestaion Der Encoding');
            }
            return (0, utils$1.uint8tohex)(new Uint8Array(this.signedInfo));
        }
        getCommitment() {
            return this.commitment;
        }
        getNotValidBefore() {
            return this.notValidBefore;
        }
        setNotValidBefore(d) {
            this.notValidBefore = d;
        }
        getNotValidAfter() {
            return this.notValidAfter;
        }
        setNotValidAfter(d) {
            this.notValidAfter = d;
        }
        getSubjectPublicKeyInfo() {
            return this.subjectKey;
        }
        checkValidity() {
            if (this.version == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Attest version missed");
                return false;
            }
            if (this.serialNumber == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Attest serial number missed");
                return false;
            }
            if (this.subject == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Attest subject missed");
                return false;
            }
            if (this.signingAlgorithm == null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Attest signing algorithm missed");
                return false;
            }
            let attNotBefore = this.getNotValidBefore();
            let attNotAfter = this.getNotValidAfter();
            let timestamp = new Timestamp_1.Timestamp(attNotBefore);
            timestamp.setValidity(attNotAfter - attNotBefore);
            if (!timestamp.validateAgainstExpiration(attNotAfter)) {
                return false;
            }
            if (this.extensions != null && this.dataObject != null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Both Extensions and dataObject not allowed");
                return false;
            }
            return true;
        }
        getExtensions() {
            return this.extensions;
        }
        setVersion(version) {
            this.version = version;
        }
        getVersion() {
            return this.version;
        }
        setSubject(subject) {
            this.subject = subject;
        }
        getSubject() {
            return this.subject;
        }
        setSigningAlgorithm(alg) {
            this.signingAlgorithm = alg;
        }
        getPrehash() {
            if (!this.checkValidity()) {
                return null;
            }
            // = 0x10+0x02 where 0x02 means x509 v3 (v1 has version 0) and 0x10 is Attestation v 0
            // new DERTaggedObject(true, 0, this.version);
            let res = DerUtility.Asn1Der.encode('TAG', DerUtility.Asn1Der.encode('INTEGER', this.version), 0)
                + DerUtility.Asn1Der.encode('INTEGER', this.serialNumber)
                // TODO verify encoding!!!
                + DerUtility.Asn1Der.encodeObjectId(this.signingAlgorithm);
            res += this.issuer ? DerUtility.Asn1Der.encodeName(this.issuer) : DerUtility.Asn1Der.encode('NULL_VALUE', '');
            if (this.notValidAfter != null && this.notValidBefore != null) {
                let date = DerUtility.Asn1Der.encode('GENERALIZED_TIME', this.notValidBefore)
                    + (this.blockchainFriendly ? DerUtility.Asn1Der.encode('INTEGER', Math.floor(this.notValidBefore / 1000)) : "")
                    + DerUtility.Asn1Der.encode('GENERALIZED_TIME', this.notValidAfter)
                    + (this.blockchainFriendly ? DerUtility.Asn1Der.encode('INTEGER', Math.floor(this.notValidAfter / 1000)) : "");
                res += DerUtility.Asn1Der.encode('SEQUENCE_30', date);
            }
            else {
                res += DerUtility.Asn1Der.encode('NULL_VALUE', '');
            }
            // res.add(this.subject == null ? new DERSequence() : this.subject);
            // res += this.subject ? Asn1Der.encodeName(this.subject) : Asn1Der.encode('NULL_VALUE','');
            res += this.subject ? DerUtility.Asn1Der.encodeName(this.subject) : DerUtility.Asn1Der.encode('NULL_VALUE', '');
            res += this.subjectKey ? this.subjectKey.getAsnDerPublic() : DerUtility.Asn1Der.encode('NULL_VALUE', '');
            if (this.smartcontracts != null) {
                res += this.smartcontracts;
            }
            // if (this.commitment && this.commitment.length){
            //     let extensions: string = Asn1Der.encode('OBJECT_ID', Attestation.OID_OCTETSTRING)
            //         + Asn1Der.encode('BOOLEAN', 1)
            //         + Asn1Der.encode('OCTET_STRING', uint8tohex(this.commitment));
            //     // Double Sequence is needed to be compatible with X509V3
            //     res += Asn1Der.encode('TAG',Asn1Der.encode('SEQUENCE_30', Asn1Der.encode('SEQUENCE_30', extensions)),3);
            // }
            // The validity check ensure that only one of "extensions" and "dataObject" is set
            if (this.extensions != null) {
                res += DerUtility.Asn1Der.encode('TAG', DerUtility.Asn1Der.encode('SEQUENCE_30', DerUtility.Asn1Der.encode('SEQUENCE_30', this.extensions)), 3);
            }
            if (this.dataObject != null) {
                res += DerUtility.Asn1Der.encode('TAG', DerUtility.Asn1Der.encode('SEQUENCE_30', DerUtility.Asn1Der.encode('SEQUENCE_30', this.dataObject)), 4);
            }
            return (0, utils$1.hexStringToUint8)(DerUtility.Asn1Der.encode('SEQUENCE_30', res));
        }
        getSigningAlgorithm() {
            return this.signingAlgorithm;
        }
    }
    exports.Attestation = Attestation;
    Attestation.OID_OCTETSTRING = "1.3.6.1.4.1.1466.115.121.1.40";

    });

    var IdentifierAttestation_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IdentifierAttestation = void 0;





    class IdentifierAttestation extends Attestation_1.Attestation {
        constructor() {
            super();
        }
        fromCommitment(commitment, keys) {
            this.subjectKey = keys;
            this.setVersion(IdentifierAttestation.HIDDEN_IDENTIFIER_VERSION);
            this.setSubject("CN=");
            this.setSigningAlgorithm(IdentifierAttestation.DEFAULT_SIGNING_ALGORITHM);
            this.setSubjectPublicKeyInfo(keys);
            this.setCommitment(commitment);
            this.type = IdentifierAttestation.HIDDEN_TYPE;
            this.identifier = IdentifierAttestation.HIDDEN_IDENTIFIER;
            this.setUnlimitedValidity();
        }
        setUnlimitedValidity() {
            super.setNotValidBefore(Date.now());
            // This is used to indicate unlimited validity, see https://tools.ietf.org/html/rfc5280#section-4.1.2.5
            super.setNotValidAfter(Date.parse('31 Dec 9999 23:59:59'));
        }
        static fromData(identifier, type, keys, secret) {
            let crypto = new AttestationCrypto_1.AttestationCrypto();
            let commitment = crypto.makeCommitment(identifier, type, secret);
            let me = new this();
            me.fromCommitment(commitment, keys);
            me.type = type.toString();
            me.identifier = identifier;
            return me;
        }
        static fromLabelAndUrl(label, URL, keys) {
            let me = new this();
            me.subjectKey = keys;
            me.setVersion(IdentifierAttestation.NFT_VERSION);
            me.setSubject(me.makeLabeledURI(label, URL));
            me.setSigningAlgorithm(IdentifierAttestation.DEFAULT_SIGNING_ALGORITHM);
            me.setIssuer("CN=attestation.id");
            me.setSerialNumber(1);
            me.setSubjectPublicKeyInfo(keys);
            me.setUnlimitedValidity();
            me.type = label;
            me.identifier = URL;
            return me;
        }
        /**
         * @param label the label of the URL, similar to what is inside <a>...</a>
         * @param URL the URL itself, similar to what is in <a href="...">, note that
         * it should already be URLencoded therefore not containing space
         */
        makeLabeledURI(label, URL) {
            // DERUTF8String labeledURLValue = new DERUTF8String(URL + " " + label);
            // RDN rdn = new RDN(LABELED_URI, labeledURLValue);
            // return new X500Name(new RDN[] {rdn});
            // https://docs.microsoft.com/ru-ru/windows/win32/seccertenroll/about-introduction-to-asn-1-syntax-and-encoding
            // let type = Asn1Der.encode("OBJECT_ID", IdentifierAttestation.LABELED_URI);
            // let value = Asn1Der.encode("UTF8STRING", URL + " " + label);
            //
            // let rdn = Asn1Der.encode("SEQUENCE_30", type + value);
            // let set = Asn1Der.encode("SET", rdn);
            //
            // return Asn1Der.encode("SEQUENCE_30", set);
            return `${IdentifierAttestation.LABELED_URI_LABEL}="${URL} ${label}"`;
        }
        static fromBytes(bytes) {
            let me = new this();
            me.fromBytes(bytes);
            if (!me.checkValidity()) {
                throw new Error("Could not validate object");
            }
            if (me.getVersion() == IdentifierAttestation.NFT_VERSION) {
                let x500Arr = DerUtility.Asn1Der.parseX500Names(me.getSubject());
                let found = false;
                x500Arr.forEach((item) => {
                    if (found)
                        return;
                    if (item.type == IdentifierAttestation.LABELED_URI_LABEL) {
                        found = true;
                        let typeAndIdentifier = item.value.split(' ');
                        if (typeAndIdentifier.length != 2) {
                            throw new Error("LabeledURI values should be separated with space and 2 items only: " + item.value);
                        }
                        me.type = typeAndIdentifier[0];
                        me.identifier = typeAndIdentifier[1];
                    }
                });
                if (!found) {
                    throw new Error("Cant find LABELED_URI");
                }
            }
            else {
                me.type = IdentifierAttestation.HIDDEN_TYPE;
                me.identifier = IdentifierAttestation.HIDDEN_IDENTIFIER;
            }
            return me;
        }
        setSubjectPublicKeyInfo(keys) {
            this.subjectKey = keys;
        }
        setCommitment(encodedRiddle) {
            this.commitment = encodedRiddle;
        }
        checkValidity() {
            if (!super.checkValidity()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "IdentifierAttestation super.checkValidity() filed;");
                return false;
            }
            if (this.getVersion() != IdentifierAttestation.HIDDEN_IDENTIFIER_VERSION && this.getVersion() != IdentifierAttestation.NFT_VERSION) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "The version number is " + this.getVersion() + ", it must be either " + IdentifierAttestation.HIDDEN_IDENTIFIER_VERSION + " or " + IdentifierAttestation.NFT_VERSION);
                return false;
            }
            if (this.getSigningAlgorithm() !== IdentifierAttestation.DEFAULT_SIGNING_ALGORITHM) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "The subject is supposed to only be an Ethereum address as the Common Name");
                return false;
            }
            if (this.getVersion() == IdentifierAttestation.NFT_VERSION) {
                if (!this.subject.includes(IdentifierAttestation.LABELED_URI_LABEL + "=")) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "A NFT Identifier attestation must have a labeled uri as subject. subject = " + this.getSubject());
                    return false;
                }
            }
            if (this.getVersion() == IdentifierAttestation.HIDDEN_IDENTIFIER_VERSION) {
                // Ensure that there is a commitment as part of the attestation
                if (this.getCommitment().length < AttestationCrypto_1.AttestationCrypto.BYTES_IN_DIGEST) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "The attestation does not contain a valid commitment");
                    return false;
                }
            }
            return true;
        }
        setIssuer(issuer) {
            this.issuer = issuer;
        }
        getSerialNumber() {
            return this.serialNumber;
        }
        setSerialNumber(serialNumber) {
            this.serialNumber = serialNumber;
        }
        getAddress() {
            // Remove the "CN=" prefix
            return this.subjectKey.getAddress();
        }
    }
    exports.IdentifierAttestation = IdentifierAttestation;
    IdentifierAttestation.OID_OCTETSTRING = "1.3.6.1.4.1.1466.115.121.1.40";
    // ECDSA with recommended (for use with keccak signing since there is no explicit standard OID for this)
    IdentifierAttestation.DEFAULT_SIGNING_ALGORITHM = "1.2.840.10045.4.2";
    IdentifierAttestation.HIDDEN_IDENTIFIER_VERSION = 18;
    IdentifierAttestation.NFT_VERSION = 19;
    IdentifierAttestation.HIDDEN_TYPE = "HiddenType";
    IdentifierAttestation.HIDDEN_IDENTIFIER = "HiddenIdentifier";
    // SEE RFC 2079
    IdentifierAttestation.LABELED_URI = "1.3.6.1.4.1.250.1.57";
    IdentifierAttestation.LABELED_URI_LABEL = "labeledURI";

    });

    var SignedIdentifierAttestation_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignedIdentifierAttestation = void 0;







    class SignedIdentifierAttestation {
        constructor() { }
        static fromBytes(uint8data, attestorKeys) {
            const myAttestation = asn1_schema_1.AsnParser.parse(uint8data, AttestationFramework.MyAttestation);
            return this.fromASNType(myAttestation, attestorKeys, uint8data);
        }
        static fromASNType(myAttestation, attestorKeys, uint8data = new Uint8Array(0)) {
            let me = new this();
            me.uint8data = uint8data;
            me.attestorKeys = attestorKeys;
            let algorithmEncoded = myAttestation.signatureAlgorithm.algorithm;
            me.att = IdentifierAttestation_1.IdentifierAttestation.fromBytes(myAttestation.signedInfo);
            // me.signature = myAttestation.signatureValue;
            me.signature = (0, utils$1.uint8tohex)(new Uint8Array(myAttestation.signatureValue));
            if (algorithmEncoded !== me.att.getSigningAlgorithm()) {
                throw new Error("Algorithm specified is not consistent");
            }
            me.constructorCheck();
            return me;
        }
        static fromData(att, attestationSigningKey) {
            let me = new this();
            me.attestorKeys = attestationSigningKey;
            me.att = att;
            // me.att.setSigningAlgorithm(SignedIdentifierAttestation.ECDSA_WITH_SHA256);
            // me.signature = attestationSigningKey.signDeterministicSHA256( Array.from(me.att.getPrehash()));
            me.signature = me.attestorKeys.signRawBytesWithEthereum(Array.from(me.att.getPrehash()));
            me.constructorCheck();
            return me;
        }
        verify() {
            try {
                let res = this.attestorKeys.verifyBytesWithEthereum((0, utils$1.hexStringToArray)(this.att.getDerEncoding()), this.signature);
                return res;
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                return false;
            }
        }
        checkValidity() {
            return this.getUnsignedAttestation().checkValidity();
        }
        getUnsignedAttestation() {
            return this.att;
        }
        getDerEncoding() {
            if (this.uint8data && this.uint8data.length) {
                return (0, utils$1.uint8tohex)(new Uint8Array(this.uint8data));
            }
            else {
                return this.constructSignedAttestation(this.getUnsignedAttestation(), this.signature);
            }
        }
        constructSignedAttestation(unsignedAtt, signature) {
            let rawAtt = unsignedAtt.getPrehash();
            let alg = DerUtility.Asn1Der.encode('OBJECT_ID', unsignedAtt.getSigningAlgorithm());
            let res = (0, utils$1.uint8tohex)(rawAtt) +
                DerUtility.Asn1Der.encode('SEQUENCE_30', alg) +
                DerUtility.Asn1Der.encode('BIT_STRING', (0, utils$1.uint8tohex)(KeyPair_1.KeyPair.anySignatureToRawUint8(signature)));
            return DerUtility.Asn1Der.encode('SEQUENCE_30', res);
        }
        constructorCheck() {
            // TODO implement
            // if (!(verificationKey instanceof ECPublicKeyParameters)) {
            //     throw new UnsupportedOperationException("Attestations must be signed with ECDSA key");
            // }
            if (!this.verify()) {
                throw new Error("The signature is not valid");
            }
        }
    }
    exports.SignedIdentifierAttestation = SignedIdentifierAttestation;
    SignedIdentifierAttestation.ECDSA_WITH_SHA256 = "1.2.840.10045.4.3.2";

    });

    var AttestedObject_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttestedObject = void 0;








    class AttestedObject {
        constructor() { }
        create(attestableObject, att, attestationSecret, objectSecret) {
            this.attestableObject = attestableObject;
            this.att = att;
            this.attestationSecret = attestationSecret;
            this.objectSecret = objectSecret;
            this.crypto = new AttestationCrypto_1.AttestationCrypto();
            this.pok = this.makeProof(attestationSecret, objectSecret, this.crypto);
            this.derEncodedProof = this.pok.getDerEncoding();
            this.fillPresignData();
        }
        setWebDomain(domain) {
            this.webDomain = domain;
        }
        fillPresignData() {
            this.preSignEncoded =
                this.attestableObject.getDerEncoding() +
                    this.att.getDerEncoding() +
                    this.pok.getDerEncoding();
            this.encoding = DerUtility.Asn1Der.encode('SEQUENCE_30', this.preSignEncoded);
        }
        fromDecodedData(attestableObject, att, pok) {
            this.attestableObject = attestableObject;
            this.att = att;
            this.pok = pok;
            this.fillPresignData();
            this.userKeyPair = this.att.getUnsignedAttestation().getSubjectPublicKeyInfo();
            this.constructorCheck();
        }
        // async sign(){
        //     let userData = {
        //         payload: this.encoding,
        //         description: AttestedObject.Eip712UserDataDescription,
        //         timestamp: new Date().getTime()
        //     };
        //
        //     return await SignatureUtility.signEIP712WithBrowserWallet(this.webDomain, userData, AttestedObject.Eip712UserDataTypes, AttestedObject.Eip712UserDataPrimaryName );
        // }
        verify() {
            if (!this.attestableObject.verify()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not verify attestable object");
                return false;
            }
            if (!this.att.verify()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not verify attestation");
                return false;
            }
            if (!this.crypto.verifyEqualityProof(this.att.getUnsignedAttestation().getCommitment(), this.attestableObject.getCommitment(), this.pok)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not verify the consistency between the commitment in the attestation and the attested object");
                return false;
            }
            return true;
        }
        static fromBytes(asn1, decoder, attestorKey, attestable, issuerKeys) {
            let attested = asn1_schema_1.AsnParser.parse(asn1, decoder);
            let me = new this();
            me.attestableObject = new attestable();
            me.attestableObject.fromBytes(attested.signedToken, issuerKeys);
            me.att = SignedIdentifierAttestation_1.SignedIdentifierAttestation.fromBytes(new Uint8Array(attested.attestation), attestorKey);
            let pok = new UsageProofOfExponent_1.UsageProofOfExponent();
            pok.fromBytes(new Uint8Array(attested.proof));
            me.pok = pok;
            me.userKeyPair = me.att.getUnsignedAttestation().getSubjectPublicKeyInfo();
            // TODO: Use getter to instantiate AttestationCrypto when required
            me.crypto = new AttestationCrypto_1.AttestationCrypto();
            me.constructorCheck();
            return me;
        }
        makeProof(attestationSecret, objectSecret, crypto) {
            // TODO Bob should actually verify the attestable object is valid before trying to cash it to avoid wasting gas
            // Need to decode twice since the standard ASN1 encodes the octet string in an octet string
            // TODO we dont parse that value, because its already parsed to this.riddle
            // let extensions = this.att.getUnsignedAttestation().getExtensions();//.getObjectAt(0));
            // Index in the second DER sequence is 2 since the third object in an extension is the actual value
            // TODO we dont parse that value, because its already parsed to this.riddle
            // let attCom: Uint8Array = new Uint8Array(extensions.extension.extnValue);
            let attCom = this.att.getUnsignedAttestation().getCommitment();
            let objCom = this.attestableObject.getCommitment();
            let pok = crypto.computeEqualityProof((0, utils$1.uint8tohex)(attCom), (0, utils$1.uint8tohex)(objCom), attestationSecret, objectSecret);
            if (!crypto.verifyEqualityProof(attCom, objCom, pok)) {
                throw new Error("The redeem proof did not verify");
            }
            return pok;
        }
        getAttestableObject() {
            return this.attestableObject;
        }
        getAtt() {
            return this.att;
        }
        getDerEncodeProof() {
            return this.derEncodedProof;
        }
        getDerEncoding() {
            return this.encoding;
        }
        constructorCheck() {
            if (!this.verify()) {
                throw new Error("The redeem request is not valid");
            }
        }
        checkValidity(ethAddress = null) {
            // CHECK: that it is an identifier attestation otherwise not all the checks of validity needed gets carried out
            try {
                let attEncoded = this.att.getUnsignedAttestation().getDerEncoding();
                let std = IdentifierAttestation_1.IdentifierAttestation.fromBytes(new Uint8Array((0, utils$1.hexStringToArray)(attEncoded)));
                // CHECK: perform the needed checks of an identifier attestation
                if (!std.checkValidity()) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "The attestation is not a valid standard attestation");
                    return false;
                }
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "The attestation is invalid");
                return false;
            }
            try {
                // CHECK: that the cheque is still valid
                if (!this.getAttestableObject().checkValidity()) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Cheque is not valid");
                    return false;
                }
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Cheque validation failed");
                return false;
            }
            try {
                // CHECK: the Ethereum address on the attestation matches receivers signing key
                // let attestationEthereumAddress: string = this.getAtt().getUnsignedAttestation().getSubject().substring(3);
                let attestationEthereumAddress = this.getAtt().getUnsignedAttestation().getAddress();
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'attestationEthereumAddress: ' + attestationEthereumAddress);
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'providedEthereumAddress: ' + ethAddress);
                if (attestationEthereumAddress.toLowerCase() !== ethAddress.toLowerCase()) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "The attestation is not to the same Ethereum user who is sending this request");
                    return false;
                }
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Address validation failed");
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, e);
                return false;
            }
            return true;
        }
    }
    exports.AttestedObject = AttestedObject;
    AttestedObject.Eip712UserData = {
        payload: '',
        description: '',
        timestamp: 0
    };
    // static Eip712UserDataTypes: {[index: string]:string}[]  = [
    AttestedObject.Eip712UserDataTypes = [
        { name: 'payload', type: 'string' },
        { name: 'description', type: 'string' },
        { name: 'timestamp', type: 'uint256' },
    ];
    AttestedObject.Eip712UserDataPrimaryName = "Authentication";
    AttestedObject.Eip712UserDataDescription = "Single-use authentication";

    });

    var AttestationRequest = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Identifier = void 0;


    // IdentifierType ::= INTEGER { email(0), phone(1)}
    class Identifier {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], Identifier.prototype, "type", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: ProofOfExponentASN.Proof })
    ], Identifier.prototype, "proof", void 0);
    exports.Identifier = Identifier;

    });

    var AttestationRequest_2 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttestationRequest = void 0;








    class AttestationRequest$1 {
        constructor() { }
        static fromData(type, pok) {
            let me = new this();
            me.type = type;
            me.pok = pok;
            if (!me.verify()) {
                throw new Error("The proof is not valid");
            }
            return me;
        }
        getDerEncoding() {
            let res = DerUtility.Asn1Der.encode('INTEGER', this.type) +
                this.pok.getDerEncoding();
            return DerUtility.Asn1Der.encode('SEQUENCE_30', res);
        }
        static fromBytes(asn1) {
            let me = new this();
            let identifier;
            try {
                identifier = asn1_schema_1.AsnParser.parse(asn1, AttestationRequest.Identifier);
                me.type = identifier.type;
            }
            catch (e) {
                throw new Error('Cant parse AttestationRequest Identifier');
            }
            try {
                let riddleEnc = new Uint8Array(identifier.proof.riddle);
                let challengeEnc = new Uint8Array(identifier.proof.challengePoint);
                let tPointEnc = new Uint8Array(identifier.proof.responseValue);
                let nonce = new Uint8Array(identifier.proof.nonce);
                let riddle = Point_1.Point.decodeFromHex((0, utils$1.uint8tohex)(riddleEnc), Point_1.CURVE_BN256);
                let challenge = (0, utils$1.uint8ToBn)(challengeEnc);
                let tPoint = Point_1.Point.decodeFromHex((0, utils$1.uint8tohex)(tPointEnc), Point_1.CURVE_BN256);
                me.pok = FullProofOfExponent_1.FullProofOfExponent.fromData(riddle, tPoint, challenge, nonce);
            }
            catch (e) {
                throw new Error('Cant create FullProofOfExponent');
            }
            if (!me.verify()) {
                throw new Error("Could not verify the proof");
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'proof OK');
            return me;
        }
        verify() {
            let AttestationCryptoInstance = new AttestationCrypto_1.AttestationCrypto();
            if (!AttestationCryptoInstance.verifyFullProof(this.pok)) {
                return false;
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'VerifyAttestationRequestProof OK');
            return true;
        }
        getPok() {
            return this.pok;
        }
        getType() {
            return this.type;
        }
        getAsn() {
            const pok = this.getPok().getAsnType();
            const identity = new AttestationRequest.Identifier();
            identity.type = this.getType();
            identity.proof = pok;
            return identity;
        }
        getAsnEncoded() {
            return asn1_schema_1.AsnSerializer.serialize(this.getAsn());
        }
    }
    exports.AttestationRequest = AttestationRequest$1;

    });

    var SignatureUtility_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureUtility = void 0;





    let ec = new elliptic_1.ec('secp256k1');

    class SignatureUtility {
        static sign(str, keys) {
            let ecKey = ec.keyFromPrivate(keys.getPrivateAsHexString(), 'hex');
            let encodingHash = sha3.keccak256((0, utils$1.hexStringToArray)(str));
            let signature = ecKey.sign(encodingHash);
            return signature.toDER('hex');
        }
        static verify(str, signature, keys) {
            return SignatureUtility.verifyArrayBuf((0, utils$1.hexStringToArray)(str), signature, keys);
        }
        static verifyArrayBuf(arr, signature, keys) {
            let ecKey = ec.keyFromPublic(keys.getPublicKeyAsHexStr(), 'hex');
            let encodingHash = sha3.keccak256(arr);
            return ecKey.verify(encodingHash, signature);
        }
        static async signMessageWithBrowserWallet(message) {
            await SignatureUtility.connectMetamaskAndGetAddress();
            let provider = new ethers_1.ethers.providers.Web3Provider(window.ethereum);
            let signer = provider.getSigner();
            return await signer.signMessage(message);
        }
        static async recoverPublicKeyFromMessageSignature(message, signature) {
            const msgHash = ethers_1.ethers.utils.hashMessage(message);
            const digest = ethers_1.ethers.utils.arrayify(msgHash);
            return await ethers_1.ethers.utils.recoverPublicKey(digest, signature);
        }
        /*
        recover public key in format 0x042f196ec33ad04c6... 132chars
         */
        static recoverPublicKeyFromTypedMessageSignature(messageObj, signature) {
            let messageAsPrefixedHexString, pubKey;
            try {
                let rawPayload = messageObj.message.payload;
                // messageObj.message.payload = sha3.keccak256(rawPayload);
                // same result:
                messageObj.message.payload = ethers_1.ethers.utils.id(rawPayload).substr(2);
                let types = messageObj.types;
                delete types.EIP712Domain;
                messageAsPrefixedHexString = utils$2._TypedDataEncoder.hash(messageObj.domain, types, messageObj.message);
                messageObj.message.payload = rawPayload;
            }
            catch (e) {
                const m = 'Cant sign data, possibly wrong format. ' + e;
                throw new Error(m);
            }
            try {
                pubKey = (0, utils$2.recoverPublicKey)((0, utils$1.hexStringToUint8)(messageAsPrefixedHexString.substr(2)), signature);
            }
            catch (e) {
                const m = 'Cant recoverPublicKey. ' + e;
                throw new Error(m);
            }
            return pubKey;
        }
        static async signEIP712WithBrowserWallet(webDomain, userDataValues, userDataTypes, primaryName, userKey = null) {
            // How its encoded at metamask ...
            // All properties on a domain are optional
            // const domain = {
            //     name: 'Devcon Ticket',
            //     version: '1',
            //     chainId: 3,
            //     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
            //     salt: "0x64656667646667657267657274796a74796a6231000000000000000000000000" // 32-byte value
            // };
            // const data = JSON.stringify({
            //     types: {
            //         EIP712Domain: domain,
            //         Bid: bid,
            //         Identifier: identifier,
            //     },
            //     domain: domainData,
            //     primaryType: "Bid",
            //     message: message
            // });
            // web3.currentProvider.sendAsync(
            // {
            //     method: "eth_signTypedData_v3",
            //     params: [signer, data],
            //     from: signer
            // },
            try {
                let userAddress;
                let signer;
                if (userKey) {
                    // it should be node.js lets use defined KeyPair
                    signer = new ethers_1.ethers.Wallet('0x' + userKey.getPrivateAsHexString());
                }
                else {
                    // it should be browser. use Metamask
                    //userAddress = await SignatureUtility.connectMetamaskAndGetAddress();
                    let provider = new ethers_1.ethers.providers.Web3Provider(window.ethereum);
                    //let network = await provider.getNetwork();
                    signer = provider.getSigner();
                }
                if (!signer)
                    throw new Error("Active Wallet required");
                // let ethAddress = await signer.getAddress();
                let Eip712Data = SignatureUtility.Eip712Data;
                // All properties on a domain are optional
                const domainData = {
                    // chainId: network.chainId,
                    name: webDomain,
                    // verifyingContract: userAddress,
                    // salt: AttestationCrypto.generateRandomHexString(32), // 32-byte value
                    version: Eip712Data['PROTOCOL_VERSION']
                };
                // The named list of all type definitions
                const dataTypes = {};
                dataTypes[primaryName] = userDataTypes;
                // hash payload string->hexString to make smaller message to sign
                let userDataValuesWithHashedPayload = Object.assign({}, userDataValues);
                userDataValuesWithHashedPayload.payload = sha3.keccak256(userDataValuesWithHashedPayload.payload);
                // this is internal logic, we can use it for debug
                // logger(DEBUGLEVEL.HIGH, 'lets try to sign data directly');
                // const populated = await _TypedDataEncoder.resolveNames(domainData, dataTypes, userDataValues, (name: string) => {
                //     return window.ethereum.resolveName(name);
                // });
                // logger(DEBUGLEVEL.HIGH, '!!!!!!!!!!!!!!!!!!!!!!!!!!!');
                // logger(DEBUGLEVEL.HIGH, domainData, dataTypes, userDataValues, populated);
                //
                // let typedMsg = _TypedDataEncoder.getPayload(populated.domain, dataTypes, populated.value);
                // let msgParams = JSON.stringify(typedMsg);
                // logger(DEBUGLEVEL.HIGH, 'msgParams');
                // logger(DEBUGLEVEL.HIGH, msgParams);
                // let directlySigned = await window.ethereum.send("eth_signTypedData_v4", [
                //      userAddresses[0].toLowerCase(), msgParams
                // ]);
                // let signatureD = directlySigned.result;
                // sign eip712 with custom key
                // let privateKey = "0x0123456789012345678901234567890123456789012345678901234567890123";
                // let wallet = new ethers.Wallet(privateKey);
                // let signature = await wallet._signTypedData(domainData, dataTypes, userDataValuesWithHashedPayload);
                // Connect a wallet to mainnet
                // let provider = ethers.getDefaultProvider();
                // let walletWithProvider = new ethers.Wallet(privateKey, provider);
                let signature = await signer._signTypedData(domainData, dataTypes, userDataValuesWithHashedPayload);
                let completeData = {
                    types: {
                        EIP712Domain: SignatureUtility.Eip712domainTypes,
                    },
                    primaryType: primaryName,
                    message: userDataValues,
                    domain: domainData,
                };
                completeData.types[primaryName] = dataTypes[primaryName];
                let dataStringified = JSON.stringify(completeData);
                let externalAuthenticationData = {
                    signatureInHex: signature,
                    // jsonRpc: Eip712Data['JSON_RPC_VER'],
                    // chainId: network.chainId,
                    jsonSigned: dataStringified
                };
                return JSON.stringify(externalAuthenticationData);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'Cant sign eip712 data. Error: ' + e);
                return '';
            }
        }
        static async connectMetamaskAndGetAddress() {
            if (!window.ethereum) {
                throw new Error('Please install metamask before.');
            }
            // const userAddresses = await window.ethereum.request({ method: 'eth_accounts' });
            const userAddresses = await window.ethereum.request({ method: 'eth_requestAccounts' });
            if (!userAddresses || !userAddresses.length) {
                throw new Error("Active Wallet required");
            }
            return userAddresses[0];
        }
        static getChainIdFromSignature(signature) {
            let recoveryByte = Number("0x" + signature.substr(-2));
            if (recoveryByte == 27 || recoveryByte == 28) {
                return 0;
            }
            // recovery byte is chainId * 2 + 35 for chainId >= 1
            return (recoveryByte - 35) >> 1;
        }
        static convertToPersonalEthMessage(message) {
            return (0, utils$1.stringToArray)(this.ethereumPrefix + message.length + message);
        }
    }
    exports.SignatureUtility = SignatureUtility;
    SignatureUtility.ethereumPrefix = "\u0019Ethereum Signed Message:\n";
    SignatureUtility.OID_ECDSA_PUBLICKEY = "1.2.840.10045.2.1";
    // static Eip712Types: {[index: string]:string}  = {
    //     STRING: "string",
    //     BYTES32: "bytes32",
    //     UINT64: "uint64",
    //     UINT256: "uint256",
    //     ADDRESS: "address",
    // }
    SignatureUtility.Eip712Data = {
        PROTOCOL_VERSION: "0.1",
    };
    SignatureUtility.Eip712domainTypes = [
        { name: "name", type: "string" },
        { name: "version", type: "string" },
        // {name: "chainId", type: "uint256"},
        // {name: "verifyingContract", type: "address"},
        // {name: "salt", type: "bytes32"},
    ];

    });

    var ValidationTools_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationTools = void 0;


    class ValidationTools {
        static validateTimestamp(timestamp, currentTime, timestampSlack) {
            if (timestamp > currentTime + timestampSlack) {
                return false;
            }
            if (timestamp < currentTime - timestampSlack) {
                return false;
            }
            return true;
        }
        static isAddress(address) {
            if (address.toLowerCase().match(/^0x[a-f0-9]{40}$/i) === null) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'Wrong Ethereum Address');
                return false;
            }
            return true;
        }
        static isNullOrAddress(address) {
            if (address == null) {
                return true;
            }
            return this.isAddress(address);
        }
    }
    exports.ValidationTools = ValidationTools;
    ValidationTools.ADDRESS_LENGTH_IN_BYTES = 42;

    });

    var Nonce_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Nonce = void 0;





    class Nonce {
        constructor() {
            this.DEFAULT_NONCE_TIME_LIMIT_MS = 1000 * 60 * 20; // 20 min
        }
        static async makeNonce(senderAddress = '', receiverIdentifier, otherData = new Uint8Array(0), timestampInMs = 0) {
            // Hash to ensure all variable length components is encoded with constant length
            if (!senderAddress) {
                senderAddress = await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
            }
            if (!ValidationTools_1.ValidationTools.isAddress(senderAddress)) {
                throw new Error("Address is not valid");
            }
            // senderAddress = '0X'+(senderAddress.substr(2).toUpperCase());
            senderAddress = senderAddress.toUpperCase();
            if (!timestampInMs) {
                timestampInMs = Date.now();
            }
            return (0, utils$1.uint8merge)([
                Uint8Array.from((0, utils$1.stringToArray)(senderAddress)),
                (0, utils$1.hashStringTo32bytesUint8)(receiverIdentifier),
                (0, utils$1.getInt64Bytes)(timestampInMs),
                otherData
            ]);
        }
        validateNonce(nonce, senderAddress, receiverIdentifier, minTime, maxTime, otherData = new Uint8Array(0)) {
            if (!Nonce.validateAddress(nonce, senderAddress)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'validateAddress check failed for ' + senderAddress);
                return false;
            }
            if (!this.validateReceiverIdentifier(nonce, receiverIdentifier)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'validateReceiverIdentifier check failed');
                return false;
            }
            if (!this.validateTimestamp(nonce, minTime, maxTime)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'timestamp check failed');
                return false;
            }
            if (!this.validateOtherData(nonce, otherData)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'otherData check failed');
                return false;
            }
            return this.validateOtherData(nonce, otherData);
        }
        validateTimestamp(nonce, minTime, maxTime) {
            let nonceTimeStamp = Nonce.getTimestamp(nonce);
            let nonceStamp = new Timestamp_1.Timestamp(nonceTimeStamp);
            nonceStamp.setValidity(maxTime - minTime);
            return nonceStamp.validateAgainstExpiration(maxTime);
        }
        static validateAddress(nonce, address) {
            let nonceAddress = (0, utils$1.uint8toString)(nonce.slice(Nonce.senderAddressIndexStart, Nonce.senderAddressIndexStop));
            if (address.toUpperCase() === nonceAddress.toUpperCase())
                return true;
            (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'nonceAddress = ' + nonceAddress);
            return false;
        }
        validateReceiverIdentifier(nonce, receiverIdentifier) {
            if ((0, utils$1.uint8tohex)((0, utils$1.hashStringTo32bytesUint8)(receiverIdentifier)).toLowerCase() === (0, utils$1.uint8tohex)(nonce.slice(Nonce.receiverIdentifierIndexStart, Nonce.receiverIdentifierIndexStop)).toLowerCase())
                return true;
            return false;
        }
        validateOtherData(nonce, otherData) {
            if ((0, utils$1.uint8tohex)(otherData).toLowerCase() === (0, utils$1.uint8tohex)(nonce.slice(Nonce.otherDataIndexStart, Nonce.otherDataIndexStart + otherData.length)).toLowerCase())
                return true;
            return false;
        }
        static getTimestamp(nonce) {
            let time = nonce.slice(Nonce.timestampIndexStart, Nonce.timestampIndexStop);
            let bn = (0, utils$1.uint8ToBn)(time);
            if (bn > BigInt(Number.MAX_SAFE_INTEGER))
                throw new Error('timestamp value bigger than MAX_SAFE_INTEGER');
            return Number(bn);
        }
    }
    exports.Nonce = Nonce;
    Nonce.LONG_BYTES = 8;
    Nonce.senderAddressIndexStart = 0;
    Nonce.senderAddressIndexStop = ValidationTools_1.ValidationTools.ADDRESS_LENGTH_IN_BYTES;
    Nonce.receiverIdentifierIndexStart = Nonce.senderAddressIndexStop;
    // private static receiverIdentifierIndexStop: number = Nonce.receiverIdentifierIndexStart + AttestationCrypto.BYTES_IN_DIGEST;
    Nonce.receiverIdentifierIndexStop = Nonce.receiverIdentifierIndexStart + 256 / 8; //AttestationCrypto.BYTES_IN_DIGEST;
    Nonce.timestampIndexStart = Nonce.receiverIdentifierIndexStop;
    Nonce.timestampIndexStop = Nonce.timestampIndexStart + Nonce.LONG_BYTES;
    Nonce.otherDataIndexStart = Nonce.timestampIndexStop;

    });

    var UseToken_1 = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UseToken = void 0;

    class UseToken {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], UseToken.prototype, "signedToken", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], UseToken.prototype, "attestation", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Any })
    ], UseToken.prototype, "proof", void 0);
    exports.UseToken = UseToken;

    });

    var tokenData = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XMLconfigData = void 0;


    exports.XMLconfigData = {
        attestationOrigin: "http://stage.attestation.id",
        tokensOrigin: "https://devcontickets.herokuapp.com/outlet/",
        tokenUrlName: 'ticket',
        tokenSecretName: 'secret',
        unsignedTokenDataName: 'ticket',
        // tokenParserUrl: '',
        tokenParser: SignedDevconTicket_1.SignedDevconTicket,
        localStorageItemName: 'dcTokens',
        // base64senderPublicKey: '04950C7C0BED23C3CAC5CC31BBB9AAD9BB5532387882670AC2B1CDF0799AB0EBC764C267F704E8FDDA0796AB8397A4D2101024D24C4EFFF695B3A417F2ED0E48CD',
        base64senderPublicKeys: {
            "6": KeyPair_1.KeyPair.publicFromBase64orPEM('-----BEGIN PUBLIC KEY-----\n' +
                'MIIBMzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA////////////////\n' +
                '/////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n' +
                'AAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEEeb5m\n' +
                'fvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0\n' +
                'SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQNkFB\n' +
                'AgEBA0IABJUMfAvtI8PKxcwxu7mq2btVMjh4gmcKwrHN8HmasOvHZMJn9wTo/doH\n' +
                'lquDl6TSEBAk0kxO//aVs6QX8u0OSM0=\n' +
                '-----END PUBLIC KEY-----'),
            // LisCon Public Key
            "26": KeyPair_1.KeyPair.publicFromBase64orPEM('-----BEGIN PUBLIC KEY-----\n' +
                'MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEQKYTwFMIzSq1QVxoRKoOZXLQ9mUhce8M\n' +
                'dIzvJx3unbpR3m3TiuWKZKTP4/XCPnS56d1tAhjM43hHjHbZ0k3RKQ==\n' +
                '-----END PUBLIC KEY-----'),
        },
        base64attestorPubKey: 
        // stage.attestation.id public key
        "MIIBMzCB7AYHKoZIzj0CATCB4AIBATAsBgcqhkjOPQEBAiEA/////////////////////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEEeb5mfvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio/Re0SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQNkFBAgEBA0IABL+y43T1OJFScEep69/yTqpqnV/jzONz9Sp4TEHyAJ7IPN9+GHweCX1hT4OFxt152sBN3jJc1s0Ymzd8pNGZNoQ=",
        webDomain: 'devcon.org'
    };

    });

    var Eip712Validator_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Eip712Validator = void 0;








    class Eip712Validator {
        constructor() {
            this.XMLConfig = tokenData.XMLconfigData;
        }
        static stringIsAValidUrl(domain) {
            let parsedUrl;
            try {
                parsedUrl = new URL(domain);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'cant construct url. Error:', e);
                return false;
            }
            return parsedUrl.protocol === "http:" || parsedUrl.protocol === "https:";
        }
        ;
        setDomainAndTimout(domain) {
            if (!Eip712Validator.stringIsAValidUrl(domain))
                throw new Error('wrong domain');
            this.domain = domain;
        }
        setDomain(domain) {
            if (!Eip712Validator.stringIsAValidUrl(domain))
                throw new Error('wrong domain');
            this.domain = domain;
        }
        getDomain() {
            return this.domain;
        }
        validateRequest(jsonInput) {
            try {
                let authenticationData = JSON.parse(jsonInput);
                let authenticationRootNode = JSON.parse(authenticationData.jsonSigned);
                let eip712Domain = authenticationRootNode.domain;
                let eip712Message = authenticationRootNode.message;
                let attestedObject = this.retrieveAttestedObject(eip712Message);
                // TODO implement
                return this.validateDomain(eip712Domain);
                // && this.validateAuthentication(auth);
                // accept &= verifySignature(authenticationData, attestedObject.getUserPublicKey());
                // accept &= validateAttestedObject(attestedObject);
                // return accept;
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'Validate error!', e);
                return false;
            }
        }
        // TODO
        // public boolean verifyTimeStamp(String timestamp) {
        validateDomain(domainToCheck) {
            if (domainToCheck.name.toLowerCase() !== this.domain.toLowerCase()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Domain name is not valid");
                return false;
            }
            if (domainToCheck.version !== SignatureUtility_1.SignatureUtility.Eip712Data['PROTOCOL_VERSION']) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Protocol version is wrong");
                return false;
            }
            // we dont use that fields at the moment. maybe have to uncomment and fix in the future
            // if (domainToCheck.chainId !== encoder.getChainId())) {
            //     logger(DEBUGLEVEL.LOW, "Chain ID is wrong");
            //     return false;
            // }
            // if (domainToCheck.verifyingContract !== encoder.getVerifyingContract()) {
            //     logger(DEBUGLEVEL.LOW, "Verifying contract is wrong");
            //     return false;
            // }
            // if (domainToCheck.salt !== encoder.getSalt()) {
            //     logger(DEBUGLEVEL.LOW, "Salt is wrong");
            //     return false;
            // }
            return true;
        }
        retrieveAttestedObject(auth) {
            let attestedObjectHex = auth.payload;
            let attestorKey = KeyPair_1.KeyPair.publicFromBase64orPEM(tokenData.XMLconfigData.base64attestorPubKey);
            let issuerKeys = tokenData.XMLconfigData.base64senderPublicKeys;
            let decodedAttestedObject = AttestedObject_1.AttestedObject.fromBytes((0, utils$1.hexStringToUint8)(attestedObjectHex), UseToken_1.UseToken, attestorKey, Ticket_1.Ticket, issuerKeys);
            return decodedAttestedObject;
        }
        verifySignature(signedJsonInput, pkAddress) {
            let tokenData = JSON.parse(signedJsonInput);
            let signatureInHex = tokenData.signatureInHex;
            let jsonSigned = JSON.parse(tokenData.jsonSigned);
            let publicKey = SignatureUtility_1.SignatureUtility.recoverPublicKeyFromTypedMessageSignature(jsonSigned, signatureInHex);
            let userKey = KeyPair_1.KeyPair.fromPublicHex(publicKey.substr(2));
            if (pkAddress.toLowerCase() !== jsonSigned.message.address.toLowerCase()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'message.address is not equal pkAddress');
                return false;
            }
            if (pkAddress.toLowerCase() !== userKey.getAddress().toLowerCase()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'Recovered address is not equal pkAddress');
                return false;
            }
            return true;
        }
    }
    exports.Eip712Validator = Eip712Validator;

    });

    var Eip712Token_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Eip712Token = void 0;

    class Eip712Token extends Eip712Validator_1.Eip712Validator {
    }
    exports.Eip712Token = Eip712Token;

    });

    var Eip712AttestationRequest_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Eip712AttestationRequest = void 0;








    class Eip712AttestationRequest extends Eip712Token_1.Eip712Token {
        constructor(userKey = null, acceptableTimeLimit = Timestamp_1.Timestamp.DEFAULT_TIME_LIMIT_MS) {
            super();
            // private publicKey: KeyPair;
            //static DEFAULT_TIME_LIMIT_MS:number = 1000*60*20; // 20 minutes
            this.Eip712UserDataTypes = [
                // {name: 'address', type: 'string'},
                { name: 'payload', type: 'string' },
                { name: 'description', type: 'string' },
                { name: 'timestamp', type: 'string' },
                { name: 'identifier', type: 'string' },
            ];
            this.Eip712UserDataPrimaryName = "AttestationRequest";
            this.Eip712UserDataDescription = "Linking Ethereum address to phone or email";
            this.userKey = userKey;
            this.acceptableTimeLimit = acceptableTimeLimit;
            this.usageValue = this.Eip712UserDataDescription;
        }
        setUsageValue(usageValue) {
            this.usageValue = usageValue;
        }
        async addData(attestorDomain, acceptableTimeLimit = Timestamp_1.Timestamp.DEFAULT_TIME_LIMIT_MS, identifier, request) {
            this.setDomain(attestorDomain);
            // this.attestationRequest = AttestationRequest.fromData(type,pok);
            this.attestationRequest = request;
            this.acceptableTimeLimit = acceptableTimeLimit;
            this.jsonEncoding = await this.makeToken(identifier);
            try {
                // decode JSON and fill publicKey
                this.fillJsonData(this.jsonEncoding);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                return false;
            }
        }
        fillJsonData(json) {
            if (!json)
                throw new Error('Empty json');
            this.jsonEncoding = json;
            let tokenData = JSON.parse(json);
            let signatureInHex = tokenData.signatureInHex;
            let jsonSigned = JSON.parse(tokenData.jsonSigned);
            this.eip712DomainData = jsonSigned.domain;
            this.data = jsonSigned.message;
            try {
                let publicKey = SignatureUtility_1.SignatureUtility.recoverPublicKeyFromTypedMessageSignature(jsonSigned, signatureInHex);
                this.requestorKeys = KeyPair_1.KeyPair.fromPublicHex(publicKey.substr(2));
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'restored address: ' + this.requestorKeys.getAddress());
            }
            catch (e) {
                let m = "Recover Address failed with error:" + e;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m, e);
                throw new Error(m);
            }
            if (!this.attestationRequest) {
                this.attestationRequest = AttestationRequest_2.AttestationRequest.fromBytes((0, utils$1.base64ToUint8array)(this.data.payload));
            }
            this.constructorCheck();
        }
        constructorCheck() {
            if (!this.verify()) {
                throw new Error("Could not verify Eip712 AttestationRequest");
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'Eip712 Attestaion Request verify OK');
        }
        async makeToken(identifier) {
            if (this.userKey) {
                this.userKey.getAddress();
            }
            else {
                await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
            }
            let nonceTimestamp = Nonce_1.Nonce.getTimestamp(this.attestationRequest.getPok().getNonce());
            let ts = new Timestamp_1.Timestamp(nonceTimestamp).getTimeAsString();
            let userData = {
                payload: (0, utils$1.hexStringToBase64Url)(this.attestationRequest.getDerEncoding()),
                description: this.usageValue,
                timestamp: ts,
                identifier: identifier,
                // address: userAddress,
            };
            return await SignatureUtility_1.SignatureUtility.signEIP712WithBrowserWallet(this.domain, userData, this.Eip712UserDataTypes, this.Eip712UserDataPrimaryName, this.userKey);
        }
        setAcceptableTimeLimit(limit) {
            this.acceptableTimeLimit = limit;
        }
        getJsonEncoding() {
            return this.jsonEncoding;
        }
        verify() {
            if (!this.attestationRequest.verify()) {
                return false;
            }
            // if (!this.verifySignature(this.jsonEncoding, this.data.address)) {
            //     return false;
            // }
            return this.verifyDomainData();
        }
        verifyDomainData() {
            return (this.eip712DomainData.name.toLowerCase() === this.getDomain().toLowerCase())
                && (this.eip712DomainData.version === SignatureUtility_1.SignatureUtility.Eip712Data['PROTOCOL_VERSION']);
        }
        checkValidity() {
            if (this.data.description !== this.usageValue) {
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, 'Description is not correct. :' + this.data.description + ' !== ' + this.usageValue);
                return false;
            }
            let timestamp = new Timestamp_1.Timestamp(this.data.timestamp);
            timestamp.setValidity(this.acceptableTimeLimit);
            if (!timestamp.validateTimestamp()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, `timestamp is not correct. timestamp = ${this.data.timestamp}, acceptableTimeLimit = ${this.acceptableTimeLimit}`);
                return false;
            }
            if (!new Nonce_1.Nonce().validateNonce(this.getPok().getNonce(), this.requestorKeys.getAddress(), this.domain, Timestamp_1.Timestamp.stringTimestampToLong(this.data.timestamp) - this.acceptableTimeLimit, Timestamp_1.Timestamp.stringTimestampToLong(this.data.timestamp) + this.acceptableTimeLimit)) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'nonce is not correct');
                return false;
            }
            return true;
        }
        getIdentifier() {
            return this.data.identifier;
        }
        getType() {
            return this.attestationRequest.getType();
        }
        getPok() {
            return this.attestationRequest.getPok();
        }
        getUserPublicKey() {
            return this.requestorKeys;
        }
    }
    exports.Eip712AttestationRequest = Eip712AttestationRequest;

    });

    var UseAttestation_1 = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UseAttestation = void 0;



    class UseAttestation {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AttestationFramework.MyAttestation })
    ], UseAttestation.prototype, "attestation", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], UseAttestation.prototype, "type", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: ProofOfExponentASN.Proof })
    ], UseAttestation.prototype, "proof", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AttestationFramework.PublicKeyInfoValue })
    ], UseAttestation.prototype, "sessionKey", void 0);
    exports.UseAttestation = UseAttestation;

    });

    var UseAttestation_2 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UseAttestation = void 0;







    class UseAttestation {
        static fromData(attestation, type, pok, sessionPublicKey) {
            let me = new this();
            me.attestation = attestation;
            me.type = type;
            me.pok = pok;
            me.sessionPublicKey = sessionPublicKey;
            me.encoding = me.makeEncoding(attestation, type, pok, sessionPublicKey);
            me.constructorCheck();
            return me;
        }
        static fromBytes(derEncoding, attestationVerificationKey) {
            let me = new this();
            let useAttest;
            try {
                useAttest = asn1_schema_1.AsnParser.parse(derEncoding, UseAttestation_1.UseAttestation);
            }
            catch (e) {
                throw new Error('Cant parse UseAttestationASN. ' + e);
            }
            try {
                me.attestation = SignedIdentifierAttestation_1.SignedIdentifierAttestation.fromASNType(useAttest.attestation, attestationVerificationKey);
                me.type = useAttest.type;
                me.pok = FullProofOfExponent_1.FullProofOfExponent.fromASNType(useAttest.proof);
                me.sessionPublicKey = KeyPair_1.KeyPair.publicFromSubjectPublicKeyValue(useAttest.sessionKey);
            }
            catch (e) {
                throw new Error("Cant decode internal data. " + e);
            }
            me.constructorCheck();
            return me;
        }
        constructorCheck() {
            if (!this.verify()) {
                throw new Error("The use attestation object is not valid");
            }
        }
        makeEncoding(attestation, type, pok, sessionKey) {
            let res = attestation.getDerEncoding()
                + DerUtility.Asn1Der.encode('INTEGER', type)
                + pok.getDerEncoding()
                + sessionKey.getAsnDerPublic();
            return DerUtility.Asn1Der.encode('SEQUENCE_30', res);
        }
        getAttestation() {
            return this.attestation;
        }
        getType() { return this.type; }
        getPok() {
            return this.pok;
        }
        getSessionPublicKey() {
            return this.sessionPublicKey;
        }
        getDerEncoding() {
            return this.encoding;
        }
        verify() {
            return this.attestation.verify() && new AttestationCrypto_1.AttestationCrypto().verifyFullProof(this.pok);
        }
        checkValidity() {
            return this.attestation.checkValidity();
        }
    }
    exports.UseAttestation = UseAttestation;

    });

    var Eip712AttestationUsage_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Eip712AttestationUsage = void 0;










    class Eip712AttestationUsage extends Eip712Token_1.Eip712Token {
        constructor(userKey = null, maxTokenValidityInMs = Timestamp_1.Timestamp.DEFAULT_TOKEN_TIME_LIMIT) {
            super();
            this.PLACEHOLDER_CHAIN_ID = 0;
            this.Eip712PrimaryName = "AttestationUsage";
            this.Eip712Description = "Prove that the \"identifier\" is the identifier hidden in attestation contained in\"payload\".";
            this.Eip712UserTypes = [
                { name: 'description', type: 'string' },
                { name: 'identifier', type: 'string' },
                { name: 'payload', type: 'string' },
                { name: 'timestamp', type: 'string' },
                { name: 'expirationTime', type: 'string' },
            ];
            this.maxTokenValidityInMs = maxTokenValidityInMs;
            this.userKey = userKey;
        }
        // TODO make signingKey universal
        async addData(attestorDomain, identifier, useAttestation) {
            this.setDomain(attestorDomain);
            this.useAttestation = useAttestation;
            try {
                this.jsonEncoding = await this.makeToken(identifier, useAttestation);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                throw new Error("Could not encode object. " + e);
            }
            try {
                // decode JSON and fill publicKey
                this.fillJsonData(this.jsonEncoding);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                return false;
            }
            this.constructorCheck();
        }
        fillJsonData(json, attestorKey = null) {
            if (!json) {
                throw new Error('Empty json');
            }
            if (attestorKey !== null) {
                this.attestorKey = attestorKey;
            }
            this.jsonEncoding = json;
            let tokenData = JSON.parse(json);
            let signatureInHex = tokenData.signatureInHex;
            let jsonSigned = JSON.parse(tokenData.jsonSigned);
            this.eip712DomainData = jsonSigned.domain;
            this.data = jsonSigned.message;
            try {
                let publicKey = SignatureUtility_1.SignatureUtility.recoverPublicKeyFromTypedMessageSignature(jsonSigned, signatureInHex);
                this.requestorKeys = KeyPair_1.KeyPair.fromPublicHex(publicKey.substr(2));
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'restored address: ' + this.requestorKeys.getAddress());
            }
            catch (e) {
                let m = "Recover Address failed with error:" + e;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m, e);
                throw new Error(m);
            }
            if (!this.useAttestation) {
                try {
                    (0, utils$1.logger)(config.DEBUGLEVEL.VERBOSE, (0, utils$1.uint8tohex)((0, utils$1.base64ToUint8array)(this.data.payload)));
                    this.useAttestation = UseAttestation_2.UseAttestation.fromBytes((0, utils$1.base64ToUint8array)(this.data.payload), this.attestorKey);
                }
                catch (e) {
                    let m = "Failed to read UseAttestation. " + e;
                    (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, m, e);
                    throw new Error(m);
                }
            }
            this.constructorCheck();
        }
        constructorCheck() {
            if (!this.verify()) {
                throw new Error("Could not verify Eip712 use attestation");
            }
        }
        // use Att
        async makeToken(identifier, useAttestation) {
            if (!this.userKey) {
                await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
            }
            let userData = {
                payload: (0, utils$1.hexStringToBase64Url)(useAttestation.getDerEncoding()),
                description: this.Eip712Description,
                timestamp: new Timestamp_1.Timestamp().getTimeAsString(),
                identifier: identifier,
                expirationTime: new Timestamp_1.Timestamp(Date.now() + this.maxTokenValidityInMs).getTimeAsString(),
            };
            return await SignatureUtility_1.SignatureUtility.signEIP712WithBrowserWallet(this.domain, userData, this.Eip712UserTypes, this.Eip712PrimaryName, this.userKey);
        }
        proofLinking() {
            let crypto = new AttestationCrypto_1.AttestationCrypto();
            let candidateExponent = crypto.mapToCurveMultiplier(this.getType(), this.getIdentifier());
            let commitmentPoint = Point_1.Point.decodeFromUint8(this.getAttestation().getUnsignedAttestation().getCommitment(), Point_1.CURVE_BN256);
            let candidateRiddle = commitmentPoint.subtract(AttestationCrypto_1.Pedestren_G.multiplyDA(candidateExponent));
            if (!candidateRiddle.equals(this.getPok().getRiddle())) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'candidateRiddle.equals(this.getPok().getRiddle()) error');
                return false;
            }
            return true;
        }
        getPok() {
            return this.useAttestation.getPok();
        }
        getType() {
            return this.useAttestation.type;
        }
        getIdentifier() {
            return this.data.identifier;
        }
        getAttestation() {
            return this.useAttestation.getAttestation();
        }
        getJsonEncoding() {
            return this.jsonEncoding;
        }
        checkTokenValidity() {
            let nonceMinTime = Timestamp_1.Timestamp.stringTimestampToLong(this.data.expirationTime) - this.maxTokenValidityInMs - 2 * Timestamp_1.Timestamp.ALLOWED_ROUNDING;
            let nonceMaxTime = Timestamp_1.Timestamp.stringTimestampToLong(this.data.expirationTime);
            if (!this.useAttestation.checkValidity()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'useAttestation.checkValidity failed');
                return false;
            }
            if (this.data.description != this.Eip712Description) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, `wrong description: "${this.data.description}", must be "${this.Eip712Description}"`);
                return false;
            }
            let time = new Timestamp_1.Timestamp(this.data.timestamp);
            time.setValidity(this.maxTokenValidityInMs);
            if (!time.validateAgainstExpiration(Timestamp_1.Timestamp.stringTimestampToLong(this.data.expirationTime))) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'verify timestamp failed.\n' + this.data.timestamp + "\n" + this.maxTokenValidityInMs + "\n" + this.data.expirationTime + "\n" + Timestamp_1.Timestamp.stringTimestampToLong(this.data.expirationTime) + "\n");
                return false;
            }
            if (this.requestorKeys.getAddress().toLowerCase() !== this.useAttestation.getAttestation().getUnsignedAttestation().getAddress().toLowerCase()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'wrong address');
                return false;
            }
            if (!(new Nonce_1.Nonce().validateNonce(this.useAttestation.getPok().getNonce(), (this.useAttestation.getAttestation().getUnsignedAttestation()).getAddress(), this.domain, nonceMinTime, nonceMaxTime))) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'wrong Nonce');
                return false;
            }
            if (!this.proofLinking()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'wrong proofLinking');
                return false;
            }
            return true;
        }
        verify() {
            if (!this.useAttestation.verify()) {
                return false;
            }
            return true;
        }
        getSessionPublicKey() {
            return this.useAttestation.getSessionPublicKey();
        }
    }
    exports.Eip712AttestationUsage = Eip712AttestationUsage;

    });

    var AttestationRequestWithUsage = createCommonjsModule$2(function (module, exports) {
    var __decorate = (commonjsGlobal$1 && commonjsGlobal$1.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Identifier = void 0;



    // IdentifierType ::= INTEGER { email(0), phone(1)}
    class Identifier {
    }
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: asn1_schema_1.AsnPropTypes.Integer })
    ], Identifier.prototype, "type", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: ProofOfExponentASN.Proof })
    ], Identifier.prototype, "proof", void 0);
    __decorate([
        (0, asn1_schema_1.AsnProp)({ type: AttestationFramework.PublicKeyInfoValue })
    ], Identifier.prototype, "sessionKey", void 0);
    exports.Identifier = Identifier;

    });

    var AttestationRequestWithUsage_2 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttestationRequestWithUsage = void 0;









    class AttestationRequestWithUsage$1 {
        constructor() {
        }
        static fromData(type, pok, sessionPublicKey) {
            let me = new this();
            me.type = type;
            me.pok = pok;
            me.sessionPublicKey = sessionPublicKey;
            if (!me.verify()) {
                throw new Error("Could not verify the proof");
            }
            return me;
        }
        static fromBytes(asn1) {
            let me = new this();
            let identifier;
            try {
                identifier = asn1_schema_1.AsnParser.parse(asn1, AttestationRequestWithUsage.Identifier);
                me.type = identifier.type;
                me.sessionPublicKey = KeyPair_1.KeyPair.publicFromSubjectPublicKeyValue(identifier.sessionKey);
            }
            catch (e) {
                throw new Error('Cant parse AttestationRequest Identifier');
            }
            try {
                let riddleEnc = new Uint8Array(identifier.proof.riddle);
                let challengeEnc = new Uint8Array(identifier.proof.challengePoint);
                let tPointEnc = new Uint8Array(identifier.proof.responseValue);
                let nonce = new Uint8Array(identifier.proof.nonce);
                let riddle = Point_1.Point.decodeFromHex((0, utils$1.uint8tohex)(riddleEnc), Point_1.CURVE_BN256);
                let challenge = (0, utils$1.uint8ToBn)(challengeEnc);
                let tPoint = Point_1.Point.decodeFromHex((0, utils$1.uint8tohex)(tPointEnc), Point_1.CURVE_BN256);
                me.pok = FullProofOfExponent_1.FullProofOfExponent.fromData(riddle, tPoint, challenge, nonce);
            }
            catch (e) {
                throw new Error('Cant create FullProofOfExponent');
            }
            if (!me.verify()) {
                throw new Error("Could not verify the proof");
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'proof OK');
            return me;
        }
        verify() {
            let AttestationCryptoInstance = new AttestationCrypto_1.AttestationCrypto();
            if (!AttestationCryptoInstance.verifyFullProof(this.pok)) {
                return false;
            }
            return true;
        }
        getDerEncoding() {
            let res = DerUtility.Asn1Der.encode('INTEGER', this.type) +
                this.pok.getDerEncoding() +
                this.sessionPublicKey.getAsnDerPublic();
            return DerUtility.Asn1Der.encode('SEQUENCE_30', res);
        }
        getPok() {
            return this.pok;
        }
        getType() {
            return this.type;
        }
        getSessionPublicKey() {
            return this.sessionPublicKey;
        }
    }
    exports.AttestationRequestWithUsage = AttestationRequestWithUsage$1;

    });

    var Eip712AttestationRequestWithUsage_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Eip712AttestationRequestWithUsage = void 0;








    class Eip712AttestationRequestWithUsage extends Eip712Token_1.Eip712Token {
        constructor(userKey = null, acceptableTimeLimit = Timestamp_1.Timestamp.DEFAULT_TIME_LIMIT_MS, maxTokenValidityInMs = Timestamp_1.Timestamp.DEFAULT_TOKEN_TIME_LIMIT) {
            super();
            // public static DEFAULT_TOKEN_TIME_LIMIT: number = Eip712AttestationUsage.DEFAULT_TOKEN_TIME_LIMIT;
            // public static DEFAULT_TIME_LIMIT_MS: number = Eip712AttestationRequest.DEFAULT_TIME_LIMIT_MS;
            this.Eip712UserDataTypes = [
                { name: 'payload', type: 'string' },
                { name: 'description', type: 'string' },
                { name: 'identifier', type: 'string' },
                { name: 'timestamp', type: 'string' },
                { name: 'expirationTime', type: 'string' },
            ];
            this.Eip712UserDataPrimaryName = "AttestationRequestWUsage";
            this.Eip712UserDataDescription = "Prove that the \"identifier\" is the identifier hidden in attestation contained in\"payload\""
                + " and use this to authorize usage of local, temporary keys.";
            this.userKey = userKey;
            this.acceptableTimeLimit = acceptableTimeLimit;
            this.maxTokenValidityInMs = maxTokenValidityInMs;
        }
        async fromData(attestorDomain, acceptableTimeLimit = Timestamp_1.Timestamp.DEFAULT_TIME_LIMIT_MS, maxTokenValidityInMs = Timestamp_1.Timestamp.DEFAULT_TOKEN_TIME_LIMIT, identifier, attestationRequestWithUsage, signingKey = null) {
            this.setDomain(attestorDomain);
            if (signingKey) {
                this.userKey = signingKey;
            }
            try {
                this.acceptableTimeLimit = acceptableTimeLimit;
                this.maxTokenValidityInMs = maxTokenValidityInMs;
                this.attestationRequestWithUsage = attestationRequestWithUsage;
                this.jsonEncoding = await this.makeToken(identifier, attestationRequestWithUsage);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                throw new Error("Could not encode object");
            }
            try {
                this.fillJsonData(this.jsonEncoding);
            }
            catch (e) {
                throw new Error("Could not decode object");
            }
        }
        Eip712AttestationRequestWithUsage(attestorDomain, acceptableTimeLimit, maxTokenValidityInMs, jsonEncoding) {
            //TODO
            // super(attestorDomain);
            try {
                this.acceptableTimeLimit = acceptableTimeLimit;
                this.maxTokenValidityInMs = maxTokenValidityInMs;
                this.jsonEncoding = jsonEncoding;
                this.fillJsonData(this.jsonEncoding);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                throw new Error("Could not decode object");
            }
        }
        fillJsonData(json) {
            if (!json)
                throw new Error('Empty json');
            this.jsonEncoding = json;
            let tokenData = JSON.parse(json);
            let signatureInHex = tokenData.signatureInHex;
            let jsonSigned = JSON.parse(tokenData.jsonSigned);
            this.eip712DomainData = jsonSigned.domain;
            this.data = jsonSigned.message;
            try {
                let publicKey = SignatureUtility_1.SignatureUtility.recoverPublicKeyFromTypedMessageSignature(jsonSigned, signatureInHex);
                this.userPublicKey = KeyPair_1.KeyPair.fromPublicHex(publicKey.substr(2));
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'Eip712 withUsage restored address: ' + this.userPublicKey.getAddress());
            }
            catch (e) {
                let m = "Recover Address failed with error:" + e;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m, e);
                throw new Error(m);
            }
            if (!this.attestationRequestWithUsage) {
                this.attestationRequestWithUsage = AttestationRequestWithUsage_2.AttestationRequestWithUsage.fromBytes((0, utils$1.base64ToUint8array)(this.data.payload));
            }
            this.constructorCheck();
        }
        constructorCheck() {
            if (!this.verify()) {
                throw new Error("Could not verify Eip712 use attestation");
            }
        }
        async makeToken(identifier, attestationRequestWithUsage) {
            if (!this.userKey) {
                await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
            }
            let ts = new Timestamp_1.Timestamp().getTimeAsString();
            let expirationTime = new Timestamp_1.Timestamp(Date.now() + this.maxTokenValidityInMs).getTimeAsString();
            let userData = {
                payload: (0, utils$1.hexStringToBase64Url)(attestationRequestWithUsage.getDerEncoding()),
                description: this.Eip712UserDataDescription,
                timestamp: ts,
                identifier: identifier,
                expirationTime: expirationTime,
            };
            return await SignatureUtility_1.SignatureUtility.signEIP712WithBrowserWallet(this.domain, userData, this.Eip712UserDataTypes, this.Eip712UserDataPrimaryName, this.userKey);
        }
        getIdentifier() {
            return this.data.identifier;
        }
        getUserPublicKey() {
            return this.userPublicKey;
        }
        getPok() {
            return this.attestationRequestWithUsage.getPok();
        }
        getType() {
            return this.attestationRequestWithUsage.getType();
        }
        getSessionPublicKey() {
            return this.attestationRequestWithUsage.getSessionPublicKey();
        }
        getJsonEncoding() {
            return this.jsonEncoding;
        }
        /**
         * Verify that an attestation can be issued. I.e. the nonce is not expired
         */
        checkValidity() {
            if (!this.testNonceAndDescription(this.acceptableTimeLimit)) {
                return false;
            }
            return true;
        }
        /**
         * Verify that the object can be used as a usage token. I.e. the token timestamp has not expired.
         * Note that the object can still be used as a token after the nonce for issuance has expired.
         */
        checkTokenValidity() {
            let time = new Timestamp_1.Timestamp(this.data.timestamp);
            time.setValidity(this.maxTokenValidityInMs);
            if (!time.validateAgainstExpiration(Timestamp_1.Timestamp.stringTimestampToLong(this.data.expirationTime))) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'time.validateAgainstExpiration filed');
                return false;
            }
            // Nonce validation must still happen since this also verifies user's address and receiver's domain
            if (!this.testNonceAndDescription(this.maxTokenValidityInMs)) {
                return false;
            }
            return true;
        }
        testNonceAndDescription(timeLimit) {
            if (!timeLimit) {
                throw new Error('timeLimit required');
            }
            let nonceMinTime = Timestamp_1.Timestamp.stringTimestampToLong(this.data.timestamp) - timeLimit;
            let nonceMaxTime = Timestamp_1.Timestamp.stringTimestampToLong(this.data.timestamp) + timeLimit;
            if (!new Nonce_1.Nonce().validateNonce(this.attestationRequestWithUsage.getPok().getNonce(), this.userPublicKey.getAddress(), this.domain, nonceMinTime, nonceMaxTime)) {
                return false;
            }
            if (this.data.description !== this.Eip712UserDataDescription) {
                return false;
            }
            return true;
        }
        verify() {
            if (!this.attestationRequestWithUsage.verify()) {
                return false;
            }
            return true;
        }
    }
    exports.Eip712AttestationRequestWithUsage = Eip712AttestationRequestWithUsage;

    });

    var Authenticator_1 = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Authenticator = void 0;
    if (typeof crypto === "object" && crypto.subtle) ;
    else {
        require$$0$3.webcrypto.subtle;
    }
    class Authenticator {
        static decodePublicKey(file) {
            return KeyPair_1.KeyPair.publicFromBase64orPEM(file);
        }
        // TODO: Pass in Ticket schema object
        static async getUseTicket(ticketSecret, attestationSecret, base64ticket, base64attestation, base64attestationPublicKey, base64senderPublicKeys) {
            let ticket;
            let att;
            try {
                base64senderPublicKeys = KeyPair_1.KeyPair.parseKeyArrayStrings(base64senderPublicKeys);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                throw new Error("Issuer key error");
            }
            if (!base64ticket) {
                throw new Error("Ticket is empty");
            }
            ticket = Ticket_1.Ticket.fromBase64(base64ticket, base64senderPublicKeys);
            if (!ticket.checkValidity()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not validate ticket");
                throw new Error("Ticket Validation failed");
            }
            if (!ticket.verify()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not verify ticket");
                throw new Error("Ticket Verification failed");
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, 'ticked valid (signature OK)');
            if (!base64attestationPublicKey) {
                throw new Error("Attesator key not defined");
            }
            let attestorKey;
            try {
                attestorKey = KeyPair_1.KeyPair.publicFromBase64orPEM(base64attestationPublicKey);
            }
            catch (e) {
                throw new Error("Attesator key read error");
            }
            try {
                att = SignedIdentifierAttestation_1.SignedIdentifierAttestation.fromBytes((0, utils$1.base64ToUint8array)(base64attestation), attestorKey);
            }
            catch (e) {
                throw new Error("IDAttestation decode error");
            }
            if (!att.checkValidity()) {
                throw new Error("IDAttestation Validation failed");
            }
            if (!att.verify()) {
                throw new Error("IDAttestation Verification failed");
            }
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'attestation valid');
            try {
                let redeem = new AttestedObject_1.AttestedObject();
                redeem.create(ticket, att, BigInt(attestationSecret), BigInt(ticketSecret));
                let unSigned = redeem.getDerEncoding();
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, unSigned);
                return (0, utils$1.hexStringToBase64)(unSigned);
                // return unSigned;
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, 'getUseTicket: redeem failed', e);
                throw new Error("Attestation doesnt fit Ticket: " + e.message);
            }
        }
        // TODO: Pass in Ticket schema object
        static validateUseTicket(proof, base64attestorPublicKey, base64issuerPublicKeys, userEthKey) {
            let attestorKey = KeyPair_1.KeyPair.publicFromBase64orPEM(base64attestorPublicKey);
            let issuerKeys = KeyPair_1.KeyPair.parseKeyArrayStrings(base64issuerPublicKeys);
            try {
                let decodedAttestedObject = AttestedObject_1.AttestedObject.fromBytes((0, utils$1.base64ToUint8array)(proof), UseToken_1.UseToken, attestorKey, Ticket_1.Ticket, issuerKeys);
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Verified attested object");
                if (!decodedAttestedObject.checkValidity(userEthKey)) {
                    throw new Error("Ticket validity check failed!");
                }
            }
            catch (e) {
                let message = "Ticket proof validation failed! " + e.message;
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, message);
                throw new Error(message);
            }
        }
        /*
         * get ticket attestation from wallet, or issuer site's local storage through iframe
         *  - Open an Iframe and obtain the data object (in this case SignedDevonTicket)
         */
        // function
        // getTokenAttestation(tokenObj) {
        // }
        static async requestAttest(receiverId, type, attestorDomain, secret, userKey = null) {
            let crypto = new AttestationCrypto_1.AttestationCrypto();
            let userAddress;
            if (userKey) {
                userAddress = userKey.getAddress();
            }
            else {
                try {
                    userAddress = await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
                }
                catch (e) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, 'Cant find user Ethereum Address. Please check Metamask. ' + e);
                    (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, e);
                    return;
                }
            }
            let nonce = await Nonce_1.Nonce.makeNonce(userAddress, attestorDomain);
            (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'nonce = ' + (0, utils$1.uint8tohex)(nonce));
            let pok = crypto.computeAttestationProof(secret, nonce);
            let attRequest = AttestationRequest_2.AttestationRequest.fromData(crypto.getType(type), pok);
            let attest = new Eip712AttestationRequest_1.Eip712AttestationRequest(userKey);
            await attest.addData(attestorDomain, 20 * 1000, receiverId, attRequest);
            let attestJson = attest.getJsonEncoding();
            return attestJson;
        }
        // static async constructAttest(
        //     attestorKey: KeyPair,
        //     receiverId: string,
        //     type: string,
        //     ATTESTOR_DOMAIN: string,
        //     attestationSecretBase64: string,
        //     sessionKey: KeyPair,
        // ){
        //
        // }
        static constructAttest(attestorKey, issuerName, validityInMilliseconds, attestRequestJson, attestorDomain, usageValue = "") {
            let att;
            let crypto = new AttestationCrypto_1.AttestationCrypto();
            let attestationRequest;
            let commitment;
            try {
                // decode JSON and fill publicKey
                // set usageValue as "Creating email attestation"
                attestationRequest = new Eip712AttestationRequest_1.Eip712AttestationRequest();
                attestationRequest.setDomain(attestorDomain);
                if (usageValue) {
                    attestationRequest.setUsageValue(usageValue);
                }
                attestationRequest.fillJsonData(attestRequestJson);
                Authenticator.checkAttestRequestVerifiability(attestationRequest);
                Authenticator.checkAttestRequestValidity(attestationRequest);
            }
            catch (e) {
                let m = "Failed to fill attestation data from json. " + e + "\nRestores as an Eip712AttestationRequestWithUsage object instead";
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, m);
                try {
                    attestationRequest = new Eip712AttestationRequestWithUsage_1.Eip712AttestationRequestWithUsage();
                    attestationRequest.setDomain(attestorDomain);
                    attestationRequest.fillJsonData(attestRequestJson);
                    Authenticator.checkAttestRequestVerifiability(attestationRequest);
                    Authenticator.checkAttestRequestValidity(attestationRequest);
                }
                catch (e) {
                    let m = "Failed to parse Eip712AttestationRequestWithUsage. " + e;
                    (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                    (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, e);
                    throw new Error(m);
                }
            }
            commitment = crypto.makeCommitmentFromHiding(attestationRequest.getIdentifier(), attestationRequest.getType(), attestationRequest.getPok().getRiddle());
            att = new IdentifierAttestation_1.IdentifierAttestation();
            att.fromCommitment(commitment, attestationRequest.getUserPublicKey());
            att.setIssuer("CN=" + issuerName);
            att.setSerialNumber(Math.round(Math.random() * Number.MAX_SAFE_INTEGER));
            let now = Date.now();
            att.setNotValidBefore(now);
            att.setNotValidAfter(now + validityInMilliseconds);
            let signed = SignedIdentifierAttestation_1.SignedIdentifierAttestation.fromData(att, attestorKey);
            return signed.getDerEncoding();
        }
        // PREFIX + "user-priv.pem", PREFIX + "attestation.crt", PREFIX + "attestation-secret.pem", PREFIX + "attestor-pub.pem", "test@test.ts", "mail", PREFIX + "session-priv.pem", PREFIX + "use-attestation.json"
        static async useAttest(attestationBase64, attestationSecretBase64, attestorKey, receiverId, type, webDomain, sessionKey = null, userKey = null) {
            const attestationUint8 = (0, utils$1.base64ToUint8array)(attestationBase64);
            let att = SignedIdentifierAttestation_1.SignedIdentifierAttestation.fromBytes(attestationUint8, attestorKey);
            let attestationSecretDerUint8 = (0, utils$1.base64ToUint8array)(attestationSecretBase64);
            // remove first 4 bytes because us der encoding
            let attestationSecret = (0, utils$1.uint8ToBn)(attestationSecretDerUint8.slice(4));
            let crypto = new AttestationCrypto_1.AttestationCrypto();
            let address;
            if (userKey) {
                address = userKey.getAddress();
            }
            else {
                address = await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
            }
            let nonce = await Nonce_1.Nonce.makeNonce(address, webDomain);
            let pok = crypto.computeAttestationProof(attestationSecret, nonce);
            try {
                let attUsage = UseAttestation_2.UseAttestation.fromData(att, crypto.getType(type), pok, sessionKey);
                let usageRequest = new Eip712AttestationUsage_1.Eip712AttestationUsage(userKey);
                let res = await usageRequest.addData(webDomain, receiverId, attUsage);
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'usageRequest ready state = ' + res);
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'usageRequest.getJsonEncoding() = ' + usageRequest.getJsonEncoding());
                return usageRequest.getJsonEncoding();
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
            }
        }
        static checkAttestRequestVerifiability(input) {
            if (!input.verify()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, "Could not verify attestation signing request");
                throw new Error("Verification failed");
            }
        }
        static checkAttestRequestValidity(input) {
            if (!input.checkValidity()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, "Could not validate attestation signing request");
                throw new Error("Validation failed");
            }
        }
        static checkUsageVerifiability(input) {
            if (!input.verify()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not verify usage request");
                throw new Error("Verification failed");
            }
        }
        static checkUsageValidity(input) {
            if (!input.checkTokenValidity()) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, "Could not validate usage request");
                throw new Error("Validation failed");
            }
        }
        static async verifyUsage(jsonRequest, attestorKey, message, WEB_DOMAIN, signature) {
            let sessionPublicKey;
            try {
                let usageRequest = new Eip712AttestationUsage_1.Eip712AttestationUsage();
                usageRequest.setDomain(WEB_DOMAIN);
                usageRequest.fillJsonData(jsonRequest, attestorKey);
                Authenticator.checkUsageVerifiability(usageRequest);
                Authenticator.checkUsageValidity(usageRequest);
                sessionPublicKey = usageRequest.getSessionPublicKey();
            }
            catch (e) {
                // Try as an  Eip712AttestationRequestWithUsage object instead, which is NOT linked to a specific website
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, 'Eip712AttestationUsage failed. ' + e + '. Lets try to verify Eip712AttestationRequestWithUsage');
                let usageRequest = new Eip712AttestationRequestWithUsage_1.Eip712AttestationRequestWithUsage();
                usageRequest.setDomain(WEB_DOMAIN);
                usageRequest.fillJsonData(jsonRequest);
                Authenticator.checkUsageVerifiability(usageRequest);
                Authenticator.checkUsageValidity(usageRequest);
                sessionPublicKey = usageRequest.getSessionPublicKey();
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'sessionPublicKey from Eip712AttestationRequestWithUsage = ' + sessionPublicKey.getAddress());
            }
            // Validate signature
            try {
                let res = await sessionPublicKey.verifyStringWithSubtle(KeyPair_1.KeyPair.anySignatureToRawUint8(signature), message);
                if (!res) {
                    (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, "Could not verify message signature");
                    throw new Error("Signature verification failed");
                }
                return "SUCCESSFULLY validated usage request!";
            }
            catch (e) {
                let m = "Cant verify session with subtle. " + e;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, e);
            }
        }
        static async requestAttestAndUsage(userKey, receiverId, type, ATTESTOR_DOMAIN, attestationSecretBase64, sessionKey) {
            try {
                let attestationSecret = (0, utils$1.uint8ToBn)((0, utils$1.base64ToUint8array)(attestationSecretBase64));
                let address;
                if (userKey) {
                    address = userKey.getAddress();
                }
                else {
                    address = await SignatureUtility_1.SignatureUtility.connectMetamaskAndGetAddress();
                }
                let nonce = await Nonce_1.Nonce.makeNonce(address, ATTESTOR_DOMAIN, new Uint8Array(0), Date.now());
                let crypto = new AttestationCrypto_1.AttestationCrypto();
                let pok = crypto.computeAttestationProof(attestationSecret, nonce);
                let attRequest = AttestationRequestWithUsage_2.AttestationRequestWithUsage.fromData(crypto.getType(type), pok, sessionKey);
                let request = new Eip712AttestationRequestWithUsage_1.Eip712AttestationRequestWithUsage(userKey);
                await request.fromData(ATTESTOR_DOMAIN, undefined, undefined, receiverId, attRequest);
                (0, utils$1.logger)(config.DEBUGLEVEL.HIGH, 'request.getJsonEncoding() = ' + request.getJsonEncoding());
                return request.getJsonEncoding();
            }
            catch (e) {
                let m = "requestAttestAndUsage error. " + e;
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, m);
                (0, utils$1.logger)(config.DEBUGLEVEL.MEDIUM, e);
            }
        }
        /*
            static async signMessageWithSessionKey(message: Uint8Array, sessionKey: Uint8Array = new Uint8Array(0)){
                let privKey, signature;
                // logger(DEBUGLEVEL.HIGH, "message = " + uint8tohex(message));
        
                try {
                    if (sessionKey && sessionKey.length) {
                        // its nodejs and session primary key received in Uint8Array
                        logger(DEBUGLEVEL.HIGH, "sessionKey = " + uint8tohex(sessionKey));
                        logger(DEBUGLEVEL.HIGH, sessionKey);
        
                    } else {
                        // TODO read key from local storage
                    }
                    // signature = await crypto.subtle.sign(ALPHA_CONFIG.signAlgorithm, privKey, message);
                } catch (e){
                    logger(DEBUGLEVEL.HIGH, e);
                    // throw new Error(e);
                }
                // let signatureHex = uint8tohex(new Uint8Array(signature));
                // return signatureHex;
            }
        
            static async verifyMessageSignatureWithSessionKey(message: Uint8Array, signature: string, sessionKey: Uint8Array = new Uint8Array(0)){
                let privKey;
                if (sessionKey && sessionKey.length) {
                    // its nodejs and session primary key received in Uint8Array
                    privKey = await subtle.importKey(
                        'raw',
                        sessionKey,
                        {
                            name: "ECDSA",
                            namedCurve: "P-256"
                        },
                        true,
                        ['sign', 'verify']
                    );
                } else {
                    // TODO read key from local storage
                }
        
                let signatureUint8 = hexStringToUint8(signature);
        
                const result = await crypto.subtle.verify(ALPHA_CONFIG.keysAlgorithm, privKey.publicKey, signatureUint8, message );
            }
        
         */
        static validateTicket(ticketBase64, confernceId, publicKeyPEM) {
            let keys = {};
            try {
                keys[confernceId] = KeyPair_1.KeyPair.publicFromBase64orPEM(publicKeyPEM);
            }
            catch (e) {
                return {
                    valid: false,
                    massage: "Broken Public Key"
                };
            }
            let ticket;
            try {
                ticket = Ticket_1.Ticket.fromBase64(ticketBase64, keys);
            }
            catch (e) {
                (0, utils$1.logger)(config.DEBUGLEVEL.LOW, e);
                return {
                    valid: false,
                    massage: "Wrong Ticket"
                };
            }
            return {
                valid: true,
                ticketId: ticket.getTicketId(),
                ticketClass: ticket.getTicketClass(),
            };
        }
    }
    exports.Authenticator = Authenticator;

    });

    var dist = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttestationCrypto = exports.Eip712AttestationRequest = exports.Authenticator = void 0;

    Object.defineProperty(exports, "Authenticator", { enumerable: true, get: function () { return Authenticator_1.Authenticator; } });

    Object.defineProperty(exports, "Eip712AttestationRequest", { enumerable: true, get: function () { return Eip712AttestationRequest_1.Eip712AttestationRequest; } });

    Object.defineProperty(exports, "AttestationCrypto", { enumerable: true, get: function () { return AttestationCrypto_1.AttestationCrypto; } });

    });

    var AsnSchemaUtil = createCommonjsModule$2(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsnSerializer = exports.AsnParser = void 0;

    Object.defineProperty(exports, "AsnParser", { enumerable: true, get: function () { return asn1_schema_1.AsnParser; } });
    Object.defineProperty(exports, "AsnSerializer", { enumerable: true, get: function () { return asn1_schema_1.AsnSerializer; } });

    });

    // TODO: Use "Attestation.ID" instead of domain? Domain shows underneath this in metamask request,
    //  which could cause confusion to users. Needs to be changed in ApiController.java at the same time.
    const ATTESTOR_DOMAIN = "http://wwww.attestation.id";
    const Eip712UserDataDescription = "Creating email attestation";
    const attestationCrypto = new dist.AttestationCrypto();
    async function createAttestationRequestAndSecret(type, identifier, address, providerName) {
        const secret = attestationCrypto.makeSecret();
        const fpoe = attestationCrypto.computeAttestationProof(secret, await Nonce_1.Nonce.makeNonce(address, ATTESTOR_DOMAIN, new Uint8Array(), new Date().getTime()));
        const attRequest = AttestationRequest_2.AttestationRequest.fromData(type === "mail" ? 1 : 0, fpoe);
        const userData = {
            payload: base64toBase64Url(btoa(ab2str(attRequest.getAsnEncoded()))),
            description: Eip712UserDataDescription,
            timestamp: currentTimestampString(),
            identifier,
        };
        const result = await signatureAndPublicKey(userData, providerName);
        return { result, secret };
    }
    function currentTimestampString() {
        const timestamp = new Date();
        // return example: Sat Jan 29 2022 12:55:37 GMT+0800
        return timestamp.toString().replace(/\s*\(.+\)/, "");
    }
    function parseAttestation(attestation) {
        return AsnSchemaUtil.AsnParser.parse(str2ab(atob(attestation)), AttestationFramework.MyAttestationDecoded);
    }
    function expired(attestation) {
        return (attestation.signedInfo.validity.notAfter.generalizedTime.getTime() <
            new Date().getTime());
    }

    /**
     * auth0-js v9.19.0
     * Author: Auth0
     * Date: 2022-01-25
     * License: MIT
     */

    var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global$1?global$1:"undefined"!=typeof self?self:{};function createCommonjsModule(fn,module){return fn(module={exports:{}},module.exports),module.exports}var urlJoin=createCommonjsModule((function(module){var context,definition;context=commonjsGlobal,definition=function(){function normalize(strArray){var resultArray=[];if(0===strArray.length)return "";if("string"!=typeof strArray[0])throw new TypeError("Url must be a string. Received "+strArray[0]);if(strArray[0].match(/^[^/:]+:\/*$/)&&strArray.length>1){var first=strArray.shift();strArray[0]=first+strArray[0];}strArray[0].match(/^file:\/\/\//)?strArray[0]=strArray[0].replace(/^([^/:]+):\/*/,"$1:///"):strArray[0]=strArray[0].replace(/^([^/:]+):\/*/,"$1://");for(var i=0;i<strArray.length;i++){var component=strArray[i];if("string"!=typeof component)throw new TypeError("Url must be a string. Received "+component);""!==component&&(i>0&&(component=component.replace(/^[\/]+/,"")),component=i<strArray.length-1?component.replace(/[\/]+$/,""):component.replace(/[\/]+$/,"/"),resultArray.push(component));}var str=resultArray.join("/"),parts=(str=str.replace(/\/(\?|&|#[^!])/g,"$1")).split("?");return str=parts.shift()+(parts.length>0?"?":"")+parts.join("&")}return function(){return normalize("object"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}},module.exports?module.exports=definition():context.urljoin=definition();})),origSymbol=commonjsGlobal.Symbol,ERROR_MESSAGE="Function.prototype.bind called on incompatible ",slice=Array.prototype.slice,toStr=Object.prototype.toString,functionBind=Function.prototype.bind||function(that){var target=this;if("function"!=typeof target||"[object Function]"!==toStr.call(target))throw new TypeError(ERROR_MESSAGE+target);for(var bound,args=slice.call(arguments,1),binder=function(){if(this instanceof bound){var result=target.apply(this,args.concat(slice.call(arguments)));return Object(result)===result?result:this}return target.apply(that,args.concat(slice.call(arguments)))},boundLength=Math.max(0,target.length-args.length),boundArgs=[],i=0;i<boundLength;i++)boundArgs.push("$"+i);if(bound=Function("binder","return function ("+boundArgs.join(",")+"){ return binder.apply(this,arguments); }")(binder),target.prototype){var Empty=function(){};Empty.prototype=target.prototype,bound.prototype=new Empty,Empty.prototype=null;}return bound},src=functionBind.call(Function.call,Object.prototype.hasOwnProperty),$SyntaxError=SyntaxError,$Function=Function,$TypeError=TypeError,getEvalledConstructor=function(expressionSyntax){try{return $Function('"use strict"; return ('+expressionSyntax+").constructor;")()}catch(e){}},$gOPD=Object.getOwnPropertyDescriptor;if($gOPD)try{$gOPD({},"");}catch(e){$gOPD=null;}var throwTypeError=function(){throw new $TypeError},ThrowTypeError=$gOPD?function(){try{return throwTypeError}catch(calleeThrows){try{return $gOPD(arguments,"callee").get}catch(gOPDthrows){return throwTypeError}}}():throwTypeError,hasSymbols$1="function"==typeof origSymbol&&"function"==typeof Symbol&&"symbol"==typeof origSymbol("foo")&&"symbol"==typeof Symbol("bar")&&function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return !1;if("symbol"==typeof Symbol.iterator)return !0;var obj={},sym=Symbol("test"),symObj=Object(sym);if("string"==typeof sym)return !1;if("[object Symbol]"!==Object.prototype.toString.call(sym))return !1;if("[object Symbol]"!==Object.prototype.toString.call(symObj))return !1;for(sym in obj[sym]=42,obj)return !1;if("function"==typeof Object.keys&&0!==Object.keys(obj).length)return !1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(obj).length)return !1;var syms=Object.getOwnPropertySymbols(obj);if(1!==syms.length||syms[0]!==sym)return !1;if(!Object.prototype.propertyIsEnumerable.call(obj,sym))return !1;if("function"==typeof Object.getOwnPropertyDescriptor){var descriptor=Object.getOwnPropertyDescriptor(obj,sym);if(42!==descriptor.value||!0!==descriptor.enumerable)return !1}return !0}(),getProto=Object.getPrototypeOf||function(x){return x.__proto__},needsEval={},TypedArray="undefined"==typeof Uint8Array?void 0:getProto(Uint8Array),INTRINSICS={"%AggregateError%":"undefined"==typeof AggregateError?void 0:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayIteratorPrototype%":hasSymbols$1?getProto([][Symbol.iterator]()):void 0,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":needsEval,"%AsyncGenerator%":needsEval,"%AsyncGeneratorFunction%":needsEval,"%AsyncIteratorPrototype%":needsEval,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%BigInt%":"undefined"==typeof BigInt?void 0:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry,"%Function%":$Function,"%GeneratorFunction%":needsEval,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":hasSymbols$1?getProto(getProto([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&hasSymbols$1?getProto((new Map)[Symbol.iterator]()):void 0,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&hasSymbols$1?getProto((new Set)[Symbol.iterator]()):void 0,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":hasSymbols$1?getProto(""[Symbol.iterator]()):void 0,"%Symbol%":hasSymbols$1?Symbol:void 0,"%SyntaxError%":$SyntaxError,"%ThrowTypeError%":ThrowTypeError,"%TypedArray%":TypedArray,"%TypeError%":$TypeError,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?void 0:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet},LEGACY_ALIASES={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},$concat=functionBind.call(Function.call,Array.prototype.concat),$spliceApply=functionBind.call(Function.apply,Array.prototype.splice),$replace=functionBind.call(Function.call,String.prototype.replace),$strSlice=functionBind.call(Function.call,String.prototype.slice),rePropName=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=function(string){var first=$strSlice(string,0,1),last=$strSlice(string,-1);if("%"===first&&"%"!==last)throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");if("%"===last&&"%"!==first)throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");var result=[];return $replace(string,rePropName,(function(match,number,quote,subString){result[result.length]=quote?$replace(subString,reEscapeChar,"$1"):number||match;})),result},getBaseIntrinsic=function(name,allowMissing){var alias,intrinsicName=name;if(src(LEGACY_ALIASES,intrinsicName)&&(intrinsicName="%"+(alias=LEGACY_ALIASES[intrinsicName])[0]+"%"),src(INTRINSICS,intrinsicName)){var value=INTRINSICS[intrinsicName];if(value===needsEval&&(value=function doEval(name){var value;if("%AsyncFunction%"===name)value=getEvalledConstructor("async function () {}");else if("%GeneratorFunction%"===name)value=getEvalledConstructor("function* () {}");else if("%AsyncGeneratorFunction%"===name)value=getEvalledConstructor("async function* () {}");else if("%AsyncGenerator%"===name){var fn=doEval("%AsyncGeneratorFunction%");fn&&(value=fn.prototype);}else if("%AsyncIteratorPrototype%"===name){var gen=doEval("%AsyncGenerator%");gen&&(value=getProto(gen.prototype));}return INTRINSICS[name]=value,value}(intrinsicName)),void 0===value&&!allowMissing)throw new $TypeError("intrinsic "+name+" exists, but is not available. Please file an issue!");return {alias:alias,name:intrinsicName,value:value}}throw new $SyntaxError("intrinsic "+name+" does not exist!")},getIntrinsic=function(name,allowMissing){if("string"!=typeof name||0===name.length)throw new $TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof allowMissing)throw new $TypeError('"allowMissing" argument must be a boolean');var parts=stringToPath(name),intrinsicBaseName=parts.length>0?parts[0]:"",intrinsic=getBaseIntrinsic("%"+intrinsicBaseName+"%",allowMissing),intrinsicRealName=intrinsic.name,value=intrinsic.value,skipFurtherCaching=!1,alias=intrinsic.alias;alias&&(intrinsicBaseName=alias[0],$spliceApply(parts,$concat([0,1],alias)));for(var i=1,isOwn=!0;i<parts.length;i+=1){var part=parts[i],first=$strSlice(part,0,1),last=$strSlice(part,-1);if(('"'===first||"'"===first||"`"===first||'"'===last||"'"===last||"`"===last)&&first!==last)throw new $SyntaxError("property names with quotes must have matching quotes");if("constructor"!==part&&isOwn||(skipFurtherCaching=!0),src(INTRINSICS,intrinsicRealName="%"+(intrinsicBaseName+="."+part)+"%"))value=INTRINSICS[intrinsicRealName];else if(null!=value){if(!(part in value)){if(!allowMissing)throw new $TypeError("base intrinsic for "+name+" exists, but the property is not available.");return}if($gOPD&&i+1>=parts.length){var desc=$gOPD(value,part);value=(isOwn=!!desc)&&"get"in desc&&!("originalValue"in desc.get)?desc.get:value[part];}else isOwn=src(value,part),value=value[part];isOwn&&!skipFurtherCaching&&(INTRINSICS[intrinsicRealName]=value);}}return value},callBind=createCommonjsModule((function(module){var $apply=getIntrinsic("%Function.prototype.apply%"),$call=getIntrinsic("%Function.prototype.call%"),$reflectApply=getIntrinsic("%Reflect.apply%",!0)||functionBind.call($call,$apply),$gOPD=getIntrinsic("%Object.getOwnPropertyDescriptor%",!0),$defineProperty=getIntrinsic("%Object.defineProperty%",!0),$max=getIntrinsic("%Math.max%");if($defineProperty)try{$defineProperty({},"a",{value:1});}catch(e){$defineProperty=null;}module.exports=function(originalFunction){var func=$reflectApply(functionBind,$call,arguments);if($gOPD&&$defineProperty){var desc=$gOPD(func,"length");desc.configurable&&$defineProperty(func,"length",{value:1+$max(0,originalFunction.length-(arguments.length-1))});}return func};var applyBind=function(){return $reflectApply(functionBind,$apply,arguments)};$defineProperty?$defineProperty(module.exports,"apply",{value:applyBind}):module.exports.apply=applyBind;})),$indexOf=(callBind.apply,callBind(getIntrinsic("String.prototype.indexOf"))),callBound=function(name,allowMissing){var intrinsic=getIntrinsic(name,!!allowMissing);return "function"==typeof intrinsic&&$indexOf(name,".prototype.")>-1?callBind(intrinsic):intrinsic},require$$0=function(n){return n&&n.default||n}(Object.freeze({__proto__:null,default:{}})),hasMap="function"==typeof Map&&Map.prototype,mapSizeDescriptor=Object.getOwnPropertyDescriptor&&hasMap?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,mapSize=hasMap&&mapSizeDescriptor&&"function"==typeof mapSizeDescriptor.get?mapSizeDescriptor.get:null,mapForEach=hasMap&&Map.prototype.forEach,hasSet="function"==typeof Set&&Set.prototype,setSizeDescriptor=Object.getOwnPropertyDescriptor&&hasSet?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,setSize=hasSet&&setSizeDescriptor&&"function"==typeof setSizeDescriptor.get?setSizeDescriptor.get:null,setForEach=hasSet&&Set.prototype.forEach,weakMapHas="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,weakSetHas="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,weakRefDeref="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,booleanValueOf=Boolean.prototype.valueOf,objectToString=Object.prototype.toString,functionToString=Function.prototype.toString,match=String.prototype.match,bigIntValueOf="function"==typeof BigInt?BigInt.prototype.valueOf:null,gOPS=Object.getOwnPropertySymbols,symToString="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,hasShammedSymbols="function"==typeof Symbol&&"object"==typeof Symbol.iterator,isEnumerable=Object.prototype.propertyIsEnumerable,gPO=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(O){return O.__proto__}:null),inspectCustom=require$$0.custom,inspectSymbol=inspectCustom&&isSymbol(inspectCustom)?inspectCustom:null,toStringTag="function"==typeof Symbol&&void 0!==Symbol.toStringTag?Symbol.toStringTag:null,objectInspect=function inspect_(obj,options,depth,seen){var opts=options||{};if(has(opts,"quoteStyle")&&"single"!==opts.quoteStyle&&"double"!==opts.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(has(opts,"maxStringLength")&&("number"==typeof opts.maxStringLength?opts.maxStringLength<0&&opts.maxStringLength!==1/0:null!==opts.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var customInspect=!has(opts,"customInspect")||opts.customInspect;if("boolean"!=typeof customInspect&&"symbol"!==customInspect)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(has(opts,"indent")&&null!==opts.indent&&"\t"!==opts.indent&&!(parseInt(opts.indent,10)===opts.indent&&opts.indent>0))throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');if(void 0===obj)return "undefined";if(null===obj)return "null";if("boolean"==typeof obj)return obj?"true":"false";if("string"==typeof obj)return function inspectString(str,opts){if(str.length>opts.maxStringLength){var remaining=str.length-opts.maxStringLength,trailer="... "+remaining+" more character"+(remaining>1?"s":"");return inspectString(str.slice(0,opts.maxStringLength),opts)+trailer}return wrapQuotes(str.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,lowbyte),"single",opts)}(obj,opts);if("number"==typeof obj)return 0===obj?1/0/obj>0?"0":"-0":String(obj);if("bigint"==typeof obj)return String(obj)+"n";var maxDepth=void 0===opts.depth?5:opts.depth;if(void 0===depth&&(depth=0),depth>=maxDepth&&maxDepth>0&&"object"==typeof obj)return isArray(obj)?"[Array]":"[Object]";var indent=function(opts,depth){var baseIndent;if("\t"===opts.indent)baseIndent="\t";else {if(!("number"==typeof opts.indent&&opts.indent>0))return null;baseIndent=Array(opts.indent+1).join(" ");}return {base:baseIndent,prev:Array(depth+1).join(baseIndent)}}(opts,depth);if(void 0===seen)seen=[];else if(indexOf(seen,obj)>=0)return "[Circular]";function inspect(value,from,noIndent){if(from&&(seen=seen.slice()).push(from),noIndent){var newOpts={depth:opts.depth};return has(opts,"quoteStyle")&&(newOpts.quoteStyle=opts.quoteStyle),inspect_(value,newOpts,depth+1,seen)}return inspect_(value,opts,depth+1,seen)}if("function"==typeof obj){var name=function(f){if(f.name)return f.name;var m=match.call(functionToString.call(f),/^function\s*([\w$]+)/);if(m)return m[1];return null}(obj),keys=arrObjKeys(obj,inspect);return "[Function"+(name?": "+name:" (anonymous)")+"]"+(keys.length>0?" { "+keys.join(", ")+" }":"")}if(isSymbol(obj)){var symString=hasShammedSymbols?String(obj).replace(/^(Symbol\(.*\))_[^)]*$/,"$1"):symToString.call(obj);return "object"!=typeof obj||hasShammedSymbols?symString:markBoxed(symString)}if(function(x){if(!x||"object"!=typeof x)return !1;if("undefined"!=typeof HTMLElement&&x instanceof HTMLElement)return !0;return "string"==typeof x.nodeName&&"function"==typeof x.getAttribute}(obj)){for(var s="<"+String(obj.nodeName).toLowerCase(),attrs=obj.attributes||[],i=0;i<attrs.length;i++)s+=" "+attrs[i].name+"="+wrapQuotes(quote(attrs[i].value),"double",opts);return s+=">",obj.childNodes&&obj.childNodes.length&&(s+="..."),s+="</"+String(obj.nodeName).toLowerCase()+">"}if(isArray(obj)){if(0===obj.length)return "[]";var xs=arrObjKeys(obj,inspect);return indent&&!function(xs){for(var i=0;i<xs.length;i++)if(indexOf(xs[i],"\n")>=0)return !1;return !0}(xs)?"["+indentedJoin(xs,indent)+"]":"[ "+xs.join(", ")+" ]"}if(function(obj){return !("[object Error]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj)){var parts=arrObjKeys(obj,inspect);return 0===parts.length?"["+String(obj)+"]":"{ ["+String(obj)+"] "+parts.join(", ")+" }"}if("object"==typeof obj&&customInspect){if(inspectSymbol&&"function"==typeof obj[inspectSymbol])return obj[inspectSymbol]();if("symbol"!==customInspect&&"function"==typeof obj.inspect)return obj.inspect()}if(function(x){if(!mapSize||!x||"object"!=typeof x)return !1;try{mapSize.call(x);try{setSize.call(x);}catch(s){return !0}return x instanceof Map}catch(e){}return !1}(obj)){var mapParts=[];return mapForEach.call(obj,(function(value,key){mapParts.push(inspect(key,obj,!0)+" => "+inspect(value,obj));})),collectionOf("Map",mapSize.call(obj),mapParts,indent)}if(function(x){if(!setSize||!x||"object"!=typeof x)return !1;try{setSize.call(x);try{mapSize.call(x);}catch(m){return !0}return x instanceof Set}catch(e){}return !1}(obj)){var setParts=[];return setForEach.call(obj,(function(value){setParts.push(inspect(value,obj));})),collectionOf("Set",setSize.call(obj),setParts,indent)}if(function(x){if(!weakMapHas||!x||"object"!=typeof x)return !1;try{weakMapHas.call(x,weakMapHas);try{weakSetHas.call(x,weakSetHas);}catch(s){return !0}return x instanceof WeakMap}catch(e){}return !1}(obj))return weakCollectionOf("WeakMap");if(function(x){if(!weakSetHas||!x||"object"!=typeof x)return !1;try{weakSetHas.call(x,weakSetHas);try{weakMapHas.call(x,weakMapHas);}catch(s){return !0}return x instanceof WeakSet}catch(e){}return !1}(obj))return weakCollectionOf("WeakSet");if(function(x){if(!weakRefDeref||!x||"object"!=typeof x)return !1;try{return weakRefDeref.call(x),!0}catch(e){}return !1}(obj))return weakCollectionOf("WeakRef");if(function(obj){return !("[object Number]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj))return markBoxed(inspect(Number(obj)));if(function(obj){if(!obj||"object"!=typeof obj||!bigIntValueOf)return !1;try{return bigIntValueOf.call(obj),!0}catch(e){}return !1}(obj))return markBoxed(inspect(bigIntValueOf.call(obj)));if(function(obj){return !("[object Boolean]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj))return markBoxed(booleanValueOf.call(obj));if(function(obj){return !("[object String]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj))return markBoxed(inspect(String(obj)));if(!function(obj){return !("[object Date]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj)&&!function(obj){return !("[object RegExp]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}(obj)){var ys=arrObjKeys(obj,inspect),isPlainObject=gPO?gPO(obj)===Object.prototype:obj instanceof Object||obj.constructor===Object,protoTag=obj instanceof Object?"":"null prototype",stringTag=!isPlainObject&&toStringTag&&Object(obj)===obj&&toStringTag in obj?toStr$1(obj).slice(8,-1):protoTag?"Object":"",tag=(isPlainObject||"function"!=typeof obj.constructor?"":obj.constructor.name?obj.constructor.name+" ":"")+(stringTag||protoTag?"["+[].concat(stringTag||[],protoTag||[]).join(": ")+"] ":"");return 0===ys.length?tag+"{}":indent?tag+"{"+indentedJoin(ys,indent)+"}":tag+"{ "+ys.join(", ")+" }"}return String(obj)};function wrapQuotes(s,defaultStyle,opts){var quoteChar="double"===(opts.quoteStyle||defaultStyle)?'"':"'";return quoteChar+s+quoteChar}function quote(s){return String(s).replace(/"/g,"&quot;")}function isArray(obj){return !("[object Array]"!==toStr$1(obj)||toStringTag&&"object"==typeof obj&&toStringTag in obj)}function isSymbol(obj){if(hasShammedSymbols)return obj&&"object"==typeof obj&&obj instanceof Symbol;if("symbol"==typeof obj)return !0;if(!obj||"object"!=typeof obj||!symToString)return !1;try{return symToString.call(obj),!0}catch(e){}return !1}var hasOwn=Object.prototype.hasOwnProperty||function(key){return key in this};function has(obj,key){return hasOwn.call(obj,key)}function toStr$1(obj){return objectToString.call(obj)}function indexOf(xs,x){if(xs.indexOf)return xs.indexOf(x);for(var i=0,l=xs.length;i<l;i++)if(xs[i]===x)return i;return -1}function lowbyte(c){var n=c.charCodeAt(0),x={8:"b",9:"t",10:"n",12:"f",13:"r"}[n];return x?"\\"+x:"\\x"+(n<16?"0":"")+n.toString(16).toUpperCase()}function markBoxed(str){return "Object("+str+")"}function weakCollectionOf(type){return type+" { ? }"}function collectionOf(type,size,entries,indent){return type+" ("+size+") {"+(indent?indentedJoin(entries,indent):entries.join(", "))+"}"}function indentedJoin(xs,indent){if(0===xs.length)return "";var lineJoiner="\n"+indent.prev+indent.base;return lineJoiner+xs.join(","+lineJoiner)+"\n"+indent.prev}function arrObjKeys(obj,inspect){var isArr=isArray(obj),xs=[];if(isArr){xs.length=obj.length;for(var i=0;i<obj.length;i++)xs[i]=has(obj,i)?inspect(obj[i],obj):"";}var symMap,syms="function"==typeof gOPS?gOPS(obj):[];if(hasShammedSymbols){symMap={};for(var k=0;k<syms.length;k++)symMap["$"+syms[k]]=syms[k];}for(var key in obj)has(obj,key)&&(isArr&&String(Number(key))===key&&key<obj.length||hasShammedSymbols&&symMap["$"+key]instanceof Symbol||(/[^\w$]/.test(key)?xs.push(inspect(key,obj)+": "+inspect(obj[key],obj)):xs.push(key+": "+inspect(obj[key],obj))));if("function"==typeof gOPS)for(var j=0;j<syms.length;j++)isEnumerable.call(obj,syms[j])&&xs.push("["+inspect(syms[j])+"]: "+inspect(obj[syms[j]],obj));return xs}var $TypeError$1=getIntrinsic("%TypeError%"),$WeakMap=getIntrinsic("%WeakMap%",!0),$Map=getIntrinsic("%Map%",!0),$weakMapGet=callBound("WeakMap.prototype.get",!0),$weakMapSet=callBound("WeakMap.prototype.set",!0),$weakMapHas=callBound("WeakMap.prototype.has",!0),$mapGet=callBound("Map.prototype.get",!0),$mapSet=callBound("Map.prototype.set",!0),$mapHas=callBound("Map.prototype.has",!0),listGetNode=function(list,key){for(var curr,prev=list;null!==(curr=prev.next);prev=curr)if(curr.key===key)return prev.next=curr.next,curr.next=list.next,list.next=curr,curr},sideChannel=function(){var $wm,$m,$o,channel={assert:function(key){if(!channel.has(key))throw new $TypeError$1("Side channel does not contain "+objectInspect(key))},get:function(key){if($WeakMap&&key&&("object"==typeof key||"function"==typeof key)){if($wm)return $weakMapGet($wm,key)}else if($Map){if($m)return $mapGet($m,key)}else if($o)return function(objects,key){var node=listGetNode(objects,key);return node&&node.value}($o,key)},has:function(key){if($WeakMap&&key&&("object"==typeof key||"function"==typeof key)){if($wm)return $weakMapHas($wm,key)}else if($Map){if($m)return $mapHas($m,key)}else if($o)return function(objects,key){return !!listGetNode(objects,key)}($o,key);return !1},set:function(key,value){$WeakMap&&key&&("object"==typeof key||"function"==typeof key)?($wm||($wm=new $WeakMap),$weakMapSet($wm,key,value)):$Map?($m||($m=new $Map),$mapSet($m,key,value)):($o||($o={key:{},next:null}),function(objects,key,value){var node=listGetNode(objects,key);node?node.value=value:objects.next={key:key,next:objects.next,value:value};}($o,key,value));}};return channel},replace=String.prototype.replace,percentTwenties=/%20/g,Format_RFC3986="RFC3986",formats={default:Format_RFC3986,formatters:{RFC1738:function(value){return replace.call(value,percentTwenties,"+")},RFC3986:function(value){return String(value)}},RFC1738:"RFC1738",RFC3986:Format_RFC3986},has$1=Object.prototype.hasOwnProperty,isArray$1=Array.isArray,hexTable=function(){for(var array=[],i=0;i<256;++i)array.push("%"+((i<16?"0":"")+i.toString(16)).toUpperCase());return array}(),arrayToObject=function(source,options){for(var obj=options&&options.plainObjects?Object.create(null):{},i=0;i<source.length;++i)void 0!==source[i]&&(obj[i]=source[i]);return obj},utils={arrayToObject:arrayToObject,assign:function(target,source){return Object.keys(source).reduce((function(acc,key){return acc[key]=source[key],acc}),target)},combine:function(a,b){return [].concat(a,b)},compact:function(value){for(var queue=[{obj:{o:value},prop:"o"}],refs=[],i=0;i<queue.length;++i)for(var item=queue[i],obj=item.obj[item.prop],keys=Object.keys(obj),j=0;j<keys.length;++j){var key=keys[j],val=obj[key];"object"==typeof val&&null!==val&&-1===refs.indexOf(val)&&(queue.push({obj:obj,prop:key}),refs.push(val));}return function(queue){for(;queue.length>1;){var item=queue.pop(),obj=item.obj[item.prop];if(isArray$1(obj)){for(var compacted=[],j=0;j<obj.length;++j)void 0!==obj[j]&&compacted.push(obj[j]);item.obj[item.prop]=compacted;}}}(queue),value},decode:function(str,decoder,charset){var strWithoutPlus=str.replace(/\+/g," ");if("iso-8859-1"===charset)return strWithoutPlus.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(strWithoutPlus)}catch(e){return strWithoutPlus}},encode:function(str,defaultEncoder,charset,kind,format){if(0===str.length)return str;var string=str;if("symbol"==typeof str?string=Symbol.prototype.toString.call(str):"string"!=typeof str&&(string=String(str)),"iso-8859-1"===charset)return escape(string).replace(/%u[0-9a-f]{4}/gi,(function($0){return "%26%23"+parseInt($0.slice(2),16)+"%3B"}));for(var out="",i=0;i<string.length;++i){var c=string.charCodeAt(i);45===c||46===c||95===c||126===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122||format===formats.RFC1738&&(40===c||41===c)?out+=string.charAt(i):c<128?out+=hexTable[c]:c<2048?out+=hexTable[192|c>>6]+hexTable[128|63&c]:c<55296||c>=57344?out+=hexTable[224|c>>12]+hexTable[128|c>>6&63]+hexTable[128|63&c]:(i+=1,c=65536+((1023&c)<<10|1023&string.charCodeAt(i)),out+=hexTable[240|c>>18]+hexTable[128|c>>12&63]+hexTable[128|c>>6&63]+hexTable[128|63&c]);}return out},isBuffer:function(obj){return !(!obj||"object"!=typeof obj)&&!!(obj.constructor&&obj.constructor.isBuffer&&obj.constructor.isBuffer(obj))},isRegExp:function(obj){return "[object RegExp]"===Object.prototype.toString.call(obj)},maybeMap:function(val,fn){if(isArray$1(val)){for(var mapped=[],i=0;i<val.length;i+=1)mapped.push(fn(val[i]));return mapped}return fn(val)},merge:function merge(target,source,options){if(!source)return target;if("object"!=typeof source){if(isArray$1(target))target.push(source);else {if(!target||"object"!=typeof target)return [target,source];(options&&(options.plainObjects||options.allowPrototypes)||!has$1.call(Object.prototype,source))&&(target[source]=!0);}return target}if(!target||"object"!=typeof target)return [target].concat(source);var mergeTarget=target;return isArray$1(target)&&!isArray$1(source)&&(mergeTarget=arrayToObject(target,options)),isArray$1(target)&&isArray$1(source)?(source.forEach((function(item,i){if(has$1.call(target,i)){var targetItem=target[i];targetItem&&"object"==typeof targetItem&&item&&"object"==typeof item?target[i]=merge(targetItem,item,options):target.push(item);}else target[i]=item;})),target):Object.keys(source).reduce((function(acc,key){var value=source[key];return has$1.call(acc,key)?acc[key]=merge(acc[key],value,options):acc[key]=value,acc}),mergeTarget)}},has$2=Object.prototype.hasOwnProperty,arrayPrefixGenerators={brackets:function(prefix){return prefix+"[]"},comma:"comma",indices:function(prefix,key){return prefix+"["+key+"]"},repeat:function(prefix){return prefix}},isArray$2=Array.isArray,push=Array.prototype.push,pushToArray=function(arr,valueOrArray){push.apply(arr,isArray$2(valueOrArray)?valueOrArray:[valueOrArray]);},toISO=Date.prototype.toISOString,defaultFormat=formats.default,defaults={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:utils.encode,encodeValuesOnly:!1,format:defaultFormat,formatter:formats.formatters[defaultFormat],indices:!1,serializeDate:function(date){return toISO.call(date)},skipNulls:!1,strictNullHandling:!1},stringify=function stringify(object,prefix,generateArrayPrefix,strictNullHandling,skipNulls,encoder,filter,sort,allowDots,serializeDate,format,formatter,encodeValuesOnly,charset,sideChannel$1){var obj=object;if(sideChannel$1.has(object))throw new RangeError("Cyclic object value");if("function"==typeof filter?obj=filter(prefix,obj):obj instanceof Date?obj=serializeDate(obj):"comma"===generateArrayPrefix&&isArray$2(obj)&&(obj=utils.maybeMap(obj,(function(value){return value instanceof Date?serializeDate(value):value}))),null===obj){if(strictNullHandling)return encoder&&!encodeValuesOnly?encoder(prefix,defaults.encoder,charset,"key",format):prefix;obj="";}if(function(v){return "string"==typeof v||"number"==typeof v||"boolean"==typeof v||"symbol"==typeof v||"bigint"==typeof v}(obj)||utils.isBuffer(obj))return encoder?[formatter(encodeValuesOnly?prefix:encoder(prefix,defaults.encoder,charset,"key",format))+"="+formatter(encoder(obj,defaults.encoder,charset,"value",format))]:[formatter(prefix)+"="+formatter(String(obj))];var objKeys,values=[];if(void 0===obj)return values;if("comma"===generateArrayPrefix&&isArray$2(obj))objKeys=[{value:obj.length>0?obj.join(",")||null:void 0}];else if(isArray$2(filter))objKeys=filter;else {var keys=Object.keys(obj);objKeys=sort?keys.sort(sort):keys;}for(var i=0;i<objKeys.length;++i){var key=objKeys[i],value="object"==typeof key&&void 0!==key.value?key.value:obj[key];if(!skipNulls||null!==value){var keyPrefix=isArray$2(obj)?"function"==typeof generateArrayPrefix?generateArrayPrefix(prefix,key):prefix:prefix+(allowDots?"."+key:"["+key+"]");sideChannel$1.set(object,!0);var valueSideChannel=sideChannel();pushToArray(values,stringify(value,keyPrefix,generateArrayPrefix,strictNullHandling,skipNulls,encoder,filter,sort,allowDots,serializeDate,format,formatter,encodeValuesOnly,charset,valueSideChannel));}}return values},has$3=Object.prototype.hasOwnProperty,isArray$3=Array.isArray,defaults$1={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:utils.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},interpretNumericEntities=function(str){return str.replace(/&#(\d+);/g,(function($0,numberStr){return String.fromCharCode(parseInt(numberStr,10))}))},parseArrayValue=function(val,options){return val&&"string"==typeof val&&options.comma&&val.indexOf(",")>-1?val.split(","):val},parseKeys=function(givenKey,val,options,valuesParsed){if(givenKey){var key=options.allowDots?givenKey.replace(/\.([^.[]+)/g,"[$1]"):givenKey,child=/(\[[^[\]]*])/g,segment=options.depth>0&&/(\[[^[\]]*])/.exec(key),parent=segment?key.slice(0,segment.index):key,keys=[];if(parent){if(!options.plainObjects&&has$3.call(Object.prototype,parent)&&!options.allowPrototypes)return;keys.push(parent);}for(var i=0;options.depth>0&&null!==(segment=child.exec(key))&&i<options.depth;){if(i+=1,!options.plainObjects&&has$3.call(Object.prototype,segment[1].slice(1,-1))&&!options.allowPrototypes)return;keys.push(segment[1]);}return segment&&keys.push("["+key.slice(segment.index)+"]"),function(chain,val,options,valuesParsed){for(var leaf=valuesParsed?val:parseArrayValue(val,options),i=chain.length-1;i>=0;--i){var obj,root=chain[i];if("[]"===root&&options.parseArrays)obj=[].concat(leaf);else {obj=options.plainObjects?Object.create(null):{};var cleanRoot="["===root.charAt(0)&&"]"===root.charAt(root.length-1)?root.slice(1,-1):root,index=parseInt(cleanRoot,10);options.parseArrays||""!==cleanRoot?!isNaN(index)&&root!==cleanRoot&&String(index)===cleanRoot&&index>=0&&options.parseArrays&&index<=options.arrayLimit?(obj=[])[index]=leaf:obj[cleanRoot]=leaf:obj={0:leaf};}leaf=obj;}return leaf}(keys,val,options,valuesParsed)}},lib_parse=function(str,opts){var options=function(opts){if(!opts)return defaults$1;if(null!==opts.decoder&&void 0!==opts.decoder&&"function"!=typeof opts.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==opts.charset&&"utf-8"!==opts.charset&&"iso-8859-1"!==opts.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var charset=void 0===opts.charset?defaults$1.charset:opts.charset;return {allowDots:void 0===opts.allowDots?defaults$1.allowDots:!!opts.allowDots,allowPrototypes:"boolean"==typeof opts.allowPrototypes?opts.allowPrototypes:defaults$1.allowPrototypes,allowSparse:"boolean"==typeof opts.allowSparse?opts.allowSparse:defaults$1.allowSparse,arrayLimit:"number"==typeof opts.arrayLimit?opts.arrayLimit:defaults$1.arrayLimit,charset:charset,charsetSentinel:"boolean"==typeof opts.charsetSentinel?opts.charsetSentinel:defaults$1.charsetSentinel,comma:"boolean"==typeof opts.comma?opts.comma:defaults$1.comma,decoder:"function"==typeof opts.decoder?opts.decoder:defaults$1.decoder,delimiter:"string"==typeof opts.delimiter||utils.isRegExp(opts.delimiter)?opts.delimiter:defaults$1.delimiter,depth:"number"==typeof opts.depth||!1===opts.depth?+opts.depth:defaults$1.depth,ignoreQueryPrefix:!0===opts.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof opts.interpretNumericEntities?opts.interpretNumericEntities:defaults$1.interpretNumericEntities,parameterLimit:"number"==typeof opts.parameterLimit?opts.parameterLimit:defaults$1.parameterLimit,parseArrays:!1!==opts.parseArrays,plainObjects:"boolean"==typeof opts.plainObjects?opts.plainObjects:defaults$1.plainObjects,strictNullHandling:"boolean"==typeof opts.strictNullHandling?opts.strictNullHandling:defaults$1.strictNullHandling}}(opts);if(""===str||null==str)return options.plainObjects?Object.create(null):{};for(var tempObj="string"==typeof str?function(str,options){var i,obj={},cleanStr=options.ignoreQueryPrefix?str.replace(/^\?/,""):str,limit=options.parameterLimit===1/0?void 0:options.parameterLimit,parts=cleanStr.split(options.delimiter,limit),skipIndex=-1,charset=options.charset;if(options.charsetSentinel)for(i=0;i<parts.length;++i)0===parts[i].indexOf("utf8=")&&("utf8=%E2%9C%93"===parts[i]?charset="utf-8":"utf8=%26%2310003%3B"===parts[i]&&(charset="iso-8859-1"),skipIndex=i,i=parts.length);for(i=0;i<parts.length;++i)if(i!==skipIndex){var key,val,part=parts[i],bracketEqualsPos=part.indexOf("]="),pos=-1===bracketEqualsPos?part.indexOf("="):bracketEqualsPos+1;-1===pos?(key=options.decoder(part,defaults$1.decoder,charset,"key"),val=options.strictNullHandling?null:""):(key=options.decoder(part.slice(0,pos),defaults$1.decoder,charset,"key"),val=utils.maybeMap(parseArrayValue(part.slice(pos+1),options),(function(encodedVal){return options.decoder(encodedVal,defaults$1.decoder,charset,"value")}))),val&&options.interpretNumericEntities&&"iso-8859-1"===charset&&(val=interpretNumericEntities(val)),part.indexOf("[]=")>-1&&(val=isArray$3(val)?[val]:val),has$3.call(obj,key)?obj[key]=utils.combine(obj[key],val):obj[key]=val;}return obj}(str,options):str,obj=options.plainObjects?Object.create(null):{},keys=Object.keys(tempObj),i=0;i<keys.length;++i){var key=keys[i],newObj=parseKeys(key,tempObj[key],options,"string"==typeof str);obj=utils.merge(obj,newObj,options);}return !0===options.allowSparse?obj:utils.compact(obj)},lib_stringify=function(object,opts){var objKeys,obj=object,options=function(opts){if(!opts)return defaults;if(null!==opts.encoder&&void 0!==opts.encoder&&"function"!=typeof opts.encoder)throw new TypeError("Encoder has to be a function.");var charset=opts.charset||defaults.charset;if(void 0!==opts.charset&&"utf-8"!==opts.charset&&"iso-8859-1"!==opts.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var format=formats.default;if(void 0!==opts.format){if(!has$2.call(formats.formatters,opts.format))throw new TypeError("Unknown format option provided.");format=opts.format;}var formatter=formats.formatters[format],filter=defaults.filter;return ("function"==typeof opts.filter||isArray$2(opts.filter))&&(filter=opts.filter),{addQueryPrefix:"boolean"==typeof opts.addQueryPrefix?opts.addQueryPrefix:defaults.addQueryPrefix,allowDots:void 0===opts.allowDots?defaults.allowDots:!!opts.allowDots,charset:charset,charsetSentinel:"boolean"==typeof opts.charsetSentinel?opts.charsetSentinel:defaults.charsetSentinel,delimiter:void 0===opts.delimiter?defaults.delimiter:opts.delimiter,encode:"boolean"==typeof opts.encode?opts.encode:defaults.encode,encoder:"function"==typeof opts.encoder?opts.encoder:defaults.encoder,encodeValuesOnly:"boolean"==typeof opts.encodeValuesOnly?opts.encodeValuesOnly:defaults.encodeValuesOnly,filter:filter,format:format,formatter:formatter,serializeDate:"function"==typeof opts.serializeDate?opts.serializeDate:defaults.serializeDate,skipNulls:"boolean"==typeof opts.skipNulls?opts.skipNulls:defaults.skipNulls,sort:"function"==typeof opts.sort?opts.sort:null,strictNullHandling:"boolean"==typeof opts.strictNullHandling?opts.strictNullHandling:defaults.strictNullHandling}}(opts);"function"==typeof options.filter?obj=(0, options.filter)("",obj):isArray$2(options.filter)&&(objKeys=options.filter);var arrayFormat,keys=[];if("object"!=typeof obj||null===obj)return "";arrayFormat=opts&&opts.arrayFormat in arrayPrefixGenerators?opts.arrayFormat:opts&&"indices"in opts?opts.indices?"indices":"repeat":"indices";var generateArrayPrefix=arrayPrefixGenerators[arrayFormat];objKeys||(objKeys=Object.keys(obj)),options.sort&&objKeys.sort(options.sort);for(var sideChannel$1=sideChannel(),i=0;i<objKeys.length;++i){var key=objKeys[i];options.skipNulls&&null===obj[key]||pushToArray(keys,stringify(obj[key],key,generateArrayPrefix,options.strictNullHandling,options.skipNulls,options.encode?options.encoder:null,options.filter,options.sort,options.allowDots,options.serializeDate,options.format,options.formatter,options.encodeValuesOnly,options.charset,sideChannel$1));}var joined=keys.join(options.delimiter),prefix=!0===options.addQueryPrefix?"?":"";return options.charsetSentinel&&("iso-8859-1"===options.charset?prefix+="utf8=%26%2310003%3B&":prefix+="utf8=%E2%9C%93&"),joined.length>0?prefix+joined:""},componentEmitter=createCommonjsModule((function(module){function Emitter(obj){if(obj)return function(obj){for(var key in Emitter.prototype)obj[key]=Emitter.prototype[key];return obj}(obj)}module.exports=Emitter,Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){return this._callbacks=this._callbacks||{},(this._callbacks["$"+event]=this._callbacks["$"+event]||[]).push(fn),this},Emitter.prototype.once=function(event,fn){function on(){this.off(event,on),fn.apply(this,arguments);}return on.fn=fn,this.on(event,on),this},Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var cb,callbacks=this._callbacks["$"+event];if(!callbacks)return this;if(1==arguments.length)return delete this._callbacks["$"+event],this;for(var i=0;i<callbacks.length;i++)if((cb=callbacks[i])===fn||cb.fn===fn){callbacks.splice(i,1);break}return 0===callbacks.length&&delete this._callbacks["$"+event],this},Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};for(var args=new Array(arguments.length-1),callbacks=this._callbacks["$"+event],i=1;i<arguments.length;i++)args[i-1]=arguments[i];if(callbacks){i=0;for(var len=(callbacks=callbacks.slice(0)).length;i<len;++i)callbacks[i].apply(this,args);}return this},Emitter.prototype.listeners=function(event){return this._callbacks=this._callbacks||{},this._callbacks["$"+event]||[]},Emitter.prototype.hasListeners=function(event){return !!this.listeners(event).length};})),fastSafeStringify=stringify$1;stringify$1.default=stringify$1,stringify$1.stable=deterministicStringify,stringify$1.stableStringify=deterministicStringify;var arr=[],replacerStack=[];function stringify$1(obj,replacer,spacer){var res;for(!function decirc(val,k,stack,parent){var i;if("object"==typeof val&&null!==val){for(i=0;i<stack.length;i++)if(stack[i]===val){var propertyDescriptor=Object.getOwnPropertyDescriptor(parent,k);return void(void 0!==propertyDescriptor.get?propertyDescriptor.configurable?(Object.defineProperty(parent,k,{value:"[Circular]"}),arr.push([parent,k,val,propertyDescriptor])):replacerStack.push([val,k]):(parent[k]="[Circular]",arr.push([parent,k,val])))}if(stack.push(val),Array.isArray(val))for(i=0;i<val.length;i++)decirc(val[i],i,stack,val);else {var keys=Object.keys(val);for(i=0;i<keys.length;i++){var key=keys[i];decirc(val[key],key,stack,val);}}stack.pop();}}(obj,"",[],void 0),res=0===replacerStack.length?JSON.stringify(obj,replacer,spacer):JSON.stringify(obj,replaceGetterValues(replacer),spacer);0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2];}return res}function compareFunction(a,b){return a<b?-1:a>b?1:0}function deterministicStringify(obj,replacer,spacer){var res,tmp=function deterministicDecirc(val,k,stack,parent){var i;if("object"==typeof val&&null!==val){for(i=0;i<stack.length;i++)if(stack[i]===val){var propertyDescriptor=Object.getOwnPropertyDescriptor(parent,k);return void(void 0!==propertyDescriptor.get?propertyDescriptor.configurable?(Object.defineProperty(parent,k,{value:"[Circular]"}),arr.push([parent,k,val,propertyDescriptor])):replacerStack.push([val,k]):(parent[k]="[Circular]",arr.push([parent,k,val])))}if("function"==typeof val.toJSON)return;if(stack.push(val),Array.isArray(val))for(i=0;i<val.length;i++)deterministicDecirc(val[i],i,stack,val);else {var tmp={},keys=Object.keys(val).sort(compareFunction);for(i=0;i<keys.length;i++){var key=keys[i];deterministicDecirc(val[key],key,stack,val),tmp[key]=val[key];}if(void 0===parent)return tmp;arr.push([parent,k,val]),parent[k]=tmp;}stack.pop();}}(obj,"",[],void 0)||obj;for(res=0===replacerStack.length?JSON.stringify(tmp,replacer,spacer):JSON.stringify(tmp,replaceGetterValues(replacer),spacer);0!==arr.length;){var part=arr.pop();4===part.length?Object.defineProperty(part[0],part[1],part[3]):part[0][part[1]]=part[2];}return res}function replaceGetterValues(replacer){return replacer=void 0!==replacer?replacer:function(k,v){return v},function(key,val){if(replacerStack.length>0)for(var i=0;i<replacerStack.length;i++){var part=replacerStack[i];if(part[1]===key&&part[0]===val){val="[Circular]",replacerStack.splice(i,1);break}}return replacer.call(this,key,val)}}function _typeof(obj){return (_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isObject_1=function(obj){return null!==obj&&"object"===_typeof(obj)};function _typeof$1(obj){return (_typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var requestBase=RequestBase;function RequestBase(obj){if(obj)return function(obj){for(var key in RequestBase.prototype)Object.prototype.hasOwnProperty.call(RequestBase.prototype,key)&&(obj[key]=RequestBase.prototype[key]);return obj}(obj)}RequestBase.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),clearTimeout(this._uploadTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,delete this._uploadTimeoutTimer,this},RequestBase.prototype.parse=function(fn){return this._parser=fn,this},RequestBase.prototype.responseType=function(val){return this._responseType=val,this},RequestBase.prototype.serialize=function(fn){return this._serializer=fn,this},RequestBase.prototype.timeout=function(options){if(!options||"object"!==_typeof$1(options))return this._timeout=options,this._responseTimeout=0,this._uploadTimeout=0,this;for(var option in options)if(Object.prototype.hasOwnProperty.call(options,option))switch(option){case"deadline":this._timeout=options.deadline;break;case"response":this._responseTimeout=options.response;break;case"upload":this._uploadTimeout=options.upload;break;default:console.warn("Unknown timeout option",option);}return this},RequestBase.prototype.retry=function(count,fn){return 0!==arguments.length&&!0!==count||(count=1),count<=0&&(count=0),this._maxRetries=count,this._retries=0,this._retryCallback=fn,this};var ERROR_CODES=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];RequestBase.prototype._shouldRetry=function(err,res){if(!this._maxRetries||this._retries++>=this._maxRetries)return !1;if(this._retryCallback)try{var override=this._retryCallback(err,res);if(!0===override)return !0;if(!1===override)return !1}catch(err_){console.error(err_);}if(res&&res.status&&res.status>=500&&501!==res.status)return !0;if(err){if(err.code&&ERROR_CODES.includes(err.code))return !0;if(err.timeout&&"ECONNABORTED"===err.code)return !0;if(err.crossDomain)return !0}return !1},RequestBase.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this.timedoutError=null,this._end()},RequestBase.prototype.then=function(resolve,reject){var _this=this;if(!this._fullfilledPromise){var self=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise((function(resolve,reject){self.on("abort",(function(){if(!(_this._maxRetries&&_this._maxRetries>_this._retries))if(_this.timedout&&_this.timedoutError)reject(_this.timedoutError);else {var err=new Error("Aborted");err.code="ABORTED",err.status=_this.status,err.method=_this.method,err.url=_this.url,reject(err);}})),self.end((function(err,res){err?reject(err):resolve(res);}));}));}return this._fullfilledPromise.then(resolve,reject)},RequestBase.prototype.catch=function(cb){return this.then(void 0,cb)},RequestBase.prototype.use=function(fn){return fn(this),this},RequestBase.prototype.ok=function(cb){if("function"!=typeof cb)throw new Error("Callback required");return this._okCallback=cb,this},RequestBase.prototype._isResponseOK=function(res){return !!res&&(this._okCallback?this._okCallback(res):res.status>=200&&res.status<300)},RequestBase.prototype.get=function(field){return this._header[field.toLowerCase()]},RequestBase.prototype.getHeader=RequestBase.prototype.get,RequestBase.prototype.set=function(field,val){if(isObject_1(field)){for(var key in field)Object.prototype.hasOwnProperty.call(field,key)&&this.set(key,field[key]);return this}return this._header[field.toLowerCase()]=val,this.header[field]=val,this},RequestBase.prototype.unset=function(field){return delete this._header[field.toLowerCase()],delete this.header[field],this},RequestBase.prototype.field=function(name,val){if(null==name)throw new Error(".field(name, val) name can not be empty");if(this._data)throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");if(isObject_1(name)){for(var key in name)Object.prototype.hasOwnProperty.call(name,key)&&this.field(key,name[key]);return this}if(Array.isArray(val)){for(var i in val)Object.prototype.hasOwnProperty.call(val,i)&&this.field(name,val[i]);return this}if(null==val)throw new Error(".field(name, val) val can not be empty");return "boolean"==typeof val&&(val=String(val)),this._getFormData().append(name,val),this},RequestBase.prototype.abort=function(){return this._aborted||(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort")),this},RequestBase.prototype._auth=function(user,pass,options,base64Encoder){switch(options.type){case"basic":this.set("Authorization","Basic ".concat(base64Encoder("".concat(user,":").concat(pass))));break;case"auto":this.username=user,this.password=pass;break;case"bearer":this.set("Authorization","Bearer ".concat(user));}return this},RequestBase.prototype.withCredentials=function(on){return void 0===on&&(on=!0),this._withCredentials=on,this},RequestBase.prototype.redirects=function(n){return this._maxRedirects=n,this},RequestBase.prototype.maxResponseSize=function(n){if("number"!=typeof n)throw new TypeError("Invalid argument");return this._maxResponseSize=n,this},RequestBase.prototype.toJSON=function(){return {method:this.method,url:this.url,data:this._data,headers:this._header}},RequestBase.prototype.send=function(data){var isObj=isObject_1(data),type=this._header["content-type"];if(this._formData)throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");if(isObj&&!this._data)Array.isArray(data)?this._data=[]:this._isHost(data)||(this._data={});else if(data&&this._data&&this._isHost(this._data))throw new Error("Can't merge these send calls");if(isObj&&isObject_1(this._data))for(var key in data)Object.prototype.hasOwnProperty.call(data,key)&&(this._data[key]=data[key]);else "string"==typeof data?(type||this.type("form"),type=this._header["content-type"],this._data="application/x-www-form-urlencoded"===type?this._data?"".concat(this._data,"&").concat(data):data:(this._data||"")+data):this._data=data;return !isObj||this._isHost(data)||type||this.type("json"),this},RequestBase.prototype.sortQuery=function(sort){return this._sort=void 0===sort||sort,this},RequestBase.prototype._finalizeQueryString=function(){var query=this._query.join("&");if(query&&(this.url+=(this.url.includes("?")?"&":"?")+query),this._query.length=0,this._sort){var index=this.url.indexOf("?");if(index>=0){var queryArr=this.url.slice(index+1).split("&");"function"==typeof this._sort?queryArr.sort(this._sort):queryArr.sort(),this.url=this.url.slice(0,index)+"?"+queryArr.join("&");}}},RequestBase.prototype._appendQueryString=function(){console.warn("Unsupported");},RequestBase.prototype._timeoutError=function(reason,timeout,errno){if(!this._aborted){var err=new Error("".concat(reason+timeout,"ms exceeded"));err.timeout=timeout,err.code="ECONNABORTED",err.errno=errno,this.timedout=!0,this.timedoutError=err,this.abort(),this.callback(err);}},RequestBase.prototype._setTimeouts=function(){var self=this;this._timeout&&!this._timer&&(this._timer=setTimeout((function(){self._timeoutError("Timeout of ",self._timeout,"ETIME");}),this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout((function(){self._timeoutError("Response timeout of ",self._responseTimeout,"ETIMEDOUT");}),this._responseTimeout));};var utils$1_type=function(str){return str.split(/ *; */).shift()},utils$1_params=function(str){return str.split(/ *; */).reduce((function(obj,str){var parts=str.split(/ *= */),key=parts.shift(),val=parts.shift();return key&&val&&(obj[key]=val),obj}),{})},utils$1_parseLinks=function(str){return str.split(/ *, */).reduce((function(obj,str){var parts=str.split(/ *; */),url=parts[0].slice(1,-1);return obj[parts[1].split(/ *= */)[1].slice(1,-1)]=url,obj}),{})},responseBase=ResponseBase;function ResponseBase(obj){if(obj)return function(obj){for(var key in ResponseBase.prototype)Object.prototype.hasOwnProperty.call(ResponseBase.prototype,key)&&(obj[key]=ResponseBase.prototype[key]);return obj}(obj)}function _toConsumableArray(arr){return function(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function Agent(){this._defaults=[];}ResponseBase.prototype.get=function(field){return this.header[field.toLowerCase()]},ResponseBase.prototype._setHeaderProperties=function(header){var ct=header["content-type"]||"";this.type=utils$1_type(ct);var params=utils$1_params(ct);for(var key in params)Object.prototype.hasOwnProperty.call(params,key)&&(this[key]=params[key]);this.links={};try{header.link&&(this.links=utils$1_parseLinks(header.link));}catch(_unused){}},ResponseBase.prototype._setStatusProperties=function(status){var type=status/100|0;this.statusCode=status,this.status=this.statusCode,this.statusType=type,this.info=1===type,this.ok=2===type,this.redirect=3===type,this.clientError=4===type,this.serverError=5===type,this.error=(4===type||5===type)&&this.toError(),this.created=201===status,this.accepted=202===status,this.noContent=204===status,this.badRequest=400===status,this.unauthorized=401===status,this.notAcceptable=406===status,this.forbidden=403===status,this.notFound=404===status,this.unprocessableEntity=422===status;},["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert","disableTLSCerts"].forEach((function(fn){Agent.prototype[fn]=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];return this._defaults.push({fn:fn,args:args}),this};})),Agent.prototype._setDefaults=function(req){this._defaults.forEach((function(def){req[def.fn].apply(req,_toConsumableArray(def.args));}));};for(var agentBase=Agent,client=createCommonjsModule((function(module,exports){function _typeof(obj){return (_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var root;function noop(){}"undefined"!=typeof window?root=window:"undefined"==typeof self?(console.warn("Using browser-only version of superagent in non-browser environment"),root=void 0):root=self,module.exports=function(method,url){return "function"==typeof url?new exports.Request("GET",method).end(url):1===arguments.length?new exports.Request("GET",method):new exports.Request(method,url)};var request=exports=module.exports;exports.Request=Request,request.getXHR=function(){if(root.XMLHttpRequest&&(!root.location||"file:"!==root.location.protocol||!root.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(_unused){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(_unused2){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(_unused3){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(_unused4){}throw new Error("Browser-only version of superagent could not find XHR")};var trim="".trim?function(s){return s.trim()}:function(s){return s.replace(/(^\s*|\s*$)/g,"")};function serialize(obj){if(!isObject_1(obj))return obj;var pairs=[];for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&pushEncodedKeyValuePair(pairs,key,obj[key]);return pairs.join("&")}function pushEncodedKeyValuePair(pairs,key,val){if(void 0!==val)if(null!==val)if(Array.isArray(val))val.forEach((function(v){pushEncodedKeyValuePair(pairs,key,v);}));else if(isObject_1(val))for(var subkey in val)Object.prototype.hasOwnProperty.call(val,subkey)&&pushEncodedKeyValuePair(pairs,"".concat(key,"[").concat(subkey,"]"),val[subkey]);else pairs.push(encodeURI(key)+"="+encodeURIComponent(val));else pairs.push(encodeURI(key));}function parseString(str){for(var pair,pos,obj={},pairs=str.split("&"),i=0,len=pairs.length;i<len;++i)-1===(pos=(pair=pairs[i]).indexOf("="))?obj[decodeURIComponent(pair)]="":obj[decodeURIComponent(pair.slice(0,pos))]=decodeURIComponent(pair.slice(pos+1));return obj}function isJSON(mime){return /[/+]json($|[^-\w])/.test(mime)}function Response(req){this.req=req,this.xhr=this.req.xhr,this.text="HEAD"!==this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;var status=this.xhr.status;1223===status&&(status=204),this._setStatusProperties(status),this.headers=function(str){for(var index,line,field,val,lines=str.split(/\r?\n/),fields={},i=0,len=lines.length;i<len;++i)-1!==(index=(line=lines[i]).indexOf(":"))&&(field=line.slice(0,index).toLowerCase(),val=trim(line.slice(index+1)),fields[field]=val);return fields}(this.xhr.getAllResponseHeaders()),this.header=this.headers,this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&req._responseType?this.body=this.xhr.response:this.body="HEAD"===this.req.method?null:this._parseBody(this.text?this.text:this.xhr.response);}function Request(method,url){var self=this;this._query=this._query||[],this.method=method,this.url=url,this.header={},this._header={},this.on("end",(function(){var new_err,err=null,res=null;try{res=new Response(self);}catch(err_){return (err=new Error("Parser is unable to parse the response")).parse=!0,err.original=err_,self.xhr?(err.rawResponse=void 0===self.xhr.responseType?self.xhr.responseText:self.xhr.response,err.status=self.xhr.status?self.xhr.status:null,err.statusCode=err.status):(err.rawResponse=null,err.status=null),self.callback(err)}self.emit("response",res);try{self._isResponseOK(res)||(new_err=new Error(res.statusText||res.text||"Unsuccessful HTTP response"));}catch(err_){new_err=err_;}new_err?(new_err.original=err,new_err.response=res,new_err.status=res.status,self.callback(new_err,res)):self.callback(null,res);}));}function del(url,data,fn){var req=request("DELETE",url);return "function"==typeof data&&(fn=data,data=null),data&&req.send(data),fn&&req.end(fn),req}request.serializeObject=serialize,request.parseString=parseString,request.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},request.serialize={"application/x-www-form-urlencoded":serialize,"application/json":fastSafeStringify},request.parse={"application/x-www-form-urlencoded":parseString,"application/json":JSON.parse},responseBase(Response.prototype),Response.prototype._parseBody=function(str){var parse=request.parse[this.type];return this.req._parser?this.req._parser(this,str):(!parse&&isJSON(this.type)&&(parse=request.parse["application/json"]),parse&&str&&(str.length>0||str instanceof Object)?parse(str):null)},Response.prototype.toError=function(){var req=this.req,method=req.method,url=req.url,msg="cannot ".concat(method," ").concat(url," (").concat(this.status,")"),err=new Error(msg);return err.status=this.status,err.method=method,err.url=url,err},request.Response=Response,componentEmitter(Request.prototype),requestBase(Request.prototype),Request.prototype.type=function(type){return this.set("Content-Type",request.types[type]||type),this},Request.prototype.accept=function(type){return this.set("Accept",request.types[type]||type),this},Request.prototype.auth=function(user,pass,options){1===arguments.length&&(pass=""),"object"===_typeof(pass)&&null!==pass&&(options=pass,pass=""),options||(options={type:"function"==typeof btoa?"basic":"auto"});var encoder=function(string){if("function"==typeof btoa)return btoa(string);throw new Error("Cannot use basic auth, btoa is not a function")};return this._auth(user,pass,options,encoder)},Request.prototype.query=function(val){return "string"!=typeof val&&(val=serialize(val)),val&&this._query.push(val),this},Request.prototype.attach=function(field,file,options){if(file){if(this._data)throw new Error("superagent can't mix .send() and .attach()");this._getFormData().append(field,file,options||file.name);}return this},Request.prototype._getFormData=function(){return this._formData||(this._formData=new root.FormData),this._formData},Request.prototype.callback=function(err,res){if(this._shouldRetry(err,res))return this._retry();var fn=this._callback;this.clearTimeout(),err&&(this._maxRetries&&(err.retries=this._retries-1),this.emit("error",err)),fn(err,res);},Request.prototype.crossDomainError=function(){var err=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");err.crossDomain=!0,err.status=this.status,err.method=this.method,err.url=this.url,this.callback(err);},Request.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},Request.prototype.ca=Request.prototype.agent,Request.prototype.buffer=Request.prototype.ca,Request.prototype.write=function(){throw new Error("Streaming is not supported in browser version of superagent")},Request.prototype.pipe=Request.prototype.write,Request.prototype._isHost=function(obj){return obj&&"object"===_typeof(obj)&&!Array.isArray(obj)&&"[object Object]"!==Object.prototype.toString.call(obj)},Request.prototype.end=function(fn){this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=fn||noop,this._finalizeQueryString(),this._end();},Request.prototype._setUploadTimeout=function(){var self=this;this._uploadTimeout&&!this._uploadTimeoutTimer&&(this._uploadTimeoutTimer=setTimeout((function(){self._timeoutError("Upload timeout of ",self._uploadTimeout,"ETIMEDOUT");}),this._uploadTimeout));},Request.prototype._end=function(){if(this._aborted)return this.callback(new Error("The request has been aborted even before .end() was called"));var self=this;this.xhr=request.getXHR();var xhr=this.xhr,data=this._formData||this._data;this._setTimeouts(),xhr.onreadystatechange=function(){var readyState=xhr.readyState;if(readyState>=2&&self._responseTimeoutTimer&&clearTimeout(self._responseTimeoutTimer),4===readyState){var status;try{status=xhr.status;}catch(_unused5){status=0;}if(!status){if(self.timedout||self._aborted)return;return self.crossDomainError()}self.emit("end");}};var handleProgress=function(direction,e){e.total>0&&(e.percent=e.loaded/e.total*100,100===e.percent&&clearTimeout(self._uploadTimeoutTimer)),e.direction=direction,self.emit("progress",e);};if(this.hasListeners("progress"))try{xhr.addEventListener("progress",handleProgress.bind(null,"download")),xhr.upload&&xhr.upload.addEventListener("progress",handleProgress.bind(null,"upload"));}catch(_unused6){}xhr.upload&&this._setUploadTimeout();try{this.username&&this.password?xhr.open(this.method,this.url,!0,this.username,this.password):xhr.open(this.method,this.url,!0);}catch(err){return this.callback(err)}if(this._withCredentials&&(xhr.withCredentials=!0),!this._formData&&"GET"!==this.method&&"HEAD"!==this.method&&"string"!=typeof data&&!this._isHost(data)){var contentType=this._header["content-type"],_serialize=this._serializer||request.serialize[contentType?contentType.split(";")[0]:""];!_serialize&&isJSON(contentType)&&(_serialize=request.serialize["application/json"]),_serialize&&(data=_serialize(data));}for(var field in this.header)null!==this.header[field]&&Object.prototype.hasOwnProperty.call(this.header,field)&&xhr.setRequestHeader(field,this.header[field]);this._responseType&&(xhr.responseType=this._responseType),this.emit("request",this),xhr.send(void 0===data?null:data);},request.agent=function(){return new agentBase},["GET","POST","OPTIONS","PATCH","PUT","DELETE"].forEach((function(method){agentBase.prototype[method.toLowerCase()]=function(url,fn){var req=new request.Request(method,url);return this._setDefaults(req),fn&&req.end(fn),req};})),agentBase.prototype.del=agentBase.prototype.delete,request.get=function(url,data,fn){var req=request("GET",url);return "function"==typeof data&&(fn=data,data=null),data&&req.query(data),fn&&req.end(fn),req},request.head=function(url,data,fn){var req=request("HEAD",url);return "function"==typeof data&&(fn=data,data=null),data&&req.query(data),fn&&req.end(fn),req},request.options=function(url,data,fn){var req=request("OPTIONS",url);return "function"==typeof data&&(fn=data,data=null),data&&req.send(data),fn&&req.end(fn),req},request.del=del,request.delete=del,request.patch=function(url,data,fn){var req=request("PATCH",url);return "function"==typeof data&&(fn=data,data=null),data&&req.send(data),fn&&req.end(fn),req},request.post=function(url,data,fn){var req=request("POST",url);return "function"==typeof data&&(fn=data,data=null),data&&req.send(data),fn&&req.end(fn),req},request.put=function(url,data,fn){var req=request("PUT",url);return "function"==typeof data&&(fn=data,data=null),data&&req.send(data),fn&&req.end(fn),req};})),byteLength_1=(client.Request,function(b64){var lens=getLens(b64),validLen=lens[0],placeHoldersLen=lens[1];return 3*(validLen+placeHoldersLen)/4-placeHoldersLen}),toByteArray_1=function(b64){var tmp,i,lens=getLens(b64),validLen=lens[0],placeHoldersLen=lens[1],arr=new Arr(function(b64,validLen,placeHoldersLen){return 3*(validLen+placeHoldersLen)/4-placeHoldersLen}(0,validLen,placeHoldersLen)),curByte=0,len=placeHoldersLen>0?validLen-4:validLen;for(i=0;i<len;i+=4)tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)],arr[curByte++]=tmp>>16&255,arr[curByte++]=tmp>>8&255,arr[curByte++]=255&tmp;2===placeHoldersLen&&(tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4,arr[curByte++]=255&tmp);1===placeHoldersLen&&(tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2,arr[curByte++]=tmp>>8&255,arr[curByte++]=255&tmp);return arr},fromByteArray_1=function(uint8){for(var tmp,len=uint8.length,extraBytes=len%3,parts=[],i=0,len2=len-extraBytes;i<len2;i+=16383)parts.push(encodeChunk(uint8,i,i+16383>len2?len2:i+16383));1===extraBytes?(tmp=uint8[len-1],parts.push(lookup[tmp>>2]+lookup[tmp<<4&63]+"==")):2===extraBytes&&(tmp=(uint8[len-2]<<8)+uint8[len-1],parts.push(lookup[tmp>>10]+lookup[tmp>>4&63]+lookup[tmp<<2&63]+"="));return parts.join("")},lookup=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,len=code.length;i<len;++i)lookup[i]=code[i],revLookup[code.charCodeAt(i)]=i;function getLens(b64){var len=b64.length;if(len%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var validLen=b64.indexOf("=");return -1===validLen&&(validLen=len),[validLen,validLen===len?0:4-validLen%4]}function encodeChunk(uint8,start,end){for(var tmp,num,output=[],i=start;i<end;i+=3)tmp=(uint8[i]<<16&16711680)+(uint8[i+1]<<8&65280)+(255&uint8[i+2]),output.push(lookup[(num=tmp)>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[63&num]);return output.join("")}revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63;var base64Js={byteLength:byteLength_1,toByteArray:toByteArray_1,fromByteArray:fromByteArray_1};var base64Url={encode:function(str){return base64Js.fromByteArray(function(str){for(var arr=new Array(str.length),a=0;a<str.length;a++)arr[a]=str.charCodeAt(a);return arr}(str)).replace(/\+/g,"-").replace(/\//g,"_")},decode:function(str){return str=function(str){var mod=str.length%4;return 0===mod?str:str+new Array(1+(4-mod)).join("=")}(str).replace(/-/g,"+").replace(/_/g,"/"),function(array){for(var result="",i=0;i<array.length;i++)result+=String.fromCharCode(array[i]);return result}(base64Js.toByteArray(str))}},version={raw:"9.19.0"},toString=Object.prototype.toString;function attribute(o,attr,type,text){if(type="array"===type?"object":type,o&&typeof o[attr]!==type)throw new Error(text)}function variable(o,type,text){if(typeof o!==type)throw new Error(text)}function value(o,values,text){if(-1===values.indexOf(o))throw new Error(text)}var assert={check:function(o,config,attributes){if(config.optional&&!o||variable(o,config.type,config.message),"object"===config.type&&attributes)for(var keys=Object.keys(attributes),index=0;index<keys.length;index++){var a=keys[index];attributes[a].optional&&!o[a]||attributes[a].condition&&!attributes[a].condition(o)||(attribute(o,a,attributes[a].type,attributes[a].message),attributes[a].values&&value(o[a],attributes[a].values,attributes[a].value_message));}},attribute:attribute,variable:variable,value:value,isArray:function(array){return this.supportsIsArray()?Array.isArray(array):"[object Array]"===toString.call(array)},supportsIsArray:function(){return null!=Array.isArray}};function objectAssignPolyfill(target){if(null==target)throw new TypeError("Cannot convert first argument to object");for(var to=Object(target),i=1;i<arguments.length;i++){var nextSource=arguments[i];if(null!=nextSource)for(var keysArray=Object.keys(Object(nextSource)),nextIndex=0,len=keysArray.length;nextIndex<len;nextIndex++){var nextKey=keysArray[nextIndex],desc=Object.getOwnPropertyDescriptor(nextSource,nextKey);void 0!==desc&&desc.enumerable&&(to[nextKey]=nextSource[nextKey]);}}return to}var objectAssign={get:function(){return Object.assign?Object.assign:objectAssignPolyfill},objectAssignPolyfill:objectAssignPolyfill};function pick(object,keys){return keys.reduce((function(prev,key){return object[key]&&(prev[key]=object[key]),prev}),{})}function objectValues(obj){var values=[];for(var key in obj)values.push(obj[key]);return values}function extend(){var params=objectValues(arguments);return params.unshift({}),objectAssign.get().apply(void 0,params)}function getLocationFromUrl(href){var match=href.match(/^(https?:|file:|chrome-extension:)\/\/(([^:/?#]*)(?::([0-9]+))?)([/]{0,1}[^?#]*)(\?[^#]*|)(#.*|)$/);return match&&{href:href,protocol:match[1],host:match[2],hostname:match[3],port:match[4],pathname:match[5],search:match[6],hash:match[7]}}function trim(options,key){var trimmed=extend(options);return options[key]&&(trimmed[key]=options[key].trim()),trimmed}var objectHelper={toSnakeCase:function toSnakeCase(object,exceptions){return "object"!=typeof object||assert.isArray(object)||null===object?object:(exceptions=exceptions||[],Object.keys(object).reduce((function(p,key){return p[-1===exceptions.indexOf(key)?function(str){for(var code,newKey="",index=0,wasPrevNumber=!0,wasPrevUppercase=!0;index<str.length;)code=str.charCodeAt(index),!wasPrevUppercase&&code>=65&&code<=90||!wasPrevNumber&&code>=48&&code<=57?(newKey+="_",newKey+=str[index].toLowerCase()):newKey+=str[index].toLowerCase(),wasPrevNumber=code>=48&&code<=57,wasPrevUppercase=code>=65&&code<=90,index++;return newKey}(key):key]=toSnakeCase(object[key]),p}),{}))},toCamelCase:function toCamelCase(object,exceptions,options){return "object"!=typeof object||assert.isArray(object)||null===object?object:(exceptions=exceptions||[],options=options||{},Object.keys(object).reduce((function(p,key){var parts,newKey=-1===exceptions.indexOf(key)?(parts=key.split("_")).reduce((function(p,c){return p+c.charAt(0).toUpperCase()+c.slice(1)}),parts.shift()):key;return p[newKey]=toCamelCase(object[newKey]||object[key],[],options),options.keepOriginal&&(p[key]=toCamelCase(object[key],[],options)),p}),{}))},blacklist:function(object,blacklistedKeys){return Object.keys(object).reduce((function(p,key){return -1===blacklistedKeys.indexOf(key)&&(p[key]=object[key]),p}),{})},merge:function(object,keys){return {base:keys?pick(object,keys):object,with:function(object2,keys2){return object2=keys2?pick(object2,keys2):object2,extend(this.base,object2)}}},pick:pick,getKeysNotIn:function(obj,allowedKeys){var notAllowed=[];for(var key in obj)-1===allowedKeys.indexOf(key)&&notAllowed.push(key);return notAllowed},extend:extend,getOriginFromUrl:function(url){if(url){var parsed=getLocationFromUrl(url);if(!parsed)return null;var origin=parsed.protocol+"//"+parsed.hostname;return parsed.port&&(origin+=":"+parsed.port),origin}},getLocationFromUrl:getLocationFromUrl,trimUserDetails:function(options){return function(options,keys){return keys.reduce(trim,options)}(options,["username","email","phoneNumber"])},updatePropertyOn:function updatePropertyOn(obj,path,value){"string"==typeof path&&(path=path.split("."));var next=path[0];obj.hasOwnProperty(next)&&(1===path.length?obj[next]=value:updatePropertyOn(obj[next],path.slice(1),value));}};function RequestWrapper(req){this.request=req,this.method=req.method,this.url=req.url,this.body=req._data,this.headers=req._header;}function RequestObj(req){this.request=req;}function RequestBuilder(options){this._sendTelemetry=!1!==options._sendTelemetry||options._sendTelemetry,this._telemetryInfo=options._telemetryInfo||null,this._timesToRetryFailedRequests=options._timesToRetryFailedRequests,this.headers=options.headers||{},this._universalLoginPage=options.universalLoginPage;}function getWindow(){return window}RequestWrapper.prototype.abort=function(){this.request.abort();},RequestWrapper.prototype.getMethod=function(){return this.method},RequestWrapper.prototype.getBody=function(){return this.body},RequestWrapper.prototype.getUrl=function(){return this.url},RequestWrapper.prototype.getHeaders=function(){return this.headers},RequestObj.prototype.set=function(key,value){return this.request=this.request.set(key,value),this},RequestObj.prototype.send=function(body){return this.request=this.request.send(objectHelper.trimUserDetails(body)),this},RequestObj.prototype.withCredentials=function(){return this.request=this.request.withCredentials(),this},RequestObj.prototype.end=function(cb){return this.request.end(cb),new RequestWrapper(this.request)},RequestBuilder.prototype.setCommonConfiguration=function(ongoingRequest,options){if(options=options||{},this._timesToRetryFailedRequests>0&&(ongoingRequest=ongoingRequest.retry(this._timesToRetryFailedRequests)),options.noHeaders)return ongoingRequest;var headers=this.headers;ongoingRequest=ongoingRequest.set("Content-Type","application/json"),options.xRequestLanguage&&(ongoingRequest=ongoingRequest.set("X-Request-Language",options.xRequestLanguage));for(var keys=Object.keys(this.headers),a=0;a<keys.length;a++)ongoingRequest=ongoingRequest.set(keys[a],headers[keys[a]]);return this._sendTelemetry&&(ongoingRequest=ongoingRequest.set("Auth0-Client",this.getTelemetryData())),ongoingRequest},RequestBuilder.prototype.getTelemetryData=function(){var telemetryName=this._universalLoginPage?"auth0.js-ulp":"auth0.js",clientInfo={name:telemetryName,version:version.raw};this._telemetryInfo&&((clientInfo=objectHelper.extend({},this._telemetryInfo)).env=objectHelper.extend({},this._telemetryInfo.env),clientInfo.env[telemetryName]=version.raw);var jsonClientInfo=JSON.stringify(clientInfo);return base64Url.encode(jsonClientInfo)},RequestBuilder.prototype.get=function(url,options){return new RequestObj(this.setCommonConfiguration(client.get(url),options))},RequestBuilder.prototype.post=function(url,options){return new RequestObj(this.setCommonConfiguration(client.post(url),options))},RequestBuilder.prototype.patch=function(url,options){return new RequestObj(this.setCommonConfiguration(client.patch(url),options))};var windowHelper={redirect:function(url){getWindow().location=url;},getDocument:function(){return getWindow().document},getWindow:getWindow,getOrigin:function(){var location=getWindow().location,origin=location.origin;return origin||(origin=objectHelper.getOriginFromUrl(location.href)),origin}};function DummyStorage(){}DummyStorage.prototype.getItem=function(){return null},DummyStorage.prototype.removeItem=function(){},DummyStorage.prototype.setItem=function(){};var js_cookie=createCommonjsModule((function(module,exports){var factory;factory=function(){function extend(){for(var i=0,result={};i<arguments.length;i++){var attributes=arguments[i];for(var key in attributes)result[key]=attributes[key];}return result}function decode(s){return s.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function init(converter){function api(){}function set(key,value,attributes){if("undefined"!=typeof document){"number"==typeof(attributes=extend({path:"/"},api.defaults,attributes)).expires&&(attributes.expires=new Date(1*new Date+864e5*attributes.expires)),attributes.expires=attributes.expires?attributes.expires.toUTCString():"";try{var result=JSON.stringify(value);/^[\{\[]/.test(result)&&(value=result);}catch(e){}value=converter.write?converter.write(value,key):encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),key=encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var stringifiedAttributes="";for(var attributeName in attributes)attributes[attributeName]&&(stringifiedAttributes+="; "+attributeName,!0!==attributes[attributeName]&&(stringifiedAttributes+="="+attributes[attributeName].split(";")[0]));return document.cookie=key+"="+value+stringifiedAttributes}}function get(key,json){if("undefined"!=typeof document){for(var jar={},cookies=document.cookie?document.cookie.split("; "):[],i=0;i<cookies.length;i++){var parts=cookies[i].split("="),cookie=parts.slice(1).join("=");json||'"'!==cookie.charAt(0)||(cookie=cookie.slice(1,-1));try{var name=decode(parts[0]);if(cookie=(converter.read||converter)(cookie,name)||decode(cookie),json)try{cookie=JSON.parse(cookie);}catch(e){}if(jar[name]=cookie,key===name)break}catch(e){}}return key?jar[key]:jar}}return api.set=set,api.get=function(key){return get(key,!1)},api.getJSON=function(key){return get(key,!0)},api.remove=function(key,attributes){set(key,"",extend(attributes,{expires:-1}));},api.defaults={},api.withConverter=init,api}((function(){}))},module.exports=factory();}));function buildCompatCookieKey(key){return "_"+key+"_compat"}function CookieStorage(options){this._options=options||{};}function Warn(options){this.disableWarnings=options.disableWarnings;}function StorageHandler(options){if(this.warn=new Warn({}),this.storage=new CookieStorage(options),!0===options.__tryLocalStorageFirst)try{var localStorage=windowHelper.getWindow().localStorage;localStorage&&(this.storage=localStorage);}catch(e){this.warn.warning(e),this.warn.warning("Can't use localStorage. Using CookieStorage instead.");}}function Storage(options){this.handler=new StorageHandler(options);}function SSODataStorage(options){this.storage=new Storage(options);}function buildResponse(error,description){return {error:error,errorDescription:description}}CookieStorage.prototype.getItem=function(key){return js_cookie.get(key)||js_cookie.get(buildCompatCookieKey(key))},CookieStorage.prototype.removeItem=function(key){js_cookie.remove(key),js_cookie.remove(buildCompatCookieKey(key));},CookieStorage.prototype.setItem=function(key,value,options){var params=objectHelper.extend({expires:1},options);if("https:"===windowHelper.getWindow().location.protocol&&(params.secure=!0,params.sameSite="none",this._options.legacySameSiteCookie)){var legacyOptions=objectHelper.blacklist(params,["sameSite"]);js_cookie.set(buildCompatCookieKey(key),value,legacyOptions);}js_cookie.set(key,value,params);},Warn.prototype.warning=function(message){this.disableWarnings||console.warn(message);},StorageHandler.prototype.failover=function(){this.storage instanceof DummyStorage?this.warn.warning("DummyStorage: ignore failover"):this.storage instanceof CookieStorage?(this.warn.warning("CookieStorage: failing over DummyStorage"),this.storage=new DummyStorage):(this.warn.warning("LocalStorage: failing over CookieStorage"),this.storage=new CookieStorage);},StorageHandler.prototype.getItem=function(key){try{return this.storage.getItem(key)}catch(e){return this.warn.warning(e),this.failover(),this.getItem(key)}},StorageHandler.prototype.removeItem=function(key){try{return this.storage.removeItem(key)}catch(e){return this.warn.warning(e),this.failover(),this.removeItem(key)}},StorageHandler.prototype.setItem=function(key,value,options){try{return this.storage.setItem(key,value,options)}catch(e){return this.warn.warning(e),this.failover(),this.setItem(key,value,options)}},Storage.prototype.getItem=function(key){var value=this.handler.getItem(key);try{return JSON.parse(value)}catch(_){return value}},Storage.prototype.removeItem=function(key){return this.handler.removeItem(key)},Storage.prototype.setItem=function(key,value,options){var json=JSON.stringify(value);return this.handler.setItem(key,json,options)},SSODataStorage.prototype.set=function(connection,sub){var ssodata={lastUsedConnection:connection,lastUsedSub:sub};this.storage.setItem("auth0.ssodata",JSON.stringify(ssodata));},SSODataStorage.prototype.get=function(){var ssodata=this.storage.getItem("auth0.ssodata");if(ssodata)return JSON.parse(ssodata)};var error={buildResponse:buildResponse,invalidToken:function(description){return buildResponse("invalid_token",description)}};function wrapCallback(cb,options){return (options=options||{}).ignoreCasing=!!options.ignoreCasing&&options.ignoreCasing,function(err,data){var errObj;return err||data?(!err&&data.err&&(err=data.err,data=null),!err&&data.error&&(err=data,data=null),err?(errObj={original:err},objectHelper.updatePropertyOn(errObj,"original.response.req._data.password","*****"),err.response&&err.response.statusCode&&(errObj.statusCode=err.response.statusCode),err.response&&err.response.statusText&&(errObj.statusText=err.response.statusText),err.response&&err.response.body&&(err=err.response.body),err.err&&(err=err.err),errObj.code=err.code||err.error||err.error_code||err.status||null,errObj.description=err.errorDescription||err.error_description||err.description||err.error||err.details||err.err||null,options.forceLegacyError&&(errObj.error=errObj.code,errObj.error_description=errObj.description),err.error_codes&&err.error_details&&(errObj.errorDetails={codes:err.error_codes,details:err.error_details}),err.name&&(errObj.name=err.name),err.policy&&(errObj.policy=err.policy),cb(errObj)):!data.type||"text/html"!==data.type&&"text/plain"!==data.type?options.ignoreCasing?cb(null,data.body||data):cb(null,objectHelper.toCamelCase(data.body||data,[],{keepOriginal:options.keepOriginalCasing})):cb(null,data.text)):cb(error.buildResponse("generic_error","Something went wrong"))}}var tokenParams=["realm","audience","otp","client_id","client_secret","redirect_uri","scope","code","grant_type","username","password","refresh_token","assertion","client_assertion","client_assertion_type","code_verifier"],authorizeParams=["connection","connection_scope","auth0Client","owp","device","realm","organization","invitation","protocol","_csrf","_intstate","login_ticket","client_id","response_type","response_mode","redirect_uri","audience","scope","state","nonce","display","prompt","screen_hint","max_age","ui_locales","claims_locales","id_token_hint","login_hint","acr_values","claims","registration","request","request_uri","code_challenge","code_challenge_method","access_type","display"];var parametersWhitelist={oauthTokenParams:function(warn,params){return objectHelper.pick(params,tokenParams)},oauthAuthorizeParams:function(warn,params){var notAllowed=objectHelper.getKeysNotIn(params,authorizeParams);return notAllowed.length>0&&warn.warning("Following parameters are not allowed on the `/authorize` endpoint: ["+notAllowed.join(",")+"]"),params}},t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global$1?global$1:"undefined"!=typeof self?self:{};function e(t){var e={exports:{}};return t(e,e.exports),e.exports}var r=e((function(e,r){e.exports=function(){function e(t){return "function"==typeof t}var r=Array.isArray?Array.isArray:function(t){return "[object Array]"===Object.prototype.toString.call(t)},i=0,n=void 0,o=void 0,s=function(t,e){l[i]=t,l[i+1]=e,2===(i+=2)&&(o?o(d):w());},h="undefined"!=typeof window?window:void 0,u=h||{},a=u.MutationObserver||u.WebKitMutationObserver,f="undefined"==typeof self&&"undefined"!=typeof browser$1&&"[object process]"==={}.toString.call(browser$1),c="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function p(){var t=setTimeout;return function(){return t(d,1)}}var l=new Array(1e3);function d(){for(var t=0;t<i;t+=2)(0, l[t])(l[t+1]),l[t]=void 0,l[t+1]=void 0;i=0;}var m,v,y,g,w=void 0;function T(t,e){var r=this,i=new this.constructor(S);void 0===i[_]&&O(i);var n=r._state;if(n){var o=arguments[n-1];s((function(){return R(n,i,o,r._result)}));}else I(r,i,t,e);return i}function b(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(S);return B(e,t),e}w=f?function(){return browser$1.nextTick(d)}:a?(v=0,y=new a(d),g=document.createTextNode(""),y.observe(g,{characterData:!0}),function(){g.data=v=++v%2;}):c?((m=new MessageChannel).port1.onmessage=d,function(){return m.port2.postMessage(0)}):void 0===h?function(){try{var t=Function("return this")().require("vertx");return void 0!==(n=t.runOnLoop||t.runOnContext)?function(){n(d);}:p()}catch(t){return p()}}():p();var _=Math.random().toString(36).substring(2);function S(){}var A=void 0;function D(t,r,i){r.constructor===t.constructor&&i===T&&r.constructor.resolve===b?function(t,e){1===e._state?E(t,e._result):2===e._state?k(t,e._result):I(e,void 0,(function(e){return B(t,e)}),(function(e){return k(t,e)}));}(t,r):void 0===i?E(t,r):e(i)?function(t,e,r){s((function(t){var i=!1,n=function(r,n,o,s){try{r.call(n,(function(r){i||(i=!0,e!==r?B(t,r):E(t,r));}),(function(e){i||(i=!0,k(t,e));}));}catch(t){return t}}(r,e);!i&&n&&(i=!0,k(t,n));}),t);}(t,r,i):E(t,r);}function B(t,e){if(t===e)k(t,new TypeError("You cannot resolve a promise with itself"));else if(n=typeof(i=e),null===i||"object"!==n&&"function"!==n)E(t,e);else {var r=void 0;try{r=e.then;}catch(e){return void k(t,e)}D(t,e,r);}var i,n;}function x(t){t._onerror&&t._onerror(t._result),M(t);}function E(t,e){t._state===A&&(t._result=e,t._state=1,0!==t._subscribers.length&&s(M,t));}function k(t,e){t._state===A&&(t._state=2,t._result=e,s(x,t));}function I(t,e,r,i){var n=t._subscribers,o=n.length;t._onerror=null,n[o]=e,n[o+1]=r,n[o+2]=i,0===o&&t._state&&s(M,t);}function M(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var i=void 0,n=void 0,o=t._result,s=0;s<e.length;s+=3)n=e[s+r],(i=e[s])?R(r,i,n,o):n(o);t._subscribers.length=0;}}function R(t,r,i,n){var o=e(i),s=void 0,h=void 0,u=!0;if(o){try{s=i(n);}catch(t){u=!1,h=t;}if(r===s)return void k(r,new TypeError("A promises callback cannot return that same promise."))}else s=n;r._state!==A||(o&&u?B(r,s):!1===u?k(r,h):1===t?E(r,s):2===t&&k(r,s));}var C=0;function O(t){t[_]=C++,t._state=void 0,t._result=void 0,t._subscribers=[];}var j=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(S),this.promise[_]||O(this.promise),r(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?E(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&E(this.promise,this._result))):k(this.promise,new Error("Array Methods must be provided an Array"));}return t.prototype._enumerate=function(t){for(var e=0;this._state===A&&e<t.length;e++)this._eachEntry(t[e],e);},t.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,i=r.resolve;if(i===b){var n=void 0,o=void 0,s=!1;try{n=t.then;}catch(t){s=!0,o=t;}if(n===T&&t._state!==A)this._settledAt(t._state,e,t._result);else if("function"!=typeof n)this._remaining--,this._result[e]=t;else if(r===N){var h=new r(S);s?k(h,o):D(h,t,n),this._willSettleAt(h,e);}else this._willSettleAt(new r((function(e){return e(t)})),e);}else this._willSettleAt(i(t),e);},t.prototype._settledAt=function(t,e,r){var i=this.promise;i._state===A&&(this._remaining--,2===t?k(i,r):this._result[e]=r),0===this._remaining&&E(i,this._result);},t.prototype._willSettleAt=function(t,e){var r=this;I(t,void 0,(function(t){return r._settledAt(1,e,t)}),(function(t){return r._settledAt(2,e,t)}));},t}(),N=function(){function t(e){this[_]=C++,this._result=this._state=void 0,this._subscribers=[],S!==e&&("function"!=typeof e&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof t?function(t,e){try{e((function(e){B(t,e);}),(function(e){k(t,e);}));}catch(e){k(t,e);}}(this,e):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}());}return t.prototype.catch=function(t){return this.then(null,t)},t.prototype.finally=function(t){var r=this,i=r.constructor;return e(t)?r.then((function(e){return i.resolve(t()).then((function(){return e}))}),(function(e){return i.resolve(t()).then((function(){throw e}))})):r.then(t,t)},t}();return N.prototype.then=T,N.all=function(t){return new j(this,t).promise},N.race=function(t){var e=this;return r(t)?new e((function(r,i){for(var n=t.length,o=0;o<n;o++)e.resolve(t[o]).then(r,i);})):new e((function(t,e){return e(new TypeError("You must pass an array to race."))}))},N.resolve=b,N.reject=function(t){var e=new this(S);return k(e,t),e},N._setScheduler=function(t){o=t;},N._setAsap=function(t){s=t;},N._asap=s,N.polyfill=function(){var e=void 0;if(void 0!==t)e=t;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")();}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var r=e.Promise;if(r){var i=null;try{i=Object.prototype.toString.call(r.resolve());}catch(t){}if("[object Promise]"===i&&!r.cast)return}e.Promise=N;},N.Promise=N,N}();})),i$1={__proto__:null,default:{}},n=e((function(e,r){var n;e.exports=n=n||function(e,r){var n;if("undefined"!=typeof window&&window.crypto&&(n=window.crypto),"undefined"!=typeof self&&self.crypto&&(n=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(n=globalThis.crypto),!n&&"undefined"!=typeof window&&window.msCrypto&&(n=window.msCrypto),!n&&void 0!==t&&t.crypto&&(n=t.crypto),!n)try{n=i$1;}catch(t){}var o=function(){if(n){if("function"==typeof n.getRandomValues)try{return n.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof n.randomBytes)try{return n.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},s=Object.create||function(){function t(){}return function(e){var r;return t.prototype=e,r=new t,t.prototype=null,r}}(),h={},u=h.lib={},a=u.Base={extend:function(t){var e=s(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments);}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString);},clone:function(){return this.init.prototype.extend(this)}},f=u.WordArray=a.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length;},toString:function(t){return (t||p).stringify(this)},concat:function(t){var e=this.words,r=t.words,i=this.sigBytes,n=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o<n;o++)e[i+o>>>2]|=(r[o>>>2]>>>24-o%4*8&255)<<24-(i+o)%4*8;else for(var s=0;s<n;s+=4)e[i+s>>>2]=r[s>>>2];return this.sigBytes+=n,this},clamp:function(){var t=this.words,r=this.sigBytes;t[r>>>2]&=4294967295<<32-r%4*8,t.length=e.ceil(r/4);},clone:function(){var t=a.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],r=0;r<t;r+=4)e.push(o());return new f.init(e,t)}}),c=h.enc={},p=c.Hex={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++){var o=e[n>>>2]>>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16));}return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i+=2)r[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new f.init(r,e/2)}},l=c.Latin1={stringify:function(t){for(var e=t.words,r=t.sigBytes,i=[],n=0;n<r;n++)i.push(String.fromCharCode(e[n>>>2]>>>24-n%4*8&255));return i.join("")},parse:function(t){for(var e=t.length,r=[],i=0;i<e;i++)r[i>>>2]|=(255&t.charCodeAt(i))<<24-i%4*8;return new f.init(r,e)}},d=c.Utf8={stringify:function(t){try{return decodeURIComponent(escape(l.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return l.parse(unescape(encodeURIComponent(t)))}},m=u.BufferedBlockAlgorithm=a.extend({reset:function(){this._data=new f.init,this._nDataBytes=0;},_append:function(t){"string"==typeof t&&(t=d.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes;},_process:function(t){var r,i=this._data,n=i.words,o=i.sigBytes,s=this.blockSize,h=o/(4*s),u=(h=t?e.ceil(h):e.max((0|h)-this._minBufferSize,0))*s,a=e.min(4*u,o);if(u){for(var c=0;c<u;c+=s)this._doProcessBlock(n,c);r=n.splice(0,u),i.sigBytes-=a;}return new f.init(r,a)},clone:function(){var t=a.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0});u.Hasher=m.extend({cfg:a.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset();},reset:function(){m.reset.call(this),this._doReset();},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,r){return new t.init(r).finalize(e)}},_createHmacHelper:function(t){return function(e,r){return new v.HMAC.init(t,r).finalize(e)}}});var v=h.algo={};return h}(Math);})),o=e((function(t,e){var r;t.exports=(r=n,function(t){var e=r,i=e.lib,n=i.WordArray,o=i.Hasher,s=e.algo,h=[],u=[];!function(){function e(e){for(var r=t.sqrt(e),i=2;i<=r;i++)if(!(e%i))return !1;return !0}function r(t){return 4294967296*(t-(0|t))|0}for(var i=2,n=0;n<64;)e(i)&&(n<8&&(h[n]=r(t.pow(i,.5))),u[n]=r(t.pow(i,1/3)),n++),i++;}();var a=[],f=s.SHA256=o.extend({_doReset:function(){this._hash=new n.init(h.slice(0));},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],h=r[4],f=r[5],c=r[6],p=r[7],l=0;l<64;l++){if(l<16)a[l]=0|t[e+l];else {var d=a[l-15],m=a[l-2];a[l]=((d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3)+a[l-7]+((m<<15|m>>>17)^(m<<13|m>>>19)^m>>>10)+a[l-16];}var v=i&n^i&o^n&o,y=p+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&f^~h&c)+u[l]+a[l];p=c,c=f,f=h,h=s+y|0,s=o,o=n,n=i,i=y+(((i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22))+v)|0;}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+h|0,r[5]=r[5]+f|0,r[6]=r[6]+c|0,r[7]=r[7]+p|0;},_doFinalize:function(){var e=this._data,r=e.words,i=8*this._nDataBytes,n=8*e.sigBytes;return r[n>>>5]|=128<<24-n%32,r[14+(n+64>>>9<<4)]=t.floor(i/4294967296),r[15+(n+64>>>9<<4)]=i,e.sigBytes=4*r.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=o._createHelper(f),e.HmacSHA256=o._createHmacHelper(f);}(Math),r.SHA256);})),s=e((function(t,e){var r,i;t.exports=(i=(r=n).lib.WordArray,r.enc.Base64={stringify:function(t){var e=t.words,r=t.sigBytes,i=this._map;t.clamp();for(var n=[],o=0;o<r;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,h=0;h<4&&o+.75*h<r;h++)n.push(i.charAt(s>>>6*(3-h)&63));var u=i.charAt(64);if(u)for(;n.length%4;)n.push(u);return n.join("")},parse:function(t){var e=t.length,r=this._map,n=this._reverseMap;if(!n){n=this._reverseMap=[];for(var o=0;o<r.length;o++)n[r.charCodeAt(o)]=o;}var s=r.charAt(64);if(s){var h=t.indexOf(s);-1!==h&&(e=h);}return function(t,e,r){for(var n=[],o=0,s=0;s<e;s++)if(s%4){var h=r[t.charCodeAt(s-1)]<<s%4*2,u=r[t.charCodeAt(s)]>>>6-s%4*2;n[o>>>2]|=(h|u)<<24-o%4*8,o++;}return i.create(n,o)}(t,e,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},r.enc.Base64);})),h=e((function(t,e){t.exports=n.enc.Hex;})),u=e((function(e,r){(function(){var t;function r(t,e,r){null!=t&&("number"==typeof t?this.fromNumber(t,e,r):this.fromString(t,null==e&&"string"!=typeof t?256:e));}function i(){return new r(null)}var n="undefined"!=typeof navigator;n&&"Microsoft Internet Explorer"==navigator.appName?(r.prototype.am=function(t,e,r,i,n,o){for(var s=32767&e,h=e>>15;--o>=0;){var u=32767&this[t],a=this[t++]>>15,f=h*u+a*s;n=((u=s*u+((32767&f)<<15)+r[i]+(1073741823&n))>>>30)+(f>>>15)+h*a+(n>>>30),r[i++]=1073741823&u;}return n},t=30):n&&"Netscape"!=navigator.appName?(r.prototype.am=function(t,e,r,i,n,o){for(;--o>=0;){var s=e*this[t++]+r[i]+n;n=Math.floor(s/67108864),r[i++]=67108863&s;}return n},t=26):(r.prototype.am=function(t,e,r,i,n,o){for(var s=16383&e,h=e>>14;--o>=0;){var u=16383&this[t],a=this[t++]>>14,f=h*u+a*s;n=((u=s*u+((16383&f)<<14)+r[i]+n)>>28)+(f>>14)+h*a,r[i++]=268435455&u;}return n},t=28),r.prototype.DB=t,r.prototype.DM=(1<<t)-1,r.prototype.DV=1<<t,r.prototype.FV=Math.pow(2,52),r.prototype.F1=52-t,r.prototype.F2=2*t-52;var o,s,h=new Array;for(o="0".charCodeAt(0),s=0;s<=9;++s)h[o++]=s;for(o="a".charCodeAt(0),s=10;s<36;++s)h[o++]=s;for(o="A".charCodeAt(0),s=10;s<36;++s)h[o++]=s;function u(t){return "0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function a(t,e){var r=h[t.charCodeAt(e)];return null==r?-1:r}function f(t){var e=i();return e.fromInt(t),e}function c(t){var e,r=1;return 0!=(e=t>>>16)&&(t=e,r+=16),0!=(e=t>>8)&&(t=e,r+=8),0!=(e=t>>4)&&(t=e,r+=4),0!=(e=t>>2)&&(t=e,r+=2),0!=(e=t>>1)&&(t=e,r+=1),r}function p(t){this.m=t;}function l(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t;}function d(t,e){return t&e}function m(t,e){return t|e}function v(t,e){return t^e}function y(t,e){return t&~e}function g(t){if(0==t)return -1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function w(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function T(){}function b(t){return t}function _(t){this.r2=i(),this.q3=i(),r.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t;}p.prototype.convert=function(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},p.prototype.revert=function(t){return t},p.prototype.reduce=function(t){t.divRemTo(this.m,null,t);},p.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r);},p.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e);},l.prototype.convert=function(t){var e=i();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(r.ZERO)>0&&this.m.subTo(e,e),e},l.prototype.revert=function(t){var e=i();return t.copyTo(e),this.reduce(e),e},l.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=32767&t[e],i=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[r=e+this.m.t]+=this.m.am(0,i,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++;}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t);},l.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r);},l.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e);},r.prototype.copyTo=function(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s;},r.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0;},r.prototype.fromString=function(t,e){var i;if(16==e)i=4;else if(8==e)i=3;else if(256==e)i=8;else if(2==e)i=1;else if(32==e)i=5;else {if(4!=e)return void this.fromRadix(t,e);i=2;}this.t=0,this.s=0;for(var n=t.length,o=!1,s=0;--n>=0;){var h=8==i?255&t[n]:a(t,n);h<0?"-"==t.charAt(n)&&(o=!0):(o=!1,0==s?this[this.t++]=h:s+i>this.DB?(this[this.t-1]|=(h&(1<<this.DB-s)-1)<<s,this[this.t++]=h>>this.DB-s):this[this.t-1]|=h<<s,(s+=i)>=this.DB&&(s-=this.DB));}8==i&&0!=(128&t[0])&&(this.s=-1,s>0&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),o&&r.ZERO.subTo(this,this);},r.prototype.clamp=function(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t;},r.prototype.dlShiftTo=function(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s;},r.prototype.drShiftTo=function(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s;},r.prototype.lShiftTo=function(t,e){var r,i=t%this.DB,n=this.DB-i,o=(1<<n)-1,s=Math.floor(t/this.DB),h=this.s<<i&this.DM;for(r=this.t-1;r>=0;--r)e[r+s+1]=this[r]>>n|h,h=(this[r]&o)<<i;for(r=s-1;r>=0;--r)e[r]=0;e[s]=h,e.t=this.t+s+1,e.s=this.s,e.clamp();},r.prototype.rShiftTo=function(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t)e.t=0;else {var i=t%this.DB,n=this.DB-i,o=(1<<i)-1;e[0]=this[r]>>i;for(var s=r+1;s<this.t;++s)e[s-r-1]|=(this[s]&o)<<n,e[s-r]=this[s]>>i;i>0&&(e[this.t-r-1]|=(this.s&o)<<n),e.t=this.t-r,e.clamp();}},r.prototype.subTo=function(t,e){for(var r=0,i=0,n=Math.min(t.t,this.t);r<n;)i+=this[r]-t[r],e[r++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i-=t.s;r<this.t;)i+=this[r],e[r++]=i&this.DM,i>>=this.DB;i+=this.s;}else {for(i+=this.s;r<t.t;)i-=t[r],e[r++]=i&this.DM,i>>=this.DB;i-=t.s;}e.s=i<0?-1:0,i<-1?e[r++]=this.DV+i:i>0&&(e[r++]=i),e.t=r,e.clamp();},r.prototype.multiplyTo=function(t,e){var i=this.abs(),n=t.abs(),o=i.t;for(e.t=o+n.t;--o>=0;)e[o]=0;for(o=0;o<n.t;++o)e[o+i.t]=i.am(0,n[o],e,o,0,i.t);e.s=0,e.clamp(),this.s!=t.s&&r.ZERO.subTo(e,e);},r.prototype.squareTo=function(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var i=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,i,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1);}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp();},r.prototype.divRemTo=function(t,e,n){var o=t.abs();if(!(o.t<=0)){var s=this.abs();if(s.t<o.t)return null!=e&&e.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=i());var h=i(),u=this.s,a=t.s,f=this.DB-c(o[o.t-1]);f>0?(o.lShiftTo(f,h),s.lShiftTo(f,n)):(o.copyTo(h),s.copyTo(n));var p=h.t,l=h[p-1];if(0!=l){var d=l*(1<<this.F1)+(p>1?h[p-2]>>this.F2:0),m=this.FV/d,v=(1<<this.F1)/d,y=1<<this.F2,g=n.t,w=g-p,T=null==e?i():e;for(h.dlShiftTo(w,T),n.compareTo(T)>=0&&(n[n.t++]=1,n.subTo(T,n)),r.ONE.dlShiftTo(p,T),T.subTo(h,h);h.t<p;)h[h.t++]=0;for(;--w>=0;){var b=n[--g]==l?this.DM:Math.floor(n[g]*m+(n[g-1]+y)*v);if((n[g]+=h.am(0,b,n,w,0,p))<b)for(h.dlShiftTo(w,T),n.subTo(T,n);n[g]<--b;)n.subTo(T,n);}null!=e&&(n.drShiftTo(p,e),u!=a&&r.ZERO.subTo(e,e)),n.t=p,n.clamp(),f>0&&n.rShiftTo(f,n),u<0&&r.ZERO.subTo(n,n);}}},r.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return (e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},r.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},r.prototype.exp=function(t,e){if(t>4294967295||t<1)return r.ONE;var n=i(),o=i(),s=e.convert(this),h=c(t)-1;for(s.copyTo(n);--h>=0;)if(e.sqrTo(n,o),(t&1<<h)>0)e.mulTo(o,s,n);else {var u=n;n=o,o=u;}return e.revert(n)},r.prototype.toString=function(t){if(this.s<0)return "-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else {if(4!=t)return this.toRadix(t);e=2;}var r,i=(1<<e)-1,n=!1,o="",s=this.t,h=this.DB-s*this.DB%e;if(s-- >0)for(h<this.DB&&(r=this[s]>>h)>0&&(n=!0,o=u(r));s>=0;)h<e?(r=(this[s]&(1<<h)-1)<<e-h,r|=this[--s]>>(h+=this.DB-e)):(r=this[s]>>(h-=e)&i,h<=0&&(h+=this.DB,--s)),r>0&&(n=!0),n&&(o+=u(r));return n?o:"0"},r.prototype.negate=function(){var t=i();return r.ZERO.subTo(this,t),t},r.prototype.abs=function(){return this.s<0?this.negate():this},r.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var r=this.t;if(0!=(e=r-t.t))return this.s<0?-e:e;for(;--r>=0;)if(0!=(e=this[r]-t[r]))return e;return 0},r.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+c(this[this.t-1]^this.s&this.DM)},r.prototype.mod=function(t){var e=i();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(r.ZERO)>0&&t.subTo(e,e),e},r.prototype.modPowInt=function(t,e){var r;return r=t<256||e.isEven()?new p(e):new l(e),this.exp(t,r)},r.ZERO=f(0),r.ONE=f(1),T.prototype.convert=b,T.prototype.revert=b,T.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r);},T.prototype.sqrTo=function(t,e){t.squareTo(e);},_.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=i();return t.copyTo(e),this.reduce(e),e},_.prototype.revert=function(t){return t},_.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t);},_.prototype.mulTo=function(t,e,r){t.multiplyTo(e,r),this.reduce(r);},_.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e);};var S,A,D,B=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],x=(1<<26)/B[B.length-1];function E(){var t;t=(new Date).getTime(),A[D++]^=255&t,A[D++]^=t>>8&255,A[D++]^=t>>16&255,A[D++]^=t>>24&255,D>=j&&(D-=j);}if(r.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},r.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return "0";var e=this.chunkSize(t),r=Math.pow(t,e),n=f(r),o=i(),s=i(),h="";for(this.divRemTo(n,o,s);o.signum()>0;)h=(r+s.intValue()).toString(t).substr(1)+h,o.divRemTo(n,o,s);return s.intValue().toString(t)+h},r.prototype.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var i=this.chunkSize(e),n=Math.pow(e,i),o=!1,s=0,h=0,u=0;u<t.length;++u){var f=a(t,u);f<0?"-"==t.charAt(u)&&0==this.signum()&&(o=!0):(h=e*h+f,++s>=i&&(this.dMultiply(n),this.dAddOffset(h,0),s=0,h=0));}s>0&&(this.dMultiply(Math.pow(e,s)),this.dAddOffset(h,0)),o&&r.ZERO.subTo(this,this);},r.prototype.fromNumber=function(t,e,i){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(r.ONE.shiftLeft(t-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(r.ONE.shiftLeft(t-1),this);else {var n=new Array,o=7&t;n.length=1+(t>>3),e.nextBytes(n),o>0?n[0]&=(1<<o)-1:n[0]=0,this.fromString(n,256);}},r.prototype.bitwiseTo=function(t,e,r){var i,n,o=Math.min(t.t,this.t);for(i=0;i<o;++i)r[i]=e(this[i],t[i]);if(t.t<this.t){for(n=t.s&this.DM,i=o;i<this.t;++i)r[i]=e(this[i],n);r.t=this.t;}else {for(n=this.s&this.DM,i=o;i<t.t;++i)r[i]=e(n,t[i]);r.t=t.t;}r.s=e(this.s,t.s),r.clamp();},r.prototype.changeBit=function(t,e){var i=r.ONE.shiftLeft(t);return this.bitwiseTo(i,e,i),i},r.prototype.addTo=function(t,e){for(var r=0,i=0,n=Math.min(t.t,this.t);r<n;)i+=this[r]+t[r],e[r++]=i&this.DM,i>>=this.DB;if(t.t<this.t){for(i+=t.s;r<this.t;)i+=this[r],e[r++]=i&this.DM,i>>=this.DB;i+=this.s;}else {for(i+=this.s;r<t.t;)i+=t[r],e[r++]=i&this.DM,i>>=this.DB;i+=t.s;}e.s=i<0?-1:0,i>0?e[r++]=i:i<-1&&(e[r++]=this.DV+i),e.t=r,e.clamp();},r.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp();},r.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e];}},r.prototype.multiplyLowerTo=function(t,e,r){var i,n=Math.min(this.t+t.t,e);for(r.s=0,r.t=n;n>0;)r[--n]=0;for(i=r.t-this.t;n<i;++n)r[n+this.t]=this.am(0,t[n],r,n,0,this.t);for(i=Math.min(t.t,e);n<i;++n)this.am(0,t[n],r,n,0,e-n);r.clamp();},r.prototype.multiplyUpperTo=function(t,e,r){--e;var i=r.t=this.t+t.t-e;for(r.s=0;--i>=0;)r[i]=0;for(i=Math.max(e-this.t,0);i<t.t;++i)r[this.t+i-e]=this.am(e-i,t[i],r,0,0,this.t+i-e);r.clamp(),r.drShiftTo(1,r);},r.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(0==e)r=this[0]%t;else for(var i=this.t-1;i>=0;--i)r=(e*r+this[i])%t;return r},r.prototype.millerRabin=function(t){var e=this.subtract(r.ONE),n=e.getLowestSetBit();if(n<=0)return !1;var o=e.shiftRight(n);(t=t+1>>1)>B.length&&(t=B.length);for(var s=i(),h=0;h<t;++h){s.fromInt(B[Math.floor(Math.random()*B.length)]);var u=s.modPow(o,this);if(0!=u.compareTo(r.ONE)&&0!=u.compareTo(e)){for(var a=1;a++<n&&0!=u.compareTo(e);)if(0==(u=u.modPowInt(2,this)).compareTo(r.ONE))return !1;if(0!=u.compareTo(e))return !1}}return !0},r.prototype.clone=function(){var t=i();return this.copyTo(t),t},r.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return -1}else {if(1==this.t)return this[0];if(0==this.t)return 0}return (this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},r.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},r.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},r.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},r.prototype.toByteArray=function(){var t=this.t,e=new Array;e[0]=this.s;var r,i=this.DB-t*this.DB%8,n=0;if(t-- >0)for(i<this.DB&&(r=this[t]>>i)!=(this.s&this.DM)>>i&&(e[n++]=r|this.s<<this.DB-i);t>=0;)i<8?(r=(this[t]&(1<<i)-1)<<8-i,r|=this[--t]>>(i+=this.DB-8)):(r=this[t]>>(i-=8)&255,i<=0&&(i+=this.DB,--t)),0!=(128&r)&&(r|=-256),0==n&&(128&this.s)!=(128&r)&&++n,(n>0||r!=this.s)&&(e[n++]=r);return e},r.prototype.equals=function(t){return 0==this.compareTo(t)},r.prototype.min=function(t){return this.compareTo(t)<0?this:t},r.prototype.max=function(t){return this.compareTo(t)>0?this:t},r.prototype.and=function(t){var e=i();return this.bitwiseTo(t,d,e),e},r.prototype.or=function(t){var e=i();return this.bitwiseTo(t,m,e),e},r.prototype.xor=function(t){var e=i();return this.bitwiseTo(t,v,e),e},r.prototype.andNot=function(t){var e=i();return this.bitwiseTo(t,y,e),e},r.prototype.not=function(){for(var t=i(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},r.prototype.shiftLeft=function(t){var e=i();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},r.prototype.shiftRight=function(t){var e=i();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},r.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+g(this[t]);return this.s<0?this.t*this.DB:-1},r.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=w(this[r]^e);return t},r.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},r.prototype.setBit=function(t){return this.changeBit(t,m)},r.prototype.clearBit=function(t){return this.changeBit(t,y)},r.prototype.flipBit=function(t){return this.changeBit(t,v)},r.prototype.add=function(t){var e=i();return this.addTo(t,e),e},r.prototype.subtract=function(t){var e=i();return this.subTo(t,e),e},r.prototype.multiply=function(t){var e=i();return this.multiplyTo(t,e),e},r.prototype.divide=function(t){var e=i();return this.divRemTo(t,e,null),e},r.prototype.remainder=function(t){var e=i();return this.divRemTo(t,null,e),e},r.prototype.divideAndRemainder=function(t){var e=i(),r=i();return this.divRemTo(t,e,r),new Array(e,r)},r.prototype.modPow=function(t,e){var r,n,o=t.bitLength(),s=f(1);if(o<=0)return s;r=o<18?1:o<48?3:o<144?4:o<768?5:6,n=o<8?new p(e):e.isEven()?new _(e):new l(e);var h=new Array,u=3,a=r-1,d=(1<<r)-1;if(h[1]=n.convert(this),r>1){var m=i();for(n.sqrTo(h[1],m);u<=d;)h[u]=i(),n.mulTo(m,h[u-2],h[u]),u+=2;}var v,y,g=t.t-1,w=!0,T=i();for(o=c(t[g])-1;g>=0;){for(o>=a?v=t[g]>>o-a&d:(v=(t[g]&(1<<o+1)-1)<<a-o,g>0&&(v|=t[g-1]>>this.DB+o-a)),u=r;0==(1&v);)v>>=1,--u;if((o-=u)<0&&(o+=this.DB,--g),w)h[v].copyTo(s),w=!1;else {for(;u>1;)n.sqrTo(s,T),n.sqrTo(T,s),u-=2;u>0?n.sqrTo(s,T):(y=s,s=T,T=y),n.mulTo(T,h[v],s);}for(;g>=0&&0==(t[g]&1<<o);)n.sqrTo(s,T),y=s,s=T,T=y,--o<0&&(o=this.DB-1,--g);}return n.revert(s)},r.prototype.modInverse=function(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return r.ZERO;for(var i=t.clone(),n=this.clone(),o=f(1),s=f(0),h=f(0),u=f(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),e?(o.isEven()&&s.isEven()||(o.addTo(this,o),s.subTo(t,s)),o.rShiftTo(1,o)):s.isEven()||s.subTo(t,s),s.rShiftTo(1,s);for(;n.isEven();)n.rShiftTo(1,n),e?(h.isEven()&&u.isEven()||(h.addTo(this,h),u.subTo(t,u)),h.rShiftTo(1,h)):u.isEven()||u.subTo(t,u),u.rShiftTo(1,u);i.compareTo(n)>=0?(i.subTo(n,i),e&&o.subTo(h,o),s.subTo(u,s)):(n.subTo(i,n),e&&h.subTo(o,h),u.subTo(s,u));}return 0!=n.compareTo(r.ONE)?r.ZERO:u.compareTo(t)>=0?u.subtract(t):u.signum()<0?(u.addTo(t,u),u.signum()<0?u.add(t):u):u},r.prototype.pow=function(t){return this.exp(t,new T)},r.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var i=e;e=r,r=i;}var n=e.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)return e;for(n<o&&(o=n),o>0&&(e.rShiftTo(o,e),r.rShiftTo(o,r));e.signum()>0;)(n=e.getLowestSetBit())>0&&e.rShiftTo(n,e),(n=r.getLowestSetBit())>0&&r.rShiftTo(n,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return o>0&&r.lShiftTo(o,r),r},r.prototype.isProbablePrime=function(t){var e,r=this.abs();if(1==r.t&&r[0]<=B[B.length-1]){for(e=0;e<B.length;++e)if(r[0]==B[e])return !0;return !1}if(r.isEven())return !1;for(e=1;e<B.length;){for(var i=B[e],n=e+1;n<B.length&&i<x;)i*=B[n++];for(i=r.modInt(i);e<n;)if(i%B[e++]==0)return !1}return r.millerRabin(t)},r.prototype.square=function(){var t=i();return this.squareTo(t),t},r.prototype.Barrett=_,null==A){var k;if(A=new Array,D=0,"undefined"!=typeof window&&window.crypto)if(window.crypto.getRandomValues){var I=new Uint8Array(32);for(window.crypto.getRandomValues(I),k=0;k<32;++k)A[D++]=I[k];}else if("Netscape"==navigator.appName&&navigator.appVersion<"5"){var M=window.crypto.random(32);for(k=0;k<M.length;++k)A[D++]=255&M.charCodeAt(k);}for(;D<j;)k=Math.floor(65536*Math.random()),A[D++]=k>>>8,A[D++]=255&k;D=0,E();}function R(){if(null==S){for(E(),(S=new O).init(A),D=0;D<A.length;++D)A[D]=0;D=0;}return S.next()}function C(){}function O(){this.i=0,this.j=0,this.S=new Array;}C.prototype.nextBytes=function(t){var e;for(e=0;e<t.length;++e)t[e]=R();},O.prototype.init=function(t){var e,r,i;for(e=0;e<256;++e)this.S[e]=e;for(r=0,e=0;e<256;++e)i=this.S[e],this.S[e]=this.S[r=r+this.S[e]+t[e%t.length]&255],this.S[r]=i;this.i=0,this.j=0;},O.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]};var j=256;e.exports={default:r,BigInteger:r,SecureRandom:C};}).call(t);})),a={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414"},f={sha256:o};function c(t,e){if(this.n=null,this.e=0,!(null!=t&&null!=e&&t.length>0&&e.length>0))throw new Error("Invalid key data");this.n=new u.BigInteger(t,16),this.e=parseInt(e,16);}c.prototype.verify=function(t,e){e=e.replace(/[^0-9a-f]|[\s\n]]/gi,"");var r=new u.BigInteger(e,16);if(r.bitLength()>this.n.bitLength())throw new Error("Signature does not match with the key modulus.");var i=function(t){for(var e in a){var r=a[e],i=r.length;if(t.substring(0,i)===r)return {alg:e,hash:t.substring(i)}}return []}(r.modPowInt(this.e,this.n).toString(16).replace(/^1f+00/,""));if(0===i.length)return !1;if(!f.hasOwnProperty(i.alg))throw new Error("Hashing algorithm is not supported.");var n=f[i.alg](t).toString();return i.hash===n};for(var p=[],l=[],d="undefined"!=typeof Uint8Array?Uint8Array:Array,m="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",v=0,y=m.length;v<y;++v)p[v]=m[v],l[m.charCodeAt(v)]=v;l["-".charCodeAt(0)]=62,l["_".charCodeAt(0)]=63;var g=function(t){var e,r,i=function(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return -1===r&&(r=e),[r,r===e?0:4-r%4]}(t),n=i[0],o=i[1],s=new d(function(t,e,r){return 3*(e+r)/4-r}(0,n,o)),h=0,u=o>0?n-4:n;for(r=0;r<u;r+=4)e=l[t.charCodeAt(r)]<<18|l[t.charCodeAt(r+1)]<<12|l[t.charCodeAt(r+2)]<<6|l[t.charCodeAt(r+3)],s[h++]=e>>16&255,s[h++]=e>>8&255,s[h++]=255&e;return 2===o&&(e=l[t.charCodeAt(r)]<<2|l[t.charCodeAt(r+1)]>>4,s[h++]=255&e),1===o&&(e=l[t.charCodeAt(r)]<<10|l[t.charCodeAt(r+1)]<<4|l[t.charCodeAt(r+2)]>>2,s[h++]=e>>8&255,s[h++]=255&e),s};function w(t){var e=t.length%4;return 0===e?t:t+new Array(4-e+1).join("=")}function T(t){return t=w(t).replace(/\-/g,"+").replace(/_/g,"/"),decodeURIComponent(function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}(g(t)).split("").map((function(t){return "%"+("00"+t.charCodeAt(0).toString(16)).slice(-2)})).join(""))}function b(t){return function(t){for(var e="",r=0;r<t.length;r++){var i=t[r].toString(16);e+=2===i.length?i:"0"+i;}return e}(g(w(t)))}var _=e((function(e){var r,i;r=t,i=function(){function t(t){var e=[];if(0===t.length)return "";if("string"!=typeof t[0])throw new TypeError("Url must be a string. Received "+t[0]);if(t[0].match(/^[^/:]+:\/*$/)&&t.length>1){var r=t.shift();t[0]=r+t[0];}t[0]=t[0].match(/^file:\/\/\//)?t[0].replace(/^([^/:]+):\/*/,"$1:///"):t[0].replace(/^([^/:]+):\/*/,"$1://");for(var i=0;i<t.length;i++){var n=t[i];if("string"!=typeof n)throw new TypeError("Url must be a string. Received "+n);""!==n&&(i>0&&(n=n.replace(/^[\/]+/,"")),n=n.replace(/[\/]+$/,i<t.length-1?"":"/"),e.push(n));}var o=e.join("/"),s=(o=o.replace(/\/(\?|&|#[^!])/g,"$1")).split("?");return s.shift()+(s.length>0?"?":"")+s.join("&")}return function(){return t("object"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}},e.exports?e.exports=i():r.urljoin=i();}));function S(t,e){return e=e||{},new Promise((function(r,i){var n=new XMLHttpRequest,o=[],s=[],h={},u=function(){return {ok:2==(n.status/100|0),statusText:n.statusText,status:n.status,url:n.responseURL,text:function(){return Promise.resolve(n.responseText)},json:function(){return Promise.resolve(n.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([n.response]))},clone:u,headers:{keys:function(){return o},entries:function(){return s},get:function(t){return h[t.toLowerCase()]},has:function(t){return t.toLowerCase()in h}}}};for(var a in n.open(e.method||"get",t,!0),n.onload=function(){n.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,(function(t,e,r){o.push(e=e.toLowerCase()),s.push([e,r]),h[e]=h[e]?h[e]+","+r:r;})),r(u());},n.onerror=i,n.withCredentials="include"==e.credentials,e.headers)n.setRequestHeader(a,e.headers[a]);n.send(e.body||null);}))}function A(t){if(t.ok)return t.json();var e=new Error(t.statusText);return e.response=t,Promise.reject(e)}function D(t){this.name="ConfigurationError",this.message=t||"";}function B(t){this.name="TokenValidationError",this.message=t||"";}D.prototype=Error.prototype,B.prototype=Error.prototype;var x=function(){function t(){}var e=t.prototype;return e.get=function(){return null},e.has=function(){return null},e.set=function(){return null},t}();r.polyfill();var E=function(t){return "number"==typeof t},k=function(){return new Date};function I(t){var e=t||{};if(this.jwksCache=e.jwksCache||new x,this.expectedAlg=e.expectedAlg||"RS256",this.issuer=e.issuer,this.audience=e.audience,this.leeway=0===e.leeway?0:e.leeway||60,this.jwksURI=e.jwksURI,this.maxAge=e.maxAge,this.__clock="function"==typeof e.__clock?e.__clock:k,this.leeway<0||this.leeway>300)throw new D("The leeway should be positive and lower than five minutes.");if("RS256"!==this.expectedAlg)throw new D('Signature algorithm of "'+this.expectedAlg+'" is not supported. Expected the ID token to be signed with "RS256".')}function PluginHandler(webAuth,plugins){this.plugins=plugins;for(var a=0;a<this.plugins.length;a++){if(this.plugins[a].version!==version.raw){var pluginName="";throw this.plugins[a].constructor&&this.plugins[a].constructor.name&&(pluginName=this.plugins[a].constructor.name),new Error("Plugin "+pluginName+" version ("+this.plugins[a].version+") is not compatible with the SDK version ("+version.raw+")")}this.plugins[a].setWebAuth(webAuth);}}I.prototype.verify=function(t,e,r){if(!r&&e&&"function"==typeof e&&(r=e,e=void 0),!t)return r(new B("ID token is required but missing"),null);var i=this.decode(t);if(i instanceof Error)return r(new B("ID token could not be decoded"),null);var n=i.encoded.header+"."+i.encoded.payload,o=b(i.encoded.signature),s=i.header.alg,h=i.header.kid,u=i.payload.aud,a=i.payload.sub,f=i.payload.iss,c=i.payload.exp,p=i.payload.nbf,l=i.payload.iat,d=i.payload.azp,m=i.payload.auth_time,v=i.payload.nonce,y=this.__clock(),g=this;if(g.expectedAlg!==s)return r(new B('Signature algorithm of "'+s+'" is not supported. Expected the ID token to be signed with "RS256".'),null);this.getRsaVerifier(f,h,(function(t,s){if(t)return r(t,null);if(!s.verify(n,o))return r(new B("Invalid ID token signature."),null);if(!f||"string"!=typeof f)return r(new B("Issuer (iss) claim must be a string present in the ID token"),null);if(g.issuer!==f)return r(new B('Issuer (iss) claim mismatch in the ID token, expected "'+g.issuer+'", found "'+f+'"'),null);if(!a||"string"!=typeof a)return r(new B("Subject (sub) claim must be a string present in the ID token"),null);if(!u||"string"!=typeof u&&!Array.isArray(u))return r(new B("Audience (aud) claim must be a string or array of strings present in the ID token"),null);if(Array.isArray(u)&&!u.includes(g.audience))return r(new B('Audience (aud) claim mismatch in the ID token; expected "'+g.audience+'" but was not one of "'+u.join(", ")+'"'),null);if("string"==typeof u&&g.audience!==u)return r(new B('Audience (aud) claim mismatch in the ID token; expected "'+g.audience+'" but found "'+u+'"'),null);if(e){if(!v||"string"!=typeof v)return r(new B("Nonce (nonce) claim must be a string present in the ID token"),null);if(v!==e)return r(new B('Nonce (nonce) claim value mismatch in the ID token; expected "'+e+'", found "'+v+'"'),null)}if(Array.isArray(u)&&u.length>1){if(!d||"string"!=typeof d)return r(new B("Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values"),null);if(d!==g.audience)return r(new B('Authorized Party (azp) claim mismatch in the ID token; expected "'+g.audience+'", found "'+d+'"'),null)}if(!c||!E(c))return r(new B("Expiration Time (exp) claim must be a number present in the ID token"),null);if(!l||!E(l))return r(new B("Issued At (iat) claim must be a number present in the ID token"),null);var h=c+g.leeway,w=new Date(0);if(w.setUTCSeconds(h),y>w)return r(new B('Expiration Time (exp) claim error in the ID token; current time "'+y+'" is after expiration time "'+w+'"'),null);if(p&&E(p)){var T=p-g.leeway,b=new Date(0);if(b.setUTCSeconds(T),y<b)return r(new B('Not Before Time (nbf) claim error in the ID token; current time "'+y+'" is before the not before time "'+b+'"'),null)}if(g.maxAge){if(!m||!E(m))return r(new B("Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified"),null);var _=m+g.maxAge+g.leeway,S=new Date(0);if(S.setUTCSeconds(_),y>S)return r(new B('Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Current time "'+y+'" is after last auth time at "'+S+'"'),null)}return r(null,i.payload)}));},I.prototype.getRsaVerifier=function(t,e,r){var i=this,n=t+e;Promise.resolve(this.jwksCache.has(n)).then((function(r){return r?i.jwksCache.get(n):(o={jwksURI:i.jwksURI,iss:t,kid:e},("undefined"==typeof fetch?S:fetch)(o.jwksURI||_(o.iss,".well-known","jwks.json")).then(A).then((function(t){var e,r,i,n=null;for(e=0;e<t.keys.length&&null===n;e++)(r=t.keys[e]).kid===o.kid&&(n=r);if(!n)throw new Error('Could not find a public key for Key ID (kid) "'+o.kid+'"');return {modulus:b((i=n).n),exp:b(i.e)}})).catch((function(t){throw t})));var o;})).then((function(t){if(!t||!t.modulus||!t.exp)throw new Error("Empty keyInfo in response");return Promise.resolve(i.jwksCache.set(n,t)).then((function(){r&&r(null,new c(t.modulus,t.exp));}))})).catch((function(t){r&&r(t);}));},I.prototype.decode=function(t){var e,r,i=t.split(".");if(3!==i.length)return new B("Cannot decode a malformed JWT");try{e=JSON.parse(T(i[0])),r=JSON.parse(T(i[1]));}catch(t){return new B("Token header or payload is not valid JSON")}return {header:e,payload:r,encoded:{header:i[0],payload:i[1],signature:i[2]}}},I.prototype.validateAccessToken=function(t,e,r,i){if(this.expectedAlg!==e)return i(new B('Signature algorithm of "'+e+'" is not supported. Expected "'+this.expectedAlg+'"'));var n,u=o(t),a=h.stringify(u),f=a.substring(0,a.length/2),c=h.parse(f),p=s.stringify(c);return i((n={"+":"-","/":"_","=":""},p.replace(/[+/=]/g,(function(t){return n[t]}))!==r?new B("Invalid access_token"):null))},PluginHandler.prototype.get=function(extensibilityPoint){for(var a=0;a<this.plugins.length;a++)if(this.plugins[a].supports(extensibilityPoint))return this.plugins[a].init();return null};var random={randomString:function(length){var bytes=new Uint8Array(length),result=[],charset="0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._~",cryptoObj=windowHelper.getWindow().crypto||windowHelper.getWindow().msCrypto;if(!cryptoObj)return null;for(var random=cryptoObj.getRandomValues(bytes),a=0;a<random.length;a++)result.push(charset[random[a]%charset.length]);return result.join("")}};function TransactionManager(options){var transaction=options.transaction||{};this.namespace=transaction.namespace||"com.auth0.auth.",this.keyLength=transaction.keyLength||32,this.stateExpiration=options.stateExpiration?options.stateExpiration/60/24:1/48,this.storage=new Storage(options),this.options=options;}function IframeHandler(options){if(this.url=options.url,this.callback=options.callback,this.timeout=options.timeout||6e4,this.timeoutCallback=options.timeoutCallback||null,this.eventListenerType=options.eventListenerType||"message",this.iframe=null,this.timeoutHandle=null,this._destroyTimeout=null,this.transientMessageEventListener=null,this.proxyEventListener=null,this.eventValidator=options.eventValidator||{isValid:function(){return !0}},"function"!=typeof this.callback)throw new Error("options.callback must be a function")}function WebMessageHandler(webAuth){this.webAuth=webAuth,this.warn=new Warn(webAuth.baseOptions);}function CrossOriginAuthentication(webAuth,options){this.webAuth=webAuth,this.baseOptions=options,this.request=new RequestBuilder(options),this.webMessageHandler=new WebMessageHandler(webAuth),this.storage=new Storage(options);}function createKey(origin,coId){return ["co/verifier",encodeURIComponent(origin),encodeURIComponent(coId)].join("/")}function Redirect(auth0,options){this.webAuth=auth0,this.baseOptions=options,this.crossOriginAuthentication=new CrossOriginAuthentication(auth0,this.baseOptions),this.warn=new Warn({disableWarnings:!!options._disableDeprecationWarnings});}TransactionManager.prototype.process=function(options){if(!options.responseType)throw new Error("responseType is required");var lastUsedConnection=options.realm||options.connection,responseTypeIncludesIdToken=-1!==options.responseType.indexOf("id_token"),transaction=this.generateTransaction(options.appState,options.state,options.nonce,lastUsedConnection,responseTypeIncludesIdToken,options.organization);return options.state||(options.state=transaction.state),responseTypeIncludesIdToken&&!options.nonce&&(options.nonce=transaction.nonce),options},TransactionManager.prototype.generateTransaction=function(appState,state,nonce,lastUsedConnection,generateNonce,organization){if(state=state||random.randomString(this.keyLength),nonce=nonce||(generateNonce?random.randomString(this.keyLength):null),!(windowHelper.getWindow().location.host===this.options.domain)){var transactionPayload={nonce:nonce,appState:appState,state:state,lastUsedConnection:lastUsedConnection};organization&&(transactionPayload.organization=organization),this.storage.setItem(this.namespace+state,transactionPayload,{expires:this.stateExpiration});}return {state:state,nonce:nonce}},TransactionManager.prototype.getStoredTransaction=function(state){var transactionData;return transactionData=this.storage.getItem(this.namespace+state),this.clearTransaction(state),transactionData},TransactionManager.prototype.clearTransaction=function(state){this.storage.removeItem(this.namespace+state);},IframeHandler.prototype.init=function(){var _this=this,_window=windowHelper.getWindow();switch(this.iframe=_window.document.createElement("iframe"),this.iframe.style.display="none",this.proxyEventListener=function(e){_this.eventListener(e);},this.eventListenerType){case"message":this.eventSourceObject=_window;break;case"load":this.eventSourceObject=this.iframe;break;default:throw new Error("Unsupported event listener type: "+this.eventListenerType)}this.eventSourceObject.addEventListener(this.eventListenerType,this.proxyEventListener,!1),_window.document.body.appendChild(this.iframe),this.iframe.src=this.url,this.timeoutHandle=setTimeout((function(){_this.timeoutHandler();}),this.timeout);},IframeHandler.prototype.eventListener=function(event){var eventData={event:event,sourceObject:this.eventSourceObject};this.eventValidator.isValid(eventData)&&(this.destroy(),this.callback(eventData));},IframeHandler.prototype.timeoutHandler=function(){this.destroy(),this.timeoutCallback&&this.timeoutCallback();},IframeHandler.prototype.destroy=function(){var _this=this;clearTimeout(this.timeoutHandle),this._destroyTimeout=setTimeout((function(){_this.eventSourceObject.removeEventListener(_this.eventListenerType,_this.proxyEventListener,!1),_this.iframe.parentNode&&_this.iframe.parentNode.removeChild(_this.iframe);}),0);},WebMessageHandler.prototype.run=function(options,cb){var _this=this;options.responseMode="web_message",options.prompt="none";var currentOrigin=windowHelper.getOrigin(),redirectUriOrigin=objectHelper.getOriginFromUrl(options.redirectUri);if(redirectUriOrigin&&currentOrigin!==redirectUriOrigin)return cb({error:"origin_mismatch",error_description:"The redirectUri's origin ("+redirectUriOrigin+") should match the window's origin ("+currentOrigin+")."});!function(authorizeUrl,options,callback){new IframeHandler({url:authorizeUrl,eventListenerType:"message",callback:function(eventData){callback(null,eventData);},timeout:options.timeout,eventValidator:{isValid:function(eventData){return !(!eventData.event.data||"authorization_response"!==eventData.event.data.type||options.state!==eventData.event.data.response.state)}},timeoutCallback:function(){callback({error:"timeout",error_description:"Timeout during executing web_message communication",state:options.state});}}).init();}(this.webAuth.client.buildAuthorizeUrl(options),options,(function(err,eventData){var error=err;if(!err&&eventData.event.data.response.error&&(error=eventData.event.data.response),!error){var parsedHash=eventData.event.data.response;return _this.webAuth.validateAuthenticationResponse(options,parsedHash,cb)}return "consent_required"===error.error&&"localhost"===windowHelper.getWindow().location.hostname&&_this.warn.warning("Consent Required. Consent can't be skipped on localhost. Read more here: https://auth0.com/docs/api-auth/user-consent#skipping-consent-for-first-party-clients"),_this.webAuth.transactionManager.clearTransaction(error.state),cb(objectHelper.pick(error,["error","error_description"]))}));},CrossOriginAuthentication.prototype.login=function(options,cb){var _this=this,url=urlJoin(this.baseOptions.rootUrl,"/co/authenticate");options.username=options.username||options.email,delete options.email;var authenticateBody={client_id:options.clientID||this.baseOptions.clientID,username:options.username};options.password&&(authenticateBody.password=options.password),options.otp&&(authenticateBody.otp=options.otp);var realm=options.realm||this.baseOptions.realm;if(realm){var credentialType=options.credentialType||this.baseOptions.credentialType||"http://auth0.com/oauth/grant-type/password-realm";authenticateBody.realm=realm,authenticateBody.credential_type=credentialType;}else authenticateBody.credential_type="password";this.request.post(url).withCredentials().send(authenticateBody).end((function(err,data){if(err){var errorObject=err.response&&err.response.body||{error:"request_error",error_description:JSON.stringify(err)};return wrapCallback(cb,{forceLegacyError:!0})(errorObject)}function doAuth(){var popupMode=!0===options.popup;options=objectHelper.blacklist(options,["password","credentialType","otp","popup","onRedirecting"]);var authorizeOptions=objectHelper.merge(options).with({loginTicket:data.body.login_ticket}),key=createKey(_this.baseOptions.rootUrl,data.body.co_id);_this.storage.setItem(key,data.body.co_verifier,{expires:1/96}),popupMode?_this.webMessageHandler.run(authorizeOptions,wrapCallback(cb,{forceLegacyError:!0})):_this.webAuth.authorize(authorizeOptions);}"function"==typeof options.onRedirecting?options.onRedirecting(doAuth):doAuth();}));},CrossOriginAuthentication.prototype.callback=function(){var targetOrigin=decodeURIComponent(function(name){var parts=("&"+windowHelper.getWindow().location.hash.substring(1)).split("&"+name+"=");if(2===parts.length)return parts.pop().split("&").shift()}("origin")),theWindow=windowHelper.getWindow(),_this=this;theWindow.addEventListener("message",(function(evt){if("co_verifier_request"===evt.data.type){var key=createKey(evt.origin,evt.data.request.id),verifier=function(storage,key){try{var verifier=storage.getItem(key);return storage.removeItem(key),verifier||""}catch(e){return ""}}(_this.storage,key);evt.source.postMessage({type:"co_verifier_response",response:{verifier:verifier}},evt.origin);}})),theWindow.parent.postMessage({type:"ready"},targetOrigin);},Redirect.prototype.loginWithCredentials=function(options,cb){options.realm=options.realm||options.connection,delete options.connection,this.crossOriginAuthentication.login(options,cb);},Redirect.prototype.signupAndLogin=function(options,cb){var _this=this;return this.webAuth.client.dbConnection.signup(options,(function(err){return err?cb(err):(options.realm=options.realm||options.connection,delete options.connection,_this.webAuth.login(options,cb))}))};var winchan=createCommonjsModule((function(module){var WinChan=function(){function addListener(w,event,cb){w.attachEvent?w.attachEvent("on"+event,cb):w.addEventListener&&w.addEventListener(event,cb,!1);}function removeListener(w,event,cb){w.detachEvent?w.detachEvent("on"+event,cb):w.removeEventListener&&w.removeEventListener(event,cb,!1);}function extractOrigin(url){/^https?:\/\//.test(url)||(url=window.location.href);var m=/^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(url);return m?m[1]:url}var isIE=function(){if("undefined"==typeof navigator)return !1;var rv=-1,ua=navigator.userAgent;if("Microsoft Internet Explorer"===navigator.appName)null!=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})").exec(ua)&&(rv=parseFloat(RegExp.$1));else if(ua.indexOf("Trident")>-1){null!==new RegExp("rv:([0-9]{2,2}[.0-9]{0,})").exec(ua)&&(rv=parseFloat(RegExp.$1));}return rv>=8}();return "undefined"!=typeof window&&window.JSON&&window.JSON.stringify&&window.JSON.parse&&window.postMessage?{open:function(opts,cb){if(!cb)throw "missing required callback argument";var err,iframe;opts.url||(err="missing required 'url' parameter"),opts.relay_url||(err="missing required 'relay_url' parameter"),err&&setTimeout((function(){cb(err);}),0),opts.window_name||(opts.window_name=null),opts.window_features&&!function(){try{var userAgent=navigator.userAgent;return -1!=userAgent.indexOf("Fennec/")||-1!=userAgent.indexOf("Firefox/")&&-1!=userAgent.indexOf("Android")}catch(e){}return !1}()||(opts.window_features=void 0);var messageTarget,origin=opts.origin||extractOrigin(opts.url);if(origin!==extractOrigin(opts.relay_url))return setTimeout((function(){cb("invalid arguments: origin of url and relay_url must match");}),0);isIE&&((iframe=document.createElement("iframe")).setAttribute("src",opts.relay_url),iframe.style.display="none",iframe.setAttribute("name","__winchan_relay_frame"),document.body.appendChild(iframe),messageTarget=iframe.contentWindow);var w=opts.popup||window.open(opts.url,opts.window_name,opts.window_features);opts.popup&&(w.location.href=opts.url),messageTarget||(messageTarget=w);var closeInterval=setInterval((function(){w&&w.closed&&(cleanup(),cb&&(cb("User closed the popup window"),cb=null));}),500),req=JSON.stringify({a:"request",d:opts.params});function cleanup(){if(iframe&&document.body.removeChild(iframe),iframe=void 0,closeInterval&&(closeInterval=clearInterval(closeInterval)),removeListener(window,"message",onMessage),removeListener(window,"unload",cleanup),w)try{w.close();}catch(securityViolation){messageTarget.postMessage("die",origin);}w=messageTarget=void 0;}function onMessage(e){if(e.origin===origin){try{var d=JSON.parse(e.data);}catch(err){if(cb)return cb(err);throw err}"ready"===d.a?messageTarget.postMessage(req,origin):"error"===d.a?(cleanup(),cb&&(cb(d.d),cb=null)):"response"===d.a&&(cleanup(),cb&&(cb(null,d.d),cb=null));}}return addListener(window,"unload",cleanup),addListener(window,"message",onMessage),{originalPopup:w,close:cleanup,focus:function(){if(w)try{w.focus();}catch(e){}}}},onOpen:function(cb){var o="*",msgTarget=isIE?function(){for(var frames=window.opener.frames,i=frames.length-1;i>=0;i--)try{if(frames[i].location.protocol===window.location.protocol&&frames[i].location.host===window.location.host&&"__winchan_relay_frame"===frames[i].name)return frames[i]}catch(e){}}():window.opener;if(!msgTarget)throw "can't find relay frame";function doPost(msg){msg=JSON.stringify(msg),isIE?msgTarget.doPost(msg,o):msgTarget.postMessage(msg,o);}function onDie(e){if("die"===e.data)try{window.close();}catch(o_O){}}addListener(isIE?msgTarget:window,"message",(function onMessage(e){var d;try{d=JSON.parse(e.data);}catch(err){}d&&"request"===d.a&&(removeListener(window,"message",onMessage),o=e.origin,cb&&setTimeout((function(){cb(o,d.d,(function(r){cb=void 0,doPost({a:"response",d:r});}));}),0));})),addListener(isIE?msgTarget:window,"message",onDie);try{doPost({a:"ready"});}catch(e){addListener(msgTarget,"load",(function(e){doPost({a:"ready"});}));}var onUnload=function(){try{removeListener(isIE?msgTarget:window,"message",onDie);}catch(ohWell){}cb&&doPost({a:"error",d:"client closed window"}),cb=void 0;try{window.close();}catch(e){}};return addListener(window,"unload",onUnload),{detach:function(){removeListener(window,"unload",onUnload);}}}}:{open:function(url,winopts,arg,cb){setTimeout((function(){cb("unsupported browser");}),0);},onOpen:function(cb){setTimeout((function(){cb("unsupported browser");}),0);}}}();module.exports&&(module.exports=WinChan);}));var urlHelper={extractOrigin:function(url){/^https?:\/\//.test(url)||(url=window.location.href);var m=/^(https?:\/\/[-_a-zA-Z.0-9:]+)/.exec(url);return m?m[1]:url}};function PopupHandler(){this._current_popup=null;}function Popup(webAuth,options){this.baseOptions=options,this.baseOptions.popupOrigin=options.popupOrigin,this.client=webAuth.client,this.webAuth=webAuth,this.transactionManager=new TransactionManager(this.baseOptions),this.crossOriginAuthentication=new CrossOriginAuthentication(webAuth,this.baseOptions),this.warn=new Warn({disableWarnings:!!options._disableDeprecationWarnings});}function SilentAuthenticationHandler(options){this.authenticationUrl=options.authenticationUrl,this.timeout=options.timeout||6e4,this.handler=null,this.postMessageDataType=options.postMessageDataType||!1,this.postMessageOrigin=options.postMessageOrigin||windowHelper.getWindow().location.origin||windowHelper.getWindow().location.protocol+"//"+windowHelper.getWindow().location.hostname+(windowHelper.getWindow().location.port?":"+windowHelper.getWindow().location.port:"");}function UsernamePassword(options){this.baseOptions=options,this.request=new RequestBuilder(options),this.transactionManager=new TransactionManager(this.baseOptions);}function HostedPages(client,options){this.baseOptions=options,this.client=client,this.baseOptions.universalLoginPage=!0,this.request=new RequestBuilder(this.baseOptions),this.warn=new Warn({disableWarnings:!!options._disableDeprecationWarnings});}PopupHandler.prototype.calculatePosition=function(options){var width=options.width||500,height=options.height||600,_window=windowHelper.getWindow(),screenX=void 0!==_window.screenX?_window.screenX:_window.screenLeft,screenY=void 0!==_window.screenY?_window.screenY:_window.screenTop,outerWidth=void 0!==_window.outerWidth?_window.outerWidth:_window.document.body.clientWidth,outerHeight=void 0!==_window.outerHeight?_window.outerHeight:_window.document.body.clientHeight;return {width:width,height:height,left:options.left||screenX+(outerWidth-width)/2,top:options.top||screenY+(outerHeight-height)/2}},PopupHandler.prototype.preload=function(options){var _this=this,_window=windowHelper.getWindow(),popupPosition=this.calculatePosition(options.popupOptions||{}),popupOptions=objectHelper.merge(popupPosition).with(options.popupOptions),url=options.url||"about:blank",windowFeatures=lib_stringify(popupOptions,{encode:!1,delimiter:","});return this._current_popup&&!this._current_popup.closed||(this._current_popup=_window.open(url,"auth0_signup_popup",windowFeatures),this._current_popup.kill=function(){this.close(),_this._current_popup=null;}),this._current_popup},PopupHandler.prototype.load=function(url,relayUrl,options,cb){var _this=this,popupPosition=this.calculatePosition(options.popupOptions||{}),popupOptions=objectHelper.merge(popupPosition).with(options.popupOptions),winchanOptions=objectHelper.merge({url:url,relay_url:relayUrl,window_features:lib_stringify(popupOptions,{delimiter:",",encode:!1}),popup:this._current_popup}).with(options),popup=winchan.open(winchanOptions,(function(err,data){if(!err||"SyntaxError"!==err.name)return _this._current_popup=null,cb(err,data)}));return popup.focus(),popup},Popup.prototype.buildPopupHandler=function(){var pluginHandler=this.baseOptions.plugins.get("popup.getPopupHandler");return pluginHandler?pluginHandler.getPopupHandler():new PopupHandler},Popup.prototype.preload=function(options){options=options||{};var popup=this.buildPopupHandler();return popup.preload(options),popup},Popup.prototype.getPopupHandler=function(options,preload){return options.popupHandler?options.popupHandler:preload?this.preload(options):this.buildPopupHandler()},Popup.prototype.callback=function(options){var _this=this,theWindow=windowHelper.getWindow(),originUrl=(options=options||{}).popupOrigin||this.baseOptions.popupOrigin||windowHelper.getOrigin();theWindow.opener?winchan.onOpen((function(popupOrigin,r,cb){if(popupOrigin!==originUrl)return cb({error:"origin_mismatch",error_description:"The popup's origin ("+popupOrigin+") should match the `popupOrigin` parameter ("+originUrl+")."});_this.webAuth.parseHash(options||{},(function(err,data){return cb(err||data)}));})):theWindow.doPost=function(msg){theWindow.parent&&theWindow.parent.postMessage(msg,originUrl);};},Popup.prototype.authorize=function(options,cb){var url,relayUrl,popOpts={},pluginHandler=this.baseOptions.plugins.get("popup.authorize"),params=objectHelper.merge(this.baseOptions,["clientID","scope","domain","audience","tenant","responseType","redirectUri","_csrf","state","_intstate","nonce","organization","invitation"]).with(objectHelper.blacklist(options,["popupHandler"]));return assert.check(params,{type:"object",message:"options parameter is not valid"},{responseType:{type:"string",message:"responseType option is required"}}),relayUrl=urlJoin(this.baseOptions.rootUrl,"relay.html"),options.owp?params.owp=!0:(popOpts.origin=urlHelper.extractOrigin(params.redirectUri),relayUrl=params.redirectUri),options.popupOptions&&(popOpts.popupOptions=objectHelper.pick(options.popupOptions,["width","height","top","left"])),pluginHandler&&(params=pluginHandler.processParams(params)),(params=this.transactionManager.process(params)).scope=params.scope||"openid profile email",delete params.domain,url=this.client.buildAuthorizeUrl(params),this.getPopupHandler(options).load(url,relayUrl,popOpts,wrapCallback(cb,{keepOriginalCasing:!0}))},Popup.prototype.loginWithCredentials=function(options,cb){options.realm=options.realm||options.connection,options.popup=!0,options=objectHelper.merge(this.baseOptions,["redirectUri","responseType","state","nonce"]).with(objectHelper.blacklist(options,["popupHandler","connection"])),options=this.transactionManager.process(options),this.crossOriginAuthentication.login(options,cb);},Popup.prototype.passwordlessVerify=function(options,cb){var _this=this;return this.client.passwordless.verify(objectHelper.blacklist(options,["popupHandler"]),(function(err){if(err)return cb(err);options.username=options.phoneNumber||options.email,options.password=options.verificationCode,delete options.email,delete options.phoneNumber,delete options.verificationCode,delete options.type,_this.client.loginWithResourceOwner(options,cb);}))},Popup.prototype.signupAndLogin=function(options,cb){var _this=this;return this.client.dbConnection.signup(options,(function(err){if(err)return cb(err);_this.loginWithCredentials(options,cb);}))},SilentAuthenticationHandler.create=function(options){return new SilentAuthenticationHandler(options)},SilentAuthenticationHandler.prototype.login=function(usePostMessage,callback){this.handler=new IframeHandler({auth0:this.auth0,url:this.authenticationUrl,eventListenerType:usePostMessage?"message":"load",callback:this.getCallbackHandler(callback,usePostMessage),timeout:this.timeout,eventValidator:this.getEventValidator(),timeoutCallback:function(){callback(null,"#error=timeout&error_description=Timeout+during+authentication+renew.");},usePostMessage:usePostMessage||!1}),this.handler.init();},SilentAuthenticationHandler.prototype.getEventValidator=function(){var _this=this;return {isValid:function(eventData){switch(eventData.event.type){case"message":return eventData.event.origin===_this.postMessageOrigin&&eventData.event.source===_this.handler.iframe.contentWindow&&(!1===_this.postMessageDataType||eventData.event.data.type&&eventData.event.data.type===_this.postMessageDataType);case"load":if("about:"===eventData.sourceObject.contentWindow.location.protocol)return !1;default:return !0}}}},SilentAuthenticationHandler.prototype.getCallbackHandler=function(callback,usePostMessage){return function(eventData){var callbackValue;callbackValue=usePostMessage?"object"==typeof eventData.event.data&&eventData.event.data.hash?eventData.event.data.hash:eventData.event.data:eventData.sourceObject.contentWindow.location.hash,callback(null,callbackValue);}},UsernamePassword.prototype.login=function(options,cb){var url,body;return url=urlJoin(this.baseOptions.rootUrl,"usernamepassword","login"),options.username=options.username||options.email,options=objectHelper.blacklist(options,["email","onRedirecting"]),body=objectHelper.merge(this.baseOptions,["clientID","redirectUri","tenant","responseType","responseMode","scope","audience"]).with(options),body=this.transactionManager.process(body),body=objectHelper.toSnakeCase(body,["auth0Client"]),this.request.post(url).send(body).end(wrapCallback(cb))},UsernamePassword.prototype.callback=function(formHtml){var div,_document=windowHelper.getDocument();(div=_document.createElement("div")).innerHTML=formHtml,_document.body.appendChild(div).children[0].submit();},HostedPages.prototype.login=function(options,cb){if(windowHelper.getWindow().location.host!==this.baseOptions.domain)throw new Error("This method is meant to be used only inside the Universal Login Page.");var usernamePassword,params=objectHelper.merge(this.baseOptions,["clientID","redirectUri","tenant","responseType","responseMode","scope","audience","_csrf","state","_intstate","nonce"]).with(options);return assert.check(params,{type:"object",message:"options parameter is not valid"},{responseType:{type:"string",message:"responseType option is required"}}),(usernamePassword=new UsernamePassword(this.baseOptions)).login(params,(function(err,data){if(err)return cb(err);function doAuth(){usernamePassword.callback(data);}if("function"==typeof options.onRedirecting)return options.onRedirecting((function(){doAuth();}));doAuth();}))},HostedPages.prototype.signupAndLogin=function(options,cb){var _this=this;return _this.client.client.dbConnection.signup(options,(function(err){return err?cb(err):_this.login(options,cb)}))},HostedPages.prototype.getSSOData=function(withActiveDirectories,cb){var url,params="";return "function"==typeof withActiveDirectories&&(cb=withActiveDirectories,withActiveDirectories=!1),assert.check(withActiveDirectories,{type:"boolean",message:"withActiveDirectories parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),withActiveDirectories&&(params="?"+lib_stringify({ldaps:1,client_id:this.baseOptions.clientID})),url=urlJoin(this.baseOptions.rootUrl,"user","ssodata",params),this.request.get(url,{noHeaders:!0}).withCredentials().end(wrapCallback(cb))};var noop=function(){},defaults$2={lang:"en",templates:{auth0:function(challenge){var message="code"===challenge.type?"Enter the code shown above":"Solve the formula shown above";return '<div class="captcha-challenge">\n  <img src="'+challenge.image+'" />\n  <button type="button" class="captcha-reload">↺</button>\n</div>\n<input type="text" name="captcha"\n  class="form-control captcha-control"\n  placeholder="'+message+'" />'},recaptcha_v2:function(){return '<div class="recaptcha" ></div><input type="hidden" name="captcha" />'},recaptcha_enterprise:function(){return '<div class="recaptcha" ></div><input type="hidden" name="captcha" />'},error:function(){return '<div class="error" style="color: red;">Error getting the bot detection challenge. Please contact the system administrator.</div>'}}};function globalForRecaptchaProvider(provider){switch(provider){case"recaptcha_v2":return window.grecaptcha;case"recaptcha_enterprise":return window.grecaptcha.enterprise;default:throw new Error("Unknown captcha provider")}}function injectRecaptchaScript(element,opts,callback){var callbackName="recaptchaCallback_"+Math.floor(1000001*Math.random());window[callbackName]=function(){delete window[callbackName],callback();};var script=window.document.createElement("script");script.src=function(provider,lang,callback){switch(provider){case"recaptcha_v2":return "https://www.recaptcha.net/recaptcha/api.js?hl="+lang+"&onload="+callback;case"recaptcha_enterprise":return "https://www.recaptcha.net/recaptcha/enterprise.js?render=explicit&hl="+lang+"&onload="+callback;default:throw new Error("Unknown captcha provider")}}(opts.provider,opts.lang,callbackName),script.async=!0,window.document.body.appendChild(script);}var captcha={render:function(auth0Client,element,options,callback){function load(done){done=done||noop,auth0Client.getChallenge((function(err,challenge){return err?(element.innerHTML=options.templates.error(err),done(err)):challenge.required?(element.style.display="","auth0"===challenge.provider?function(element,options,challenge,load){element.innerHTML=options.templates[challenge.provider](challenge),element.querySelector(".captcha-reload").addEventListener("click",(function(e){e.preventDefault(),load();}));}(element,options,challenge,load):"recaptcha_v2"!==challenge.provider&&"recaptcha_enterprise"!==challenge.provider||function(element,options,challenge){var widgetId=element.hasAttribute("data-wid")&&element.getAttribute("data-wid");function setValue(value){element.querySelector('input[name="captcha"]').value=value||"";}if(widgetId)return setValue(),void globalForRecaptchaProvider(challenge.provider).reset(widgetId);element.innerHTML=options.templates[challenge.provider](challenge);var recaptchaDiv=element.querySelector(".recaptcha");injectRecaptchaScript(0,{lang:options.lang,provider:challenge.provider},(function(){var global=globalForRecaptchaProvider(challenge.provider);widgetId=global.render(recaptchaDiv,{callback:setValue,"expired-callback":function(){setValue();},"error-callback":function(){setValue();},sitekey:challenge.siteKey}),element.setAttribute("data-wid",widgetId);}));}(element,options,challenge),void done()):(element.style.display="none",void(element.innerHTML=""))}));}return options=objectHelper.merge(defaults$2).with(options||{}),load(callback),{reload:load,getValue:function(){var captchaInput=element.querySelector('input[name="captcha"]');if(captchaInput)return captchaInput.value}}}};function defaultClock(){return new Date}function WebAuth(options){assert.check(options,{type:"object",message:"options parameter is not valid"},{domain:{type:"string",message:"domain option is required"},clientID:{type:"string",message:"clientID option is required"},responseType:{optional:!0,type:"string",message:"responseType is not valid"},responseMode:{optional:!0,type:"string",message:"responseMode is not valid"},redirectUri:{optional:!0,type:"string",message:"redirectUri is not valid"},scope:{optional:!0,type:"string",message:"scope is not valid"},audience:{optional:!0,type:"string",message:"audience is not valid"},popupOrigin:{optional:!0,type:"string",message:"popupOrigin is not valid"},leeway:{optional:!0,type:"number",message:"leeway is not valid"},plugins:{optional:!0,type:"array",message:"plugins is not valid"},maxAge:{optional:!0,type:"number",message:"maxAge is not valid"},stateExpiration:{optional:!0,type:"number",message:"stateExpiration is not valid"},legacySameSiteCookie:{optional:!0,type:"boolean",message:"legacySameSiteCookie option is not valid"},_disableDeprecationWarnings:{optional:!0,type:"boolean",message:"_disableDeprecationWarnings option is not valid"},_sendTelemetry:{optional:!0,type:"boolean",message:"_sendTelemetry option is not valid"},_telemetryInfo:{optional:!0,type:"object",message:"_telemetryInfo option is not valid"},_timesToRetryFailedRequests:{optional:!0,type:"number",message:"_timesToRetryFailedRequests option is not valid"}}),options.overrides&&assert.check(options.overrides,{type:"object",message:"overrides option is not valid"},{__tenant:{optional:!0,type:"string",message:"__tenant option is required"},__token_issuer:{optional:!0,type:"string",message:"__token_issuer option is required"},__jwks_uri:{optional:!0,type:"string",message:"__jwks_uri is required"}}),this.baseOptions=options,this.baseOptions.plugins=new PluginHandler(this,this.baseOptions.plugins||[]),this.baseOptions._sendTelemetry=!1!==this.baseOptions._sendTelemetry||this.baseOptions._sendTelemetry,this.baseOptions._timesToRetryFailedRequests=options._timesToRetryFailedRequests?parseInt(options._timesToRetryFailedRequests):0,this.baseOptions.tenant=this.baseOptions.overrides&&this.baseOptions.overrides.__tenant||this.baseOptions.domain.split(".")[0],this.baseOptions.token_issuer=this.baseOptions.overrides&&this.baseOptions.overrides.__token_issuer||"https://"+this.baseOptions.domain+"/",this.baseOptions.jwksURI=this.baseOptions.overrides&&this.baseOptions.overrides.__jwks_uri,!1!==options.legacySameSiteCookie&&(this.baseOptions.legacySameSiteCookie=!0),this.transactionManager=new TransactionManager(this.baseOptions),this.client=new Authentication(this.baseOptions),this.redirect=new Redirect(this,this.baseOptions),this.popup=new Popup(this,this.baseOptions),this.crossOriginAuthentication=new CrossOriginAuthentication(this,this.baseOptions),this.webMessageHandler=new WebMessageHandler(this),this._universalLogin=new HostedPages(this,this.baseOptions),this.ssodataStorage=new SSODataStorage(this.baseOptions);}function PasswordlessAuthentication(request,options){this.baseOptions=options,this.request=request;}function DBConnection(request,options){this.baseOptions=options,this.request=request;}function Authentication(auth0,options){2===arguments.length?this.auth0=auth0:options=auth0,assert.check(options,{type:"object",message:"options parameter is not valid"},{domain:{type:"string",message:"domain option is required"},clientID:{type:"string",message:"clientID option is required"},responseType:{optional:!0,type:"string",message:"responseType is not valid"},responseMode:{optional:!0,type:"string",message:"responseMode is not valid"},redirectUri:{optional:!0,type:"string",message:"redirectUri is not valid"},scope:{optional:!0,type:"string",message:"scope is not valid"},audience:{optional:!0,type:"string",message:"audience is not valid"},_disableDeprecationWarnings:{optional:!0,type:"boolean",message:"_disableDeprecationWarnings option is not valid"},_sendTelemetry:{optional:!0,type:"boolean",message:"_sendTelemetry option is not valid"},_telemetryInfo:{optional:!0,type:"object",message:"_telemetryInfo option is not valid"}}),this.baseOptions=options,this.baseOptions._sendTelemetry=!1!==this.baseOptions._sendTelemetry||this.baseOptions._sendTelemetry,this.baseOptions.rootUrl=this.baseOptions.domain&&0===this.baseOptions.domain.toLowerCase().indexOf("http")?this.baseOptions.domain:"https://"+this.baseOptions.domain,this.request=new RequestBuilder(this.baseOptions),this.passwordless=new PasswordlessAuthentication(this.request,this.baseOptions),this.dbConnection=new DBConnection(this.request,this.baseOptions),this.warn=new Warn({disableWarnings:!!options._disableDeprecationWarnings}),this.ssodataStorage=new SSODataStorage(this.baseOptions);}function Management(options){assert.check(options,{type:"object",message:"options parameter is not valid"},{domain:{type:"string",message:"domain option is required"},token:{type:"string",message:"token option is required"},_sendTelemetry:{optional:!0,type:"boolean",message:"_sendTelemetry option is not valid"},_telemetryInfo:{optional:!0,type:"object",message:"_telemetryInfo option is not valid"}}),this.baseOptions=options,this.baseOptions.headers={Authorization:"Bearer "+this.baseOptions.token},this.request=new RequestBuilder(this.baseOptions),this.baseOptions.rootUrl=urlJoin("https://"+this.baseOptions.domain,"api","v2");}WebAuth.prototype.parseHash=function(options,cb){var parsedQs,err;cb||"function"!=typeof options?options=options||{}:(cb=options,options={});var hashStr=void 0===options.hash?windowHelper.getWindow().location.hash:options.hash;if(hashStr=hashStr.replace(/^#?\/?/,""),(parsedQs=lib_parse(hashStr)).hasOwnProperty("error"))return err=error.buildResponse(parsedQs.error,parsedQs.error_description),parsedQs.state&&(err.state=parsedQs.state),cb(err);if(!parsedQs.hasOwnProperty("access_token")&&!parsedQs.hasOwnProperty("id_token")&&!parsedQs.hasOwnProperty("refresh_token"))return cb(null,null);var responseTypes=(this.baseOptions.responseType||options.responseType||"").split(" ");return responseTypes.length>0&&-1!==responseTypes.indexOf("token")&&!parsedQs.hasOwnProperty("access_token")?cb(error.buildResponse("invalid_hash","response_type contains `token`, but the parsed hash does not contain an `access_token` property")):responseTypes.length>0&&-1!==responseTypes.indexOf("id_token")&&!parsedQs.hasOwnProperty("id_token")?cb(error.buildResponse("invalid_hash","response_type contains `id_token`, but the parsed hash does not contain an `id_token` property")):this.validateAuthenticationResponse(options,parsedQs,cb)},WebAuth.prototype.validateAuthenticationResponse=function(options,parsedHash,cb){var _this=this;options.__enableIdPInitiatedLogin=options.__enableIdPInitiatedLogin||options.__enableImpersonation;var state=parsedHash.state,transaction=this.transactionManager.getStoredTransaction(state),transactionState=options.state||transaction&&transaction.state||null,transactionStateMatchesState=transactionState===state;if(!(!state&&!transactionState&&options.__enableIdPInitiatedLogin)&&!transactionStateMatchesState)return cb({error:"invalid_token",errorDescription:"`state` does not match."});var transactionNonce=options.nonce||transaction&&transaction.nonce||null,transactionOrganization=transaction&&transaction.organization,appState=options.state||transaction&&transaction.appState||null,callback=function(err,payload){if(err)return cb(err);var sub;transaction&&transaction.lastUsedConnection&&(payload&&(sub=payload.sub),_this.ssodataStorage.set(transaction.lastUsedConnection,sub));return cb(null,function(qsParams,appState,token){return {accessToken:qsParams.access_token||null,idToken:qsParams.id_token||null,idTokenPayload:token||null,appState:appState||null,refreshToken:qsParams.refresh_token||null,state:qsParams.state||null,expiresIn:qsParams.expires_in?parseInt(qsParams.expires_in,10):null,tokenType:qsParams.token_type||null,scope:qsParams.scope||null}}(parsedHash,appState,payload))};return parsedHash.id_token?this.validateToken(parsedHash.id_token,transactionNonce,(function(validationError,payload){if(!validationError){if(transactionOrganization){if(!payload.org_id)return callback(error.invalidToken("Organization Id (org_id) claim must be a string present in the ID token"));if(payload.org_id!==transactionOrganization)return callback(error.invalidToken('Organization Id (org_id) claim value mismatch in the ID token; expected "'+transactionOrganization+'", found "'+payload.org_id+'"'))}return parsedHash.access_token&&payload.at_hash?(new I).validateAccessToken(parsedHash.access_token,"RS256",payload.at_hash,(function(err){return err?callback(error.invalidToken(err.message)):callback(null,payload)})):callback(null,payload)}if("invalid_token"!==validationError.error||validationError.errorDescription&&validationError.errorDescription.indexOf("Nonce (nonce) claim value mismatch in the ID token")>-1)return callback(validationError);var decodedToken=(new I).decode(parsedHash.id_token);if("HS256"!==decodedToken.header.alg)return callback(validationError);if((decodedToken.payload.nonce||null)!==transactionNonce)return callback({error:"invalid_token",errorDescription:'Nonce (nonce) claim value mismatch in the ID token; expected "'+transactionNonce+'", found "'+decodedToken.payload.nonce+'"'});if(!parsedHash.access_token){return callback({error:"invalid_token",description:"The id_token cannot be validated because it was signed with the HS256 algorithm and public clients (like a browser) can’t store secrets. Please read the associated doc for possible ways to fix this. Read more: https://auth0.com/docs/errors/libraries/auth0-js/invalid-token#parsing-an-hs256-signed-id-token-without-an-access-token"})}return _this.client.userInfo(parsedHash.access_token,(function(errUserInfo,profile){return errUserInfo?callback(errUserInfo):callback(null,profile)}))})):callback(null,null)},WebAuth.prototype.validateToken=function(token,nonce,cb){new I({issuer:this.baseOptions.token_issuer,jwksURI:this.baseOptions.jwksURI,audience:this.baseOptions.clientID,leeway:this.baseOptions.leeway||60,maxAge:this.baseOptions.maxAge,__clock:this.baseOptions.__clock||defaultClock}).verify(token,nonce,(function(err,payload){if(err)return cb(error.invalidToken(err.message));cb(null,payload);}));},WebAuth.prototype.renewAuth=function(options,cb){var usePostMessage=!!options.usePostMessage,postMessageDataType=options.postMessageDataType||!1,postMessageOrigin=options.postMessageOrigin||windowHelper.getWindow().origin,timeout=options.timeout,_this=this,params=objectHelper.merge(this.baseOptions,["clientID","redirectUri","responseType","scope","audience","_csrf","state","_intstate","nonce"]).with(options);params.responseType=params.responseType||"token",params.responseMode=params.responseMode||"fragment",params=this.transactionManager.process(params),assert.check(params,{type:"object",message:"options parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),params.prompt="none",params=objectHelper.blacklist(params,["usePostMessage","tenant","postMessageDataType","postMessageOrigin"]),SilentAuthenticationHandler.create({authenticationUrl:this.client.buildAuthorizeUrl(params),postMessageDataType:postMessageDataType,postMessageOrigin:postMessageOrigin,timeout:timeout}).login(usePostMessage,(function(err,hash){if("object"==typeof hash)return cb(err,hash);_this.parseHash({hash:hash},cb);}));},WebAuth.prototype.checkSession=function(options,cb){var params=objectHelper.merge(this.baseOptions,["clientID","responseType","redirectUri","scope","audience","_csrf","state","_intstate","nonce"]).with(options);return "code"===params.responseType?cb({error:"error",error_description:"responseType can't be `code`"}):(options.nonce||(params=this.transactionManager.process(params)),params.redirectUri?(assert.check(params,{type:"object",message:"options parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),params=objectHelper.blacklist(params,["usePostMessage","tenant","postMessageDataType"]),void this.webMessageHandler.run(params,wrapCallback(cb,{forceLegacyError:!0,ignoreCasing:!0}))):cb({error:"error",error_description:"redirectUri can't be empty"}))},WebAuth.prototype.changePassword=function(options,cb){return this.client.dbConnection.changePassword(options,cb)},WebAuth.prototype.passwordlessStart=function(options,cb){var authParams=objectHelper.merge(this.baseOptions,["responseType","responseMode","redirectUri","scope","audience","_csrf","state","_intstate","nonce"]).with(options.authParams);return options.authParams=this.transactionManager.process(authParams),this.client.passwordless.start(options,cb)},WebAuth.prototype.signup=function(options,cb){return this.client.dbConnection.signup(options,cb)},WebAuth.prototype.authorize=function(options){var params=objectHelper.merge(this.baseOptions,["clientID","responseType","responseMode","redirectUri","scope","audience","_csrf","state","_intstate","nonce","organization","invitation"]).with(options);assert.check(params,{type:"object",message:"options parameter is not valid"},{responseType:{type:"string",message:"responseType option is required"}}),(params=this.transactionManager.process(params)).scope=params.scope||"openid profile email",windowHelper.redirect(this.client.buildAuthorizeUrl(params));},WebAuth.prototype.signupAndAuthorize=function(options,cb){var _this=this;return this.client.dbConnection.signup(objectHelper.blacklist(options,["popupHandler"]),(function(err){if(err)return cb(err);options.realm=options.connection,options.username||(options.username=options.email),_this.client.login(options,cb);}))},WebAuth.prototype.login=function(options,cb){var params=objectHelper.merge(this.baseOptions,["clientID","responseType","redirectUri","scope","audience","_csrf","state","_intstate","nonce","onRedirecting","organization","invitation"]).with(options);params=this.transactionManager.process(params),windowHelper.getWindow().location.host===this.baseOptions.domain?(params.connection=params.realm,delete params.realm,this._universalLogin.login(params,cb)):this.crossOriginAuthentication.login(params,cb);},WebAuth.prototype.passwordlessLogin=function(options,cb){var params=objectHelper.merge(this.baseOptions,["clientID","responseType","redirectUri","scope","audience","_csrf","state","_intstate","nonce","onRedirecting"]).with(options);if(params=this.transactionManager.process(params),windowHelper.getWindow().location.host===this.baseOptions.domain)this.passwordlessVerify(params,cb);else {var crossOriginOptions=objectHelper.extend({credentialType:"http://auth0.com/oauth/grant-type/passwordless/otp",realm:params.connection,username:params.email||params.phoneNumber,otp:params.verificationCode},objectHelper.blacklist(params,["connection","email","phoneNumber","verificationCode"]));this.crossOriginAuthentication.login(crossOriginOptions,cb);}},WebAuth.prototype.crossOriginAuthenticationCallback=function(){this.crossOriginVerification();},WebAuth.prototype.crossOriginVerification=function(){this.crossOriginAuthentication.callback();},WebAuth.prototype.logout=function(options){windowHelper.redirect(this.client.buildLogoutUrl(options));},WebAuth.prototype.passwordlessVerify=function(options,cb){var _this=this,params=objectHelper.merge(this.baseOptions,["clientID","responseType","responseMode","redirectUri","scope","audience","_csrf","state","_intstate","nonce","onRedirecting"]).with(options);return assert.check(params,{type:"object",message:"options parameter is not valid"},{responseType:{type:"string",message:"responseType option is required"}}),params=this.transactionManager.process(params),this.client.passwordless.verify(params,(function(err){if(err)return cb(err);function doAuth(){windowHelper.redirect(_this.client.passwordless.buildVerifyUrl(params));}if("function"==typeof options.onRedirecting)return options.onRedirecting((function(){doAuth();}));doAuth();}))},WebAuth.prototype.renderCaptcha=function(element,options,callback){return captcha.render(this.client,element,options,callback)},PasswordlessAuthentication.prototype.buildVerifyUrl=function(options){var params,qString;return assert.check(options,{type:"object",message:"options parameter is not valid"},{connection:{type:"string",message:"connection option is required"},verificationCode:{type:"string",message:"verificationCode option is required"},phoneNumber:{optional:!1,type:"string",message:"phoneNumber option is required",condition:function(o){return !o.email}},email:{optional:!1,type:"string",message:"email option is required",condition:function(o){return !o.phoneNumber}}}),params=objectHelper.merge(this.baseOptions,["clientID","responseType","responseMode","redirectUri","scope","audience","_csrf","state","_intstate","protocol","nonce"]).with(options),this.baseOptions._sendTelemetry&&(params.auth0Client=this.request.getTelemetryData()),params=objectHelper.toSnakeCase(params,["auth0Client"]),qString=lib_stringify(params),urlJoin(this.baseOptions.rootUrl,"passwordless","verify_redirect","?"+qString)},PasswordlessAuthentication.prototype.start=function(options,cb){var url,body;assert.check(options,{type:"object",message:"options parameter is not valid"},{connection:{type:"string",message:"connection option is required"},send:{type:"string",message:"send option is required",values:["link","code"],value_message:"send is not valid ([link, code])"},phoneNumber:{optional:!0,type:"string",message:"phoneNumber option is required",condition:function(o){return "code"===o.send||!o.email}},email:{optional:!0,type:"string",message:"email option is required",condition:function(o){return "link"===o.send||!o.phoneNumber}},authParams:{optional:!0,type:"object",message:"authParams option is required"}}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"passwordless","start");var xRequestLanguage=options.xRequestLanguage;delete options.xRequestLanguage,(body=objectHelper.merge(this.baseOptions,["clientID","responseType","redirectUri","scope"]).with(options)).scope&&(body.authParams=body.authParams||{},body.authParams.scope=body.authParams.scope||body.scope),body.redirectUri&&(body.authParams=body.authParams||{},body.authParams.redirect_uri=body.authParams.redirectUri||body.redirectUri),body.responseType&&(body.authParams=body.authParams||{},body.authParams.response_type=body.authParams.responseType||body.responseType),delete body.redirectUri,delete body.responseType,delete body.scope,body=objectHelper.toSnakeCase(body,["auth0Client","authParams"]);var postOptions=xRequestLanguage?{xRequestLanguage:xRequestLanguage}:void 0;return this.request.post(url,postOptions).send(body).end(wrapCallback(cb))},PasswordlessAuthentication.prototype.verify=function(options,cb){var url,cleanOption;return assert.check(options,{type:"object",message:"options parameter is not valid"},{connection:{type:"string",message:"connection option is required"},verificationCode:{type:"string",message:"verificationCode option is required"},phoneNumber:{optional:!1,type:"string",message:"phoneNumber option is required",condition:function(o){return !o.email}},email:{optional:!1,type:"string",message:"email option is required",condition:function(o){return !o.phoneNumber}}}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),cleanOption=objectHelper.pick(options,["connection","verificationCode","phoneNumber","email","auth0Client","clientID"]),cleanOption=objectHelper.toSnakeCase(cleanOption,["auth0Client"]),url=urlJoin(this.baseOptions.rootUrl,"passwordless","verify"),this.request.post(url).send(cleanOption).end(wrapCallback(cb))},DBConnection.prototype.signup=function(options,cb){var url,body,metadata;return assert.check(options,{type:"object",message:"options parameter is not valid"},{connection:{type:"string",message:"connection option is required"},email:{type:"string",message:"email option is required"},password:{type:"string",message:"password option is required"}}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"dbconnections","signup"),metadata=(body=objectHelper.merge(this.baseOptions,["clientID","state"]).with(options)).user_metadata||body.userMetadata,body=objectHelper.blacklist(body,["scope","userMetadata","user_metadata"]),body=objectHelper.toSnakeCase(body,["auth0Client"]),metadata&&(body.user_metadata=metadata),this.request.post(url).send(body).end(wrapCallback(cb))},DBConnection.prototype.changePassword=function(options,cb){var url,body;return assert.check(options,{type:"object",message:"options parameter is not valid"},{connection:{type:"string",message:"connection option is required"},email:{type:"string",message:"email option is required"}}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"dbconnections","change_password"),body=objectHelper.merge(this.baseOptions,["clientID"]).with(options,["email","connection"]),body=objectHelper.toSnakeCase(body,["auth0Client"]),this.request.post(url).send(body).end(wrapCallback(cb))},Authentication.prototype.buildAuthorizeUrl=function(options){var params,qString;return assert.check(options,{type:"object",message:"options parameter is not valid"}),params=objectHelper.merge(this.baseOptions,["clientID","responseType","responseMode","redirectUri","scope","audience"]).with(options),assert.check(params,{type:"object",message:"options parameter is not valid"},{clientID:{type:"string",message:"clientID option is required"},redirectUri:{optional:!0,type:"string",message:"redirectUri option is required"},responseType:{type:"string",message:"responseType option is required"},nonce:{type:"string",message:"nonce option is required",condition:function(o){return -1===o.responseType.indexOf("code")&&-1!==o.responseType.indexOf("id_token")}},scope:{optional:!0,type:"string",message:"scope option is required"},audience:{optional:!0,type:"string",message:"audience option is required"}}),this.baseOptions._sendTelemetry&&(params.auth0Client=this.request.getTelemetryData()),params.connection_scope&&assert.isArray(params.connection_scope)&&(params.connection_scope=params.connection_scope.join(",")),params=objectHelper.blacklist(params,["username","popupOptions","domain","tenant","timeout","appState"]),params=objectHelper.toSnakeCase(params,["auth0Client"]),params=parametersWhitelist.oauthAuthorizeParams(this.warn,params),qString=lib_stringify(params),urlJoin(this.baseOptions.rootUrl,"authorize","?"+qString)},Authentication.prototype.buildLogoutUrl=function(options){var params,qString;return assert.check(options,{optional:!0,type:"object",message:"options parameter is not valid"}),params=objectHelper.merge(this.baseOptions,["clientID"]).with(options||{}),this.baseOptions._sendTelemetry&&(params.auth0Client=this.request.getTelemetryData()),params=objectHelper.toSnakeCase(params,["auth0Client","returnTo"]),qString=lib_stringify(objectHelper.blacklist(params,["federated"])),options&&void 0!==options.federated&&!1!==options.federated&&"false"!==options.federated&&(qString+="&federated"),urlJoin(this.baseOptions.rootUrl,"v2","logout","?"+qString)},Authentication.prototype.loginWithDefaultDirectory=function(options,cb){return assert.check(options,{type:"object",message:"options parameter is not valid"},{username:{type:"string",message:"username option is required"},password:{type:"string",message:"password option is required"},scope:{optional:!0,type:"string",message:"scope option is required"},audience:{optional:!0,type:"string",message:"audience option is required"}}),options.grantType="password",this.oauthToken(options,cb)},Authentication.prototype.login=function(options,cb){return assert.check(options,{type:"object",message:"options parameter is not valid"},{username:{type:"string",message:"username option is required"},password:{type:"string",message:"password option is required"},realm:{type:"string",message:"realm option is required"},scope:{optional:!0,type:"string",message:"scope option is required"},audience:{optional:!0,type:"string",message:"audience option is required"}}),options.grantType="http://auth0.com/oauth/grant-type/password-realm",this.oauthToken(options,cb)},Authentication.prototype.oauthToken=function(options,cb){var url,body;return assert.check(options,{type:"object",message:"options parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"oauth","token"),body=objectHelper.merge(this.baseOptions,["clientID","scope","audience"]).with(options),assert.check(body,{type:"object",message:"options parameter is not valid"},{clientID:{type:"string",message:"clientID option is required"},grantType:{type:"string",message:"grantType option is required"},scope:{optional:!0,type:"string",message:"scope option is required"},audience:{optional:!0,type:"string",message:"audience option is required"}}),body=objectHelper.toSnakeCase(body,["auth0Client"]),body=parametersWhitelist.oauthTokenParams(this.warn,body),this.request.post(url).send(body).end(wrapCallback(cb))},Authentication.prototype.loginWithResourceOwner=function(options,cb){var url,body;return assert.check(options,{type:"object",message:"options parameter is not valid"},{username:{type:"string",message:"username option is required"},password:{type:"string",message:"password option is required"},connection:{type:"string",message:"connection option is required"},scope:{optional:!0,type:"string",message:"scope option is required"}}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"oauth","ro"),body=objectHelper.merge(this.baseOptions,["clientID","scope"]).with(options,["username","password","scope","connection","device"]),(body=objectHelper.toSnakeCase(body,["auth0Client"])).grant_type=body.grant_type||"password",this.request.post(url).send(body).end(wrapCallback(cb))},Authentication.prototype.getSSOData=function(withActiveDirectories,cb){if(this.auth0||(this.auth0=new WebAuth(this.baseOptions)),windowHelper.getWindow().location.host===this.baseOptions.domain)return this.auth0._universalLogin.getSSOData(withActiveDirectories,cb);"function"==typeof withActiveDirectories&&(cb=withActiveDirectories),assert.check(cb,{type:"function",message:"cb parameter is not valid"});var clientId=this.baseOptions.clientID,ssodataInformation=this.ssodataStorage.get()||{};this.auth0.checkSession({responseType:"token id_token",scope:"openid profile email",connection:ssodataInformation.lastUsedConnection,timeout:5e3},(function(err,result){return err?"login_required"===err.error?cb(null,{sso:!1}):("consent_required"===err.error&&(err.error_description="Consent required. When using `getSSOData`, the user has to be authenticated with the following scope: `openid profile email`."),cb(err,{sso:!1})):ssodataInformation.lastUsedSub&&ssodataInformation.lastUsedSub!==result.idTokenPayload.sub?cb(err,{sso:!1}):cb(null,{lastUsedConnection:{name:ssodataInformation.lastUsedConnection},lastUsedUserID:result.idTokenPayload.sub,lastUsedUsername:result.idTokenPayload.email||result.idTokenPayload.name,lastUsedClientID:clientId,sessionClients:[clientId],sso:!0})}));},Authentication.prototype.userInfo=function(accessToken,cb){var url;return assert.check(accessToken,{type:"string",message:"accessToken parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"userinfo"),this.request.get(url).set("Authorization","Bearer "+accessToken).end(wrapCallback(cb,{ignoreCasing:!0}))},Authentication.prototype.getChallenge=function(cb){if(assert.check(cb,{type:"function",message:"cb parameter is not valid"}),!this.baseOptions.state)return cb();var url=urlJoin(this.baseOptions.rootUrl,"usernamepassword","challenge");return this.request.post(url).send({state:this.baseOptions.state}).end(wrapCallback(cb,{ignoreCasing:!0}))},Authentication.prototype.delegation=function(options,cb){var url,body;return assert.check(options,{type:"object",message:"options parameter is not valid"},{grant_type:{type:"string",message:"grant_type option is required"}}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"delegation"),body=objectHelper.merge(this.baseOptions,["clientID"]).with(options),body=objectHelper.toSnakeCase(body,["auth0Client"]),this.request.post(url).send(body).end(wrapCallback(cb))},Authentication.prototype.getUserCountry=function(cb){var url;return assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"user","geoloc","country"),this.request.get(url).end(wrapCallback(cb))},Management.prototype.getUser=function(userId,cb){var url;return assert.check(userId,{type:"string",message:"userId parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"users",userId),this.request.get(url).end(wrapCallback(cb,{ignoreCasing:!0}))},Management.prototype.patchUserMetadata=function(userId,userMetadata,cb){var url;return assert.check(userId,{type:"string",message:"userId parameter is not valid"}),assert.check(userMetadata,{type:"object",message:"userMetadata parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"users",userId),this.request.patch(url).send({user_metadata:userMetadata}).end(wrapCallback(cb,{ignoreCasing:!0}))},Management.prototype.patchUserAttributes=function(userId,user,cb){var url;return assert.check(userId,{type:"string",message:"userId parameter is not valid"}),assert.check(user,{type:"object",message:"user parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"users",userId),this.request.patch(url).send(user).end(wrapCallback(cb,{ignoreCasing:!0}))},Management.prototype.linkUser=function(userId,secondaryUserToken,cb){var url;return assert.check(userId,{type:"string",message:"userId parameter is not valid"}),assert.check(secondaryUserToken,{type:"string",message:"secondaryUserToken parameter is not valid"}),assert.check(cb,{type:"function",message:"cb parameter is not valid"}),url=urlJoin(this.baseOptions.rootUrl,"users",userId,"identities"),this.request.post(url).send({link_with:secondaryUserToken}).end(wrapCallback(cb,{ignoreCasing:!0}))};var index={Authentication:Authentication,Management:Management,WebAuth:WebAuth,version:version};

    const conf = {
        AUTH0: {
            domain: {"env":{"isProd":false,"BASE_BACKEND_URL":"https://backend-stage.attestation.id","VALIDITY":"6000","ATTESTOR":"AlphaWallet"}}.env.AUTH0_DOMAIN,
            clientID: {"env":{"isProd":false,"BASE_BACKEND_URL":"https://backend-stage.attestation.id","VALIDITY":"6000","ATTESTOR":"AlphaWallet"}}.env.AUTH0_CLIENTID,
            redirectUri: window.location.origin,
            responseType: "token id_token",
        },
    };

    const authHandler = writable(null);
    //export const email = writable<any>(null);
    async function initAuth() {
        const auth0Js = new index.WebAuth(conf.AUTH0);
        authHandler.set({
            sendemail: async (email, sendHandler) => {
                auth0Js.passwordlessStart({
                    connection: "email",
                    send: "code",
                    email: email,
                }, function (err, res) {
                    sendHandler(err, res);
                });
            },
            login: async (email, otp, loginHandler) => {
                console.log("passwordlessLogin", email, otp);
                auth0Js.passwordlessLogin({
                    connection: "email",
                    email: email,
                    verificationCode: otp,
                }, function (err, res) {
                    loginHandler(err, res);
                });
            },
            parseUrl: (href, parseHandler) => {
                const access_token = href.match(/\#(?:access_token)\=([\S\s]*?)\&/)[1];
                parseHandler(null, { accessToken: access_token });
            },
        });
    }

    /* src\component\ConnectWallet.svelte generated by Svelte v3.38.2 */

    const { console: console_1$3 } = globals;
    const file$6 = "src\\component\\ConnectWallet.svelte";

    // (100:17) 
    function create_if_block_1$3(ctx) {
    	let div;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Something wrong, please try again.";
    			t1 = space();
    			button = element("button");
    			button.textContent = "Try again";
    			attr_dev(div, "class", "retry-desc svelte-am4dah");
    			add_location(div, file$6, 100, 2, 3196);
    			attr_dev(button, "class", "retry svelte-am4dah");
    			add_location(button, file$6, 101, 2, 3264);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*gotoSign*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(100:17) ",
    		ctx
    	});

    	return block;
    }

    // (95:0) {#if isLoading}
    function create_if_block$5(ctx) {
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "Please confirm the message in your 'wallet' to complete verification.";
    			attr_dev(div0, "class", "verifiedLoading svelte-am4dah");
    			add_location(div0, file$6, 95, 2, 3032);
    			attr_dev(div1, "class", "content");
    			add_location(div1, file$6, 96, 2, 3067);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(95:0) {#if isLoading}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*isLoading*/ ctx[0]) return create_if_block$5;
    		if (/*canTry*/ ctx[1]) return create_if_block_1$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $auth0AccessToken;
    	let $currentWallet;
    	let $providerName;
    	let $current;
    	validate_store(auth0AccessToken, "auth0AccessToken");
    	component_subscribe($$self, auth0AccessToken, $$value => $$invalidate(3, $auth0AccessToken = $$value));
    	validate_store(currentWallet, "currentWallet");
    	component_subscribe($$self, currentWallet, $$value => $$invalidate(4, $currentWallet = $$value));
    	validate_store(providerName, "providerName");
    	component_subscribe($$self, providerName, $$value => $$invalidate(5, $providerName = $$value));
    	validate_store(current, "current");
    	component_subscribe($$self, current, $$value => $$invalidate(6, $current = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ConnectWallet", slots, []);

    	const BASE_BACKEND_URL = ({
    		"env": {
    			"isProd": false,
    			"BASE_BACKEND_URL": "https://backend-stage.attestation.id",
    			"VALIDITY": "6000",
    			"ATTESTOR": "AlphaWallet"
    		}
    	}).env.BASE_BACKEND_URL;

    	const VALIDITY = ({
    		"env": {
    			"isProd": false,
    			"BASE_BACKEND_URL": "https://backend-stage.attestation.id",
    			"VALIDITY": "6000",
    			"ATTESTOR": "AlphaWallet"
    		}
    	}).env.VALIDITY;

    	const ATTESTOR = ({
    		"env": {
    			"isProd": false,
    			"BASE_BACKEND_URL": "https://backend-stage.attestation.id",
    			"VALIDITY": "6000",
    			"ATTESTOR": "AlphaWallet"
    		}
    	}).env.ATTESTOR;

    	let isLoading = false;
    	let canTry = false;

    	const gotoSign = async () => {
    		try {
    			if (!getRawPair()) {
    				return;
    			}

    			const email = await decrypt(getRawPair().privateKey, getRawEmail());
    			$$invalidate(0, isLoading = true);
    			const requestAndSecret = await createAttestationRequestAndSecret("mail", email, $currentWallet, $providerName);

    			if (requestAndSecret.result.request) {
    				try {
    					fetch(BASE_BACKEND_URL + "/api/attestation", {
    						method: "POST",
    						headers: {
    							Accept: "application/json",
    							"Content-Type": "application/json",
    							"x-pap-ac": $auth0AccessToken,
    							"x-pap-id-provider": "auth0"
    						},
    						body: JSON.stringify({
    							validity: VALIDITY,
    							attestor: ATTESTOR,
    							publicRequest: requestAndSecret.result.request
    						})
    					}).then(async response => {
    						if (response.status === 201) {
    							let result = await response.json();

    							saveAttestation({
    								attestation: result.attestation,
    								requestSecret: bigintToHex(requestAndSecret.secret)
    							});

    							saveCurrentStep(transition[$current].nextStep);
    						}
    					}).catch(error => {
    						$$invalidate(0, isLoading = false);
    						console.error(error);
    					});
    				} catch(error) {
    					$$invalidate(0, isLoading = false);
    					$$invalidate(1, canTry = true);
    					console.error(error);
    				}
    			}
    		} catch(error) {
    			console.error(error);
    			$$invalidate(1, canTry = true);
    			$$invalidate(0, isLoading = false);
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<ConnectWallet> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		walletService,
    		flow,
    		current,
    		auth0AccessToken,
    		currentWallet,
    		getRawEmail,
    		getRawPair,
    		saveAttestation,
    		providerName,
    		createAttestationRequestAndSecret,
    		cryptoUtils,
    		bigintToHex,
    		BASE_BACKEND_URL,
    		VALIDITY,
    		ATTESTOR,
    		isLoading,
    		canTry,
    		gotoSign,
    		$auth0AccessToken,
    		$currentWallet,
    		$providerName,
    		$current
    	});

    	$$self.$inject_state = $$props => {
    		if ("isLoading" in $$props) $$invalidate(0, isLoading = $$props.isLoading);
    		if ("canTry" in $$props) $$invalidate(1, canTry = $$props.canTry);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$auth0AccessToken, $currentWallet, $providerName*/ 56) {
    			if ($auth0AccessToken) {
    				if ($currentWallet) {
    					gotoSign();
    				} else {
    					connect($providerName);
    				}
    			}
    		}
    	};

    	return [isLoading, canTry, gotoSign, $auth0AccessToken, $currentWallet, $providerName];
    }

    class ConnectWallet extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ConnectWallet",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src\component\EnterEmail.svelte generated by Svelte v3.38.2 */

    const { console: console_1$2 } = globals;
    const file$5 = "src\\component\\EnterEmail.svelte";

    // (129:4) {:else}
    function create_else_block$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Submit");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(129:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (127:4) {#if isLoading}
    function create_if_block$4(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "loading");
    			add_location(div, file$5, 127, 6, 3308);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(127:4) {#if isLoading}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div3;
    	let div2;
    	let t5;
    	let input;
    	let t6;
    	let button;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*isLoading*/ ctx[2]) return create_if_block$4;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "Request Email Attestation";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "Enter your email address which you want to request an attestation for. You\r\n  will have to copy and paste the code that you will find in the email we will\r\n  be sending you.";
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div2.textContent = "Enter Email Address";
    			t5 = space();
    			input = element("input");
    			t6 = space();
    			button = element("button");
    			if_block.c();
    			attr_dev(div0, "class", "title");
    			add_location(div0, file$5, 106, 0, 2659);
    			attr_dev(div1, "class", "content svelte-9wq4zk");
    			add_location(div1, file$5, 107, 0, 2711);
    			attr_dev(div2, "class", "label");
    			add_location(div2, file$5, 113, 2, 2946);
    			attr_dev(input, "id", "value");
    			attr_dev(input, "name", "value");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "autocapitalize", "off");
    			attr_dev(input, "autocorrect", "off");
    			input.value = /*email*/ ctx[1];
    			input.disabled = /*inputDisabled*/ ctx[3];
    			add_location(input, file$5, 114, 2, 2994);
    			attr_dev(button, "id", "submitBtn");
    			button.disabled = /*disabled*/ ctx[0];
    			add_location(button, file$5, 125, 2, 3225);
    			attr_dev(div3, "class", "input-div");
    			add_location(div3, file$5, 112, 0, 2919);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div3, t5);
    			append_dev(div3, input);
    			append_dev(div3, t6);
    			append_dev(div3, button);
    			if_block.m(button, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[9], false, false, false),
    					listen_dev(button, "click", /*onSubmit*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*email*/ 2 && input.value !== /*email*/ ctx[1]) {
    				prop_dev(input, "value", /*email*/ ctx[1]);
    			}

    			if (dirty & /*inputDisabled*/ 8) {
    				prop_dev(input, "disabled", /*inputDisabled*/ ctx[3]);
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, null);
    				}
    			}

    			if (dirty & /*disabled*/ 1) {
    				prop_dev(button, "disabled", /*disabled*/ ctx[0]);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $authHandler;
    	let $current;
    	let $requestEmail;
    	validate_store(authHandler, "authHandler");
    	component_subscribe($$self, authHandler, $$value => $$invalidate(10, $authHandler = $$value));
    	validate_store(current, "current");
    	component_subscribe($$self, current, $$value => $$invalidate(11, $current = $$value));
    	validate_store(requestEmail, "requestEmail");
    	component_subscribe($$self, requestEmail, $$value => $$invalidate(8, $requestEmail = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("EnterEmail", slots, []);
    	let disabled;
    	let isLoading = false;
    	let email = "";
    	let inputDisabled = "";
    	let inIframe = window.location !== window.parent.location;
    	let attestationValid = false;
    	let autoSubmitFired = false;

    	async function onSubmit(token) {
    		if (email) {
    			if (token) {
    				disableSubmitBtn();
    				$$invalidate(2, isLoading = true);

    				try {
    					$authHandler.sendemail(email, async (err, res) => {
    						if (!err) {
    							generateKey().then(async result => {
    								savePair({
    									publicKey: result.publicKey,
    									privateKey: result.privateKey
    								});

    								saveEmail(await encrypt(getRawPair().publicKey, email));
    								saveCurrentStep(transition[$current].nextStep);
    							});
    						} else {
    							$$invalidate(2, isLoading = false);
    						}
    					});
    				} catch(e) {
    					console.error(e);
    					$$invalidate(2, isLoading = false);
    					disableSubmitBtn();
    				}
    			}
    		}
    	}

    	const validateEmail = value => {
    		$$invalidate(1, email = value.toLowerCase());

    		if (email && (/\S+@\S+\.\S+/).test(email)) {
    			enableSubmitBtn();
    		} else {
    			disableSubmitBtn();
    		}
    	};

    	function disableSubmitBtn() {
    		$$invalidate(0, disabled = "disabled");
    	}

    	function enableSubmitBtn() {
    		$$invalidate(0, disabled = "");
    	}

    	onMount(async () => {
    		validateEmail(email);
    		let attestation = getRawAttestation();
    		let parsedAttestation;

    		if (attestation) {
    			parsedAttestation = parseAttestation(attestation.attestation);

    			if (!expired(parsedAttestation)) {
    				$$invalidate(6, attestationValid = true);
    			}
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<EnterEmail> was created with unknown prop '${key}'`);
    	});

    	const keyup_handler = ({ target: { value } }) => validateEmail(value);

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		cryptoUtils,
    		flow,
    		current,
    		getRawPair,
    		saveEmail,
    		savePair,
    		requestEmail,
    		getRawAttestation,
    		authHandler,
    		parseAttestation,
    		expired,
    		disabled,
    		isLoading,
    		email,
    		inputDisabled,
    		inIframe,
    		attestationValid,
    		autoSubmitFired,
    		onSubmit,
    		validateEmail,
    		disableSubmitBtn,
    		enableSubmitBtn,
    		$authHandler,
    		$current,
    		$requestEmail
    	});

    	$$self.$inject_state = $$props => {
    		if ("disabled" in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ("isLoading" in $$props) $$invalidate(2, isLoading = $$props.isLoading);
    		if ("email" in $$props) $$invalidate(1, email = $$props.email);
    		if ("inputDisabled" in $$props) $$invalidate(3, inputDisabled = $$props.inputDisabled);
    		if ("inIframe" in $$props) $$invalidate(12, inIframe = $$props.inIframe);
    		if ("attestationValid" in $$props) $$invalidate(6, attestationValid = $$props.attestationValid);
    		if ("autoSubmitFired" in $$props) $$invalidate(7, autoSubmitFired = $$props.autoSubmitFired);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$requestEmail, email, attestationValid, disabled, autoSubmitFired*/ 451) {
    			if ($requestEmail && inIframe) {
    				$$invalidate(1, email = $requestEmail);
    				validateEmail(email);

    				if ($requestEmail) {
    					$$invalidate(3, inputDisabled = "disabled");
    				}

    				if (!(attestationValid && getRawAttestation())) {
    					// if input not disabled then auto-click "Submit"
    					if (!disabled && !autoSubmitFired) {
    						$$invalidate(7, autoSubmitFired = true);
    						onSubmit(1);
    					}
    				}
    			}
    		}
    	};

    	return [
    		disabled,
    		email,
    		isLoading,
    		inputDisabled,
    		onSubmit,
    		validateEmail,
    		attestationValid,
    		autoSubmitFired,
    		$requestEmail,
    		keyup_handler
    	];
    }

    class EnterEmail extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EnterEmail",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src\component\Confirmation.svelte generated by Svelte v3.38.2 */

    const { console: console_1$1 } = globals;
    const file$4 = "src\\component\\Confirmation.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[22] = list;
    	child_ctx[23] = i;
    	return child_ctx;
    }

    // (249:0) {:else}
    function create_else_block_2(ctx) {
    	let div0;
    	let t0;
    	let div1;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			div1.textContent = "Please confirm the message in your 'wallet' to complete verification.";
    			attr_dev(div0, "class", "verifiedLoading svelte-1xxcpc9");
    			add_location(div0, file$4, 249, 2, 6221);
    			attr_dev(div1, "class", "mt-8 content svelte-1xxcpc9");
    			add_location(div1, file$4, 250, 2, 6256);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(249:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (244:19) 
    function create_if_block_4(ctx) {
    	let div0;
    	let t0;
    	let t1;
    	let div1;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = text(/*errorMsg*/ ctx[4]);
    			t1 = space();
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "resend now.";
    			attr_dev(div0, "class", "error margin-top svelte-1xxcpc9");
    			add_location(div0, file$4, 244, 2, 6059);
    			attr_dev(span, "href", "");
    			attr_dev(span, "class", "resend svelte-1xxcpc9");
    			add_location(span, file$4, 246, 4, 6133);
    			attr_dev(div1, "class", "note svelte-1xxcpc9");
    			add_location(div1, file$4, 245, 2, 6109);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*resend*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorMsg*/ 16) set_data_dev(t0, /*errorMsg*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(244:19) ",
    		ctx
    	});

    	return block;
    }

    // (183:0) {#if !isVerfiied}
    function create_if_block$3(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let t3;
    	let t4;
    	let br0;
    	let t5;
    	let t6;
    	let div2;
    	let t7;
    	let button;
    	let t8;
    	let t9;
    	let div3;
    	let t10;
    	let br1;
    	let t11;
    	let span;
    	let mounted;
    	let dispose;
    	let each_value = /*codes*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	function select_block_type_2(ctx, dirty) {
    		if (/*isLoading*/ ctx[2]) return create_if_block_2$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*errorMsg*/ ctx[4] && create_if_block_1$2(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "Enter Code";
    			t1 = space();
    			div1 = element("div");
    			t2 = text("We sent you an attestation code to\r\n    ");
    			t3 = text(/*email*/ ctx[3]);
    			t4 = space();
    			br0 = element("br");
    			t5 = text("\r\n    Copy the code and paste below.");
    			t6 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			button = element("button");
    			if_block0.c();
    			t8 = space();
    			if (if_block1) if_block1.c();
    			t9 = space();
    			div3 = element("div");
    			t10 = text("Did not receive the email? Check your spam,\r\n    ");
    			br1 = element("br");
    			t11 = space();
    			span = element("span");
    			span.textContent = "or resend now.";
    			attr_dev(div0, "class", "title");
    			add_location(div0, file$4, 183, 2, 4429);
    			add_location(br0, file$4, 188, 4, 4550);
    			attr_dev(div1, "class", "content svelte-1xxcpc9");
    			add_location(div1, file$4, 185, 2, 4470);
    			button.disabled = /*disabled*/ ctx[1];
    			add_location(button, file$4, 227, 4, 5634);
    			attr_dev(div2, "class", "input-div");
    			add_location(div2, file$4, 192, 2, 4608);
    			add_location(br1, file$4, 240, 4, 5943);
    			attr_dev(span, "href", "");
    			attr_dev(span, "class", "resend svelte-1xxcpc9");
    			add_location(span, file$4, 241, 4, 5955);
    			attr_dev(div3, "class", "note svelte-1xxcpc9");
    			add_location(div3, file$4, 238, 2, 5870);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t2);
    			append_dev(div1, t3);
    			append_dev(div1, t4);
    			append_dev(div1, br0);
    			append_dev(div1, t5);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div2, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(div2, t7);
    			append_dev(div2, button);
    			if_block0.m(button, null);
    			insert_dev(target, t8, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, t10);
    			append_dev(div3, br1);
    			append_dev(div3, t11);
    			append_dev(div3, span);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*confirm*/ ctx[8], false, false, false),
    					listen_dev(span, "click", /*resend*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*email*/ 8) set_data_dev(t3, /*email*/ ctx[3]);

    			if (dirty & /*OTP_SIZE, codes, changeHandler, isMobileChrome, focusNext, focusPrevious, tryToEnableComfirmButton*/ 641) {
    				each_value = /*codes*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, t7);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(button, null);
    				}
    			}

    			if (dirty & /*disabled*/ 2) {
    				prop_dev(button, "disabled", /*disabled*/ ctx[1]);
    			}

    			if (/*errorMsg*/ ctx[4]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(t9.parentNode, t9);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    			if_block0.d();
    			if (detaching) detach_dev(t8);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(183:0) {#if !isVerfiied}",
    		ctx
    	});

    	return block;
    }

    // (206:6) {:else}
    function create_else_block_1(ctx) {
    	let input;
    	let mounted;
    	let dispose;

    	function input_input_handler_1() {
    		/*input_input_handler_1*/ ctx[12].call(input, /*each_value*/ ctx[22], /*i*/ ctx[23]);
    	}

    	function input_handler(...args) {
    		return /*input_handler*/ ctx[13](/*i*/ ctx[23], ...args);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "type", "value");
    			attr_dev(input, "autocomplete", "off");
    			attr_dev(input, "inputmode", "numeric");
    			attr_dev(input, "id", `code${/*i*/ ctx[23]}`);
    			attr_dev(input, "maxlength", "1");
    			attr_dev(input, "class", "" + (null_to_empty(/*i*/ ctx[23] + 1 === OTP_SIZE ? "no-margin" : "") + " svelte-1xxcpc9"));
    			add_location(input, file$4, 206, 8, 5025);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*code*/ ctx[21]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_input_handler_1),
    					listen_dev(input, "input", input_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*codes*/ 1) {
    				set_input_value(input, /*code*/ ctx[21]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(206:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (195:6) {#if !isMobileChrome()}
    function create_if_block_3$1(ctx) {
    	let input;
    	let mounted;
    	let dispose;

    	function input_input_handler() {
    		/*input_input_handler*/ ctx[10].call(input, /*each_value*/ ctx[22], /*i*/ ctx[23]);
    	}

    	function keyup_handler(...args) {
    		return /*keyup_handler*/ ctx[11](/*i*/ ctx[23], ...args);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			attr_dev(input, "type", "value");
    			attr_dev(input, "autocomplete", "off");
    			attr_dev(input, "inputmode", "numeric");
    			attr_dev(input, "id", `code${/*i*/ ctx[23]}`);
    			attr_dev(input, "maxlength", "1");
    			attr_dev(input, "class", "" + (null_to_empty(/*i*/ ctx[23] + 1 === OTP_SIZE ? "no-margin" : "") + " svelte-1xxcpc9"));
    			add_location(input, file$4, 195, 8, 4702);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*code*/ ctx[21]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_input_handler),
    					listen_dev(input, "keyup", keyup_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*codes*/ 1) {
    				set_input_value(input, /*code*/ ctx[21]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(195:6) {#if !isMobileChrome()}",
    		ctx
    	});

    	return block;
    }

    // (194:4) {#each codes as code, i}
    function create_each_block$1(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (!isMobileChrome()) return create_if_block_3$1;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_1();
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(194:4) {#each codes as code, i}",
    		ctx
    	});

    	return block;
    }

    // (231:6) {:else}
    function create_else_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Confirm");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(231:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (229:6) {#if isLoading}
    function create_if_block_2$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "loading");
    			add_location(div, file$4, 229, 8, 5705);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(229:6) {#if isLoading}",
    		ctx
    	});

    	return block;
    }

    // (236:2) {#if errorMsg}
    function create_if_block_1$2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*errorMsg*/ ctx[4]);
    			attr_dev(div, "class", "error svelte-1xxcpc9");
    			add_location(div, file$4, 236, 4, 5822);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorMsg*/ 16) set_data_dev(t, /*errorMsg*/ ctx[4]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(236:2) {#if errorMsg}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (!/*isVerfiied*/ ctx[5]) return create_if_block$3;
    		if (/*errorMsg*/ ctx[4]) return create_if_block_4;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const OTP_SIZE = 6;

    function digestKeyPressed(key) {
    	return (/\d/).test(key);
    }

    function clearKeyPressed(keyCode) {
    	const BACKSPACE = 8;
    	const DELETE = 46;
    	const ANDROID_BACKSPACE = 229;
    	return keyCode === BACKSPACE || keyCode === DELETE || keyCode === ANDROID_BACKSPACE;
    }

    function leftKeyPressed(keyCode) {
    	return keyCode === 37;
    }

    function rightKeyPressed(keyCode) {
    	return keyCode === 39;
    }

    function focusNext(e) {
    	const nextvPin = e.target.nextElementSibling;

    	if (nextvPin) {
    		nextvPin.focus();
    	}
    }

    function focusPrevious(e) {
    	const prevPin = e.target.previousElementSibling;

    	if (prevPin) {
    		prevPin.focus();
    	}
    }

    function isMobileChrome() {
    	const ua = navigator.userAgent;

    	if ((/Android/).test(ua)) {
    		return true;
    	}

    	return false;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $authHandler;
    	let $auth0AccessToken;
    	let $current;
    	validate_store(authHandler, "authHandler");
    	component_subscribe($$self, authHandler, $$value => $$invalidate(15, $authHandler = $$value));
    	validate_store(auth0AccessToken, "auth0AccessToken");
    	component_subscribe($$self, auth0AccessToken, $$value => $$invalidate(16, $auth0AccessToken = $$value));
    	validate_store(current, "current");
    	component_subscribe($$self, current, $$value => $$invalidate(17, $current = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Confirmation", slots, []);
    	let disabled = true;
    	let isLoading = false;
    	let email;
    	let errorMsg;
    	let isVerfiied = false;

    	const submit = async function () {
    		if (window.location.hash) {
    			if (!$authHandler) {
    				await initAuth();
    			}

    			$authHandler.parseUrl(window.location.href, async (err, authResult) => {
    				if (err) {
    					console.log(err);
    					$$invalidate(4, errorMsg = err.message || err.errorDescription);
    					history.replaceState({}, "", "/");
    				} else {
    					if (authResult) {
    						try {
    							$$invalidate(5, isVerfiied = true);
    							set_store_value(auth0AccessToken, $auth0AccessToken = authResult.accessToken, $auth0AccessToken);
    							history.replaceState({}, "", "/");
    							saveCurrentStep(STEP_CONNECT_WALLET);
    						} catch(error) {
    							$$invalidate(4, errorMsg = errorMsgPipe(error.message));
    							$$invalidate(2, isLoading = false);
    							$$invalidate(1, disabled = false);
    						}
    					}
    				}
    			});
    		}
    	};

    	const resend = function () {
    		saveCurrentStep(transition[$current].previousStep);
    	};

    	let codes = new Array(OTP_SIZE);
    	let otpCode = "";

    	const changeHandler = function (e, i) {
    		if (clearKeyPressed(e.keyCode)) {
    			$$invalidate(0, codes[i] = "", codes);
    			focusPrevious(e);
    		} else if (leftKeyPressed(e.keyCode)) {
    			focusPrevious(e);
    		} else if (rightKeyPressed(e.keyCode)) {
    			focusNext(e);
    		} else if (digestKeyPressed(e.key)) {
    			$$invalidate(0, codes[i] = e.key, codes);
    			focusNext(e);
    		}

    		tryToEnableComfirmButton();
    	};

    	onMount(async () => {
    		document.getElementById("code0")?.focus();
    		await getEmail();
    		document.addEventListener("paste", pasteListener);
    		submit();
    	});

    	const getEmail = async () => {
    		if (getRawPair()) {
    			$$invalidate(3, email = await decrypt(getRawPair().privateKey, getRawEmail()));
    		} else {
    			console.log("key pair missed...");
    		}
    	};

    	const confirm = () => {
    		$$invalidate(2, isLoading = true);
    		$$invalidate(1, disabled = true);

    		$authHandler.login(email, codes.join(""), async (err, res) => {
    			console.log("login--", err, res);

    			if (err) {
    				if (err.description.indexOf("expired") > -1 || err.description.indexOf("maximum number") > -1) {
    					$$invalidate(4, errorMsg = err.description.split(".")[0] + ". Please try to resend again.");
    				} else {
    					$$invalidate(4, errorMsg = err.description);
    				}

    				$$invalidate(1, disabled = false);
    				$$invalidate(2, isLoading = false);
    				otpCode = "";
    			}
    		});
    	};

    	async function tryToEnableComfirmButton() {
    		if (codes.join("").length === 6) {
    			$$invalidate(1, disabled = false);
    		} else {
    			$$invalidate(1, disabled = true);
    		}
    	}

    	async function pasteListener(e) {
    		e.preventDefault();
    		const text = await navigator.clipboard.readText();

    		if ((/\d{6}/).test(text)) {
    			$$invalidate(0, codes = text.split(""));
    			tryToEnableComfirmButton();
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Confirmation> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler(each_value, i) {
    		each_value[i] = this.value;
    		$$invalidate(0, codes);
    	}

    	const keyup_handler = (i, event) => changeHandler(event, i);

    	function input_input_handler_1(each_value, i) {
    		each_value[i] = this.value;
    		$$invalidate(0, codes);
    	}

    	const input_handler = (i, event) => {
    		$$invalidate(0, codes[i] = event.data, codes);

    		if (event.inputType === "insertText") {
    			focusNext(event);
    		} else if (event.inputType === "deleteContentBackward") {
    			focusPrevious(event);
    		}

    		tryToEnableComfirmButton();
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		cryptoUtils,
    		flow,
    		current,
    		getRawEmail,
    		getRawPair,
    		auth0AccessToken,
    		authHandler,
    		initAuth,
    		errorMsgPipe,
    		disabled,
    		isLoading,
    		email,
    		errorMsg,
    		isVerfiied,
    		submit,
    		resend,
    		OTP_SIZE,
    		codes,
    		otpCode,
    		digestKeyPressed,
    		clearKeyPressed,
    		leftKeyPressed,
    		rightKeyPressed,
    		focusNext,
    		focusPrevious,
    		changeHandler,
    		getEmail,
    		confirm,
    		tryToEnableComfirmButton,
    		pasteListener,
    		isMobileChrome,
    		$authHandler,
    		$auth0AccessToken,
    		$current
    	});

    	$$self.$inject_state = $$props => {
    		if ("disabled" in $$props) $$invalidate(1, disabled = $$props.disabled);
    		if ("isLoading" in $$props) $$invalidate(2, isLoading = $$props.isLoading);
    		if ("email" in $$props) $$invalidate(3, email = $$props.email);
    		if ("errorMsg" in $$props) $$invalidate(4, errorMsg = $$props.errorMsg);
    		if ("isVerfiied" in $$props) $$invalidate(5, isVerfiied = $$props.isVerfiied);
    		if ("codes" in $$props) $$invalidate(0, codes = $$props.codes);
    		if ("otpCode" in $$props) otpCode = $$props.otpCode;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*codes*/ 1) {
    			{
    				for (const i in codes) {
    					if (!(/\d/).test(codes[i])) {
    						$$invalidate(0, codes[i] = "", codes);
    					}
    				}
    			}
    		}
    	};

    	return [
    		codes,
    		disabled,
    		isLoading,
    		email,
    		errorMsg,
    		isVerfiied,
    		resend,
    		changeHandler,
    		confirm,
    		tryToEnableComfirmButton,
    		input_input_handler,
    		keyup_handler,
    		input_input_handler_1,
    		input_handler
    	];
    }

    class Confirmation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Confirmation",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src\component\CountDown.svelte generated by Svelte v3.38.2 */
    const file$3 = "src\\component\\CountDown.svelte";

    // (1:0) <script lang="ts">import * as flow from "../common/Flow";  import * as cryptoUtils from "../common/CryptoUtils";  import { writable }
    function create_catch_block(ctx) {
    	const block = { c: noop$2, m: noop$2, p: noop$2, d: noop$2 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <script lang=\\\"ts\\\">import * as flow from \\\"../common/Flow\\\";  import * as cryptoUtils from \\\"../common/CryptoUtils\\\";  import { writable }",
    		ctx
    	});

    	return block;
    }

    // (20:34)       <div class="header">        Attestation for <scan class="subject">{email}
    function create_then_block(ctx) {
    	let div;
    	let t0;
    	let scan;
    	let t1_value = /*email*/ ctx[6] + "";
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text("Attestation for ");
    			scan = element("scan");
    			t1 = text(t1_value);
    			attr_dev(scan, "class", "subject svelte-15b8zw8");
    			add_location(scan, file$3, 21, 22, 759);
    			attr_dev(div, "class", "header svelte-15b8zw8");
    			add_location(div, file$3, 20, 4, 715);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, scan);
    			append_dev(scan, t1);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(20:34)       <div class=\\\"header\\\">        Attestation for <scan class=\\\"subject\\\">{email}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <script lang="ts">import * as flow from "../common/Flow";  import * as cryptoUtils from "../common/CryptoUtils";  import { writable }
    function create_pending_block(ctx) {
    	const block = { c: noop$2, m: noop$2, p: noop$2, d: noop$2 };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(1:0) <script lang=\\\"ts\\\">import * as flow from \\\"../common/Flow\\\";  import * as cryptoUtils from \\\"../common/CryptoUtils\\\";  import { writable }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div4;
    	let t0;
    	let div2;
    	let div0;
    	let t1;
    	let t2;
    	let div1;
    	let t4;
    	let div3;
    	let t5;
    	let scan;
    	let t6_value = /*notAfter*/ ctx[0].toString().split("GMT")[0].trim() + "";
    	let t6;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 6
    	};

    	handle_promise(/*emailPromise*/ ctx[3], info);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			info.block.c();
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			t1 = text(/*timeLeft*/ ctx[1]);
    			t2 = space();
    			div1 = element("div");
    			div1.textContent = "SECONDS";
    			t4 = space();
    			div3 = element("div");
    			t5 = text("Valid until ");
    			scan = element("scan");
    			t6 = text(t6_value);
    			attr_dev(div0, "class", "count subject svelte-15b8zw8");
    			add_location(div0, file$3, 25, 4, 847);
    			attr_dev(div1, "class", "unit svelte-15b8zw8");
    			add_location(div1, file$3, 26, 4, 896);
    			attr_dev(div2, "class", "body svelte-15b8zw8");
    			add_location(div2, file$3, 24, 2, 823);
    			attr_dev(scan, "class", "subject svelte-15b8zw8");
    			add_location(scan, file$3, 29, 16, 979);
    			attr_dev(div3, "class", "footer svelte-15b8zw8");
    			add_location(div3, file$3, 28, 2, 941);
    			attr_dev(div4, "class", "countdown svelte-15b8zw8");
    			add_location(div4, file$3, 18, 0, 650);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			info.block.m(div4, info.anchor = null);
    			info.mount = () => div4;
    			info.anchor = t0;
    			append_dev(div4, t0);
    			append_dev(div4, div2);
    			append_dev(div2, div0);
    			append_dev(div0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, t5);
    			append_dev(div3, scan);
    			append_dev(scan, t6);
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    			if (dirty & /*timeLeft*/ 2) set_data_dev(t1, /*timeLeft*/ ctx[1]);
    			if (dirty & /*notAfter*/ 1 && t6_value !== (t6_value = /*notAfter*/ ctx[0].toString().split("GMT")[0].trim() + "")) set_data_dev(t6, t6_value);
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			info.block.d();
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $currentTime;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CountDown", slots, []);
    	let { notBefore } = $$props;
    	let { notAfter } = $$props;
    	const currentTime = writable(new Date().getTime());
    	validate_store(currentTime, "currentTime");
    	component_subscribe($$self, currentTime, value => $$invalidate(5, $currentTime = value));
    	setInterval(() => currentTime.set(new Date().getTime()), 1000);
    	const emailPromise = decrypt(getRawPair().privateKey, getRawEmail());
    	let timeLeft = 0;
    	const writable_props = ["notBefore", "notAfter"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CountDown> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("notBefore" in $$props) $$invalidate(4, notBefore = $$props.notBefore);
    		if ("notAfter" in $$props) $$invalidate(0, notAfter = $$props.notAfter);
    	};

    	$$self.$capture_state = () => ({
    		flow,
    		cryptoUtils,
    		writable,
    		getRawEmail,
    		getRawPair,
    		notBefore,
    		notAfter,
    		currentTime,
    		emailPromise,
    		timeLeft,
    		$currentTime
    	});

    	$$self.$inject_state = $$props => {
    		if ("notBefore" in $$props) $$invalidate(4, notBefore = $$props.notBefore);
    		if ("notAfter" in $$props) $$invalidate(0, notAfter = $$props.notAfter);
    		if ("timeLeft" in $$props) $$invalidate(1, timeLeft = $$props.timeLeft);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*notAfter, $currentTime, timeLeft*/ 35) {
    			{
    				$$invalidate(1, timeLeft = Math.floor((notAfter.getTime() - $currentTime) / 1000));

    				if (timeLeft <= 0) {
    					current.set(start);
    				}
    			}
    		}
    	};

    	return [notAfter, timeLeft, currentTime, emailPromise, notBefore, $currentTime];
    }

    class CountDown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$4, create_fragment$4, safe_not_equal, { notBefore: 4, notAfter: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CountDown",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*notBefore*/ ctx[4] === undefined && !("notBefore" in props)) {
    			console.warn("<CountDown> was created without expected prop 'notBefore'");
    		}

    		if (/*notAfter*/ ctx[0] === undefined && !("notAfter" in props)) {
    			console.warn("<CountDown> was created without expected prop 'notAfter'");
    		}
    	}

    	get notBefore() {
    		throw new Error("<CountDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set notBefore(value) {
    		throw new Error("<CountDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get notAfter() {
    		throw new Error("<CountDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set notAfter(value) {
    		throw new Error("<CountDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\component\Final.svelte generated by Svelte v3.38.2 */
    const file$2 = "src\\component\\Final.svelte";

    // (45:0) {#if attestation}
    function create_if_block$2(ctx) {
    	let div0;
    	let t1;
    	let countdown;
    	let t2;
    	let div2;
    	let t3;
    	let div1;
    	let t4;
    	let span;
    	let current;
    	let mounted;
    	let dispose;

    	countdown = new CountDown({
    			props: {
    				notAfter: /*notAfter*/ ctx[1],
    				notBefore: /*notBefore*/ ctx[0]
    			},
    			$$inline: true
    		});

    	let if_block = window.location !== window.parent.location && !/*$sameEmail*/ ctx[2] && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "Success!";
    			t1 = space();
    			create_component(countdown.$$.fragment);
    			t2 = space();
    			div2 = element("div");
    			if (if_block) if_block.c();
    			t3 = space();
    			div1 = element("div");
    			t4 = text("Apply for an attestation again?\r\n      ");
    			span = element("span");
    			span.textContent = "Apply Now";
    			attr_dev(div0, "class", "title");
    			add_location(div0, file$2, 45, 2, 1865);
    			attr_dev(span, "href", "");
    			attr_dev(span, "class", "apply svelte-s0wz85");
    			add_location(span, file$2, 53, 6, 2156);
    			add_location(div1, file$2, 51, 4, 2104);
    			attr_dev(div2, "class", "status");
    			add_location(div2, file$2, 47, 2, 1942);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(countdown, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div2, anchor);
    			if (if_block) if_block.m(div2, null);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div1, t4);
    			append_dev(div1, span);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*apply*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const countdown_changes = {};
    			if (dirty & /*notAfter*/ 2) countdown_changes.notAfter = /*notAfter*/ ctx[1];
    			if (dirty & /*notBefore*/ 1) countdown_changes.notBefore = /*notBefore*/ ctx[0];
    			countdown.$set(countdown_changes);

    			if (window.location !== window.parent.location && !/*$sameEmail*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					if_block.m(div2, t3);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(countdown.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(countdown.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			destroy_component(countdown, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(45:0) {#if attestation}",
    		ctx
    	});

    	return block;
    }

    // (49:4) {#if window.location !== window.parent.location && !$sameEmail}
    function create_if_block_1$1(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Close";
    			add_location(button, file$2, 49, 6, 2039);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*returnAndClose*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(49:4) {#if window.location !== window.parent.location && !$sameEmail}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*attestation*/ ctx[3] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*attestation*/ ctx[3]) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $sameEmail;
    	validate_store(sameEmail, "sameEmail");
    	component_subscribe($$self, sameEmail, $$value => $$invalidate(2, $sameEmail = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Final", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	const attestation = getRawAttestation();
    	let notBefore;
    	let notAfter;

    	if (!attestation) {
    		current.set(start);
    	} else {
    		notBefore = parseAttestation(attestation.attestation).signedInfo.validity.notBefore.generalizedTime;
    		notAfter = parseAttestation(attestation.attestation).signedInfo.validity.notAfter.generalizedTime;
    	}

    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		if (window.location !== window.parent.location && $sameEmail) {
    			returnAndClose();
    		}
    	}));

    	function apply() {
    		saveCurrentStep(start);
    	}

    	function returnAndClose() {
    		parent.postMessage(
    			{
    				attestation: attestation.attestation,
    				requestSecret: hexToBigint(attestation.requestSecret),
    				display: false
    			},
    			"*"
    		);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Final> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		__awaiter,
    		flow,
    		getRawAttestation,
    		sameEmail,
    		hexToBigint,
    		parseAttestation,
    		CountDown,
    		onMount,
    		attestation,
    		notBefore,
    		notAfter,
    		apply,
    		returnAndClose,
    		$sameEmail
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("notBefore" in $$props) $$invalidate(0, notBefore = $$props.notBefore);
    		if ("notAfter" in $$props) $$invalidate(1, notAfter = $$props.notAfter);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [notBefore, notAfter, $sameEmail, attestation, apply, returnAndClose];
    }

    class Final extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Final",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\component\CurrentStep.svelte generated by Svelte v3.38.2 */

    // (21:34) 
    function create_if_block_3(ctx) {
    	let final;
    	let current;
    	final = new Final({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(final.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(final, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(final.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(final.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(final, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(21:34) ",
    		ctx
    	});

    	return block;
    }

    // (19:41) 
    function create_if_block_2(ctx) {
    	let confirmation;
    	let current;
    	confirmation = new Confirmation({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(confirmation.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(confirmation, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(confirmation.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(confirmation.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(confirmation, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(19:41) ",
    		ctx
    	});

    	return block;
    }

    // (17:40) 
    function create_if_block_1(ctx) {
    	let enteremail;
    	let current;
    	enteremail = new EnterEmail({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(enteremail.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(enteremail, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(enteremail.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(enteremail.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(enteremail, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(17:40) ",
    		ctx
    	});

    	return block;
    }

    // (15:0) {#if $current === STEP_CONNECT_WALLET}
    function create_if_block$1(ctx) {
    	let connectwallet;
    	let current;
    	connectwallet = new ConnectWallet({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(connectwallet.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(connectwallet, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(connectwallet.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(connectwallet.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(connectwallet, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(15:0) {#if $current === STEP_CONNECT_WALLET}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$1, create_if_block_1, create_if_block_2, create_if_block_3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$current*/ ctx[0] === STEP_CONNECT_WALLET) return 0;
    		if (/*$current*/ ctx[0] === STEP_ENTER_EMAIL) return 1;
    		if (/*$current*/ ctx[0] === STEP_CONFIRMATION) return 2;
    		if (/*$current*/ ctx[0] === STEP_FINAL) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $current;
    	validate_store(current, "current");
    	component_subscribe($$self, current, $$value => $$invalidate(0, $current = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("CurrentStep", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<CurrentStep> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ConnectWallet,
    		EnterEmail,
    		Confirmation,
    		Final,
    		current,
    		STEP_CONNECT_WALLET,
    		STEP_ENTER_EMAIL,
    		STEP_CONFIRMATION,
    		STEP_FINAL,
    		$current
    	});

    	return [$current];
    }

    class CurrentStep extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CurrentStep",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\component\FlowStatus.svelte generated by Svelte v3.38.2 */

    const file$1 = "src\\component\\FlowStatus.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (50:6) {#if step.verified}
    function create_if_block(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "alt", "verified");
    			if (img.src !== (img_src_value = "assets/images/verified.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "verified svelte-fc1u0h");
    			add_location(img, file$1, 50, 8, 1290);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(50:6) {#if step.verified}",
    		ctx
    	});

    	return block;
    }

    // (48:2) {#each steps as step}
    function create_each_block(ctx) {
    	let div;
    	let t0;
    	let span;
    	let t1_value = /*step*/ ctx[3].text + "";
    	let t1;
    	let t2;
    	let div_class_value;
    	let if_block = /*step*/ ctx[3].verified && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(span, "class", "svelte-fc1u0h");
    			add_location(span, file$1, 52, 6, 1383);
    			attr_dev(div, "class", div_class_value = "step " + (/*step*/ ctx[3].active ? "active" : "") + " short" + " svelte-fc1u0h");
    			add_location(div, file$1, 48, 4, 1199);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(span, t1);
    			append_dev(div, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (/*step*/ ctx[3].verified) {
    				if (if_block) ; else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(div, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*steps*/ 1 && t1_value !== (t1_value = /*step*/ ctx[3].text + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*steps*/ 1 && div_class_value !== (div_class_value = "step " + (/*step*/ ctx[3].active ? "active" : "") + " short" + " svelte-fc1u0h")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(48:2) {#each steps as step}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let each_value = /*steps*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "steps svelte-fc1u0h");
    			add_location(div, file$1, 46, 0, 1149);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*steps*/ 1) {
    				each_value = /*steps*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $current;
    	validate_store(current, "current");
    	component_subscribe($$self, current, $$value => $$invalidate(1, $current = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("FlowStatus", slots, []);

    	const steps = [
    		{
    			id: STEP_ENTER_EMAIL,
    			text: "Email",
    			verified: false,
    			active: false
    		},
    		{
    			id: STEP_CONFIRMATION,
    			text: "Confirm",
    			verified: false,
    			active: false
    		},
    		{
    			id: STEP_CONNECT_WALLET,
    			text: "Connect",
    			verified: false,
    			active: false
    		},
    		{
    			id: STEP_FINAL,
    			text: "Finish",
    			verified: false,
    			active: false
    		}
    	];

    	const refreshProcessList = function (step) {
    		const index = steps.findIndex(item => item.id === step);

    		if (index > -1) {
    			for (let i = 0; i < steps.length; i++) {
    				if (i < index) {
    					$$invalidate(0, steps[i].verified = true, steps);
    				} else {
    					$$invalidate(0, steps[i].verified = false, steps);
    				}

    				$$invalidate(0, steps[i].active = false, steps);
    			}

    			$$invalidate(0, steps[index].active = true, steps);
    		}

    		return steps;
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<FlowStatus> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		current,
    		STEP_CONFIRMATION,
    		STEP_CONNECT_WALLET,
    		STEP_ENTER_EMAIL,
    		STEP_FINAL,
    		steps,
    		refreshProcessList,
    		$current
    	});

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$current*/ 2) {
    			refreshProcessList($current);
    		}
    	};

    	return [steps, $current];
    }

    class FlowStatus extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FlowStatus",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src\App.svelte generated by Svelte v3.38.2 */

    const { console: console_1 } = globals;
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let main;
    	let flowstatus;
    	let t;
    	let currentstep;
    	let current;
    	flowstatus = new FlowStatus({ $$inline: true });
    	currentstep = new CurrentStep({ $$inline: true });

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(flowstatus.$$.fragment);
    			t = space();
    			create_component(currentstep.$$.fragment);
    			add_location(main, file, 107, 0, 4208);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(flowstatus, main, null);
    			append_dev(main, t);
    			mount_component(currentstep, main, null);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(flowstatus.$$.fragment, local);
    			transition_in(currentstep.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(flowstatus.$$.fragment, local);
    			transition_out(currentstep.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(flowstatus);
    			destroy_component(currentstep);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function reply(message) {
    	parent.postMessage(message, "*");
    }

    function removeEventListenerAnyway() {
    	window.removeEventListener("message", null);
    }

    function instance($$self, $$props, $$invalidate) {
    	let $providerName;
    	let $requestEmail;
    	let $sameEmail;
    	validate_store(providerName, "providerName");
    	component_subscribe($$self, providerName, $$value => $$invalidate(2, $providerName = $$value));
    	validate_store(requestEmail, "requestEmail");
    	component_subscribe($$self, requestEmail, $$value => $$invalidate(3, $requestEmail = $$value));
    	validate_store(sameEmail, "sameEmail");
    	component_subscribe($$self, sameEmail, $$value => $$invalidate(4, $sameEmail = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let attestation;
    	let attestationExpired;

    	onMount(() => {
    		clearWhenAttestationExpired();
    		registerEventListenerWhenCreatedByIntegration();
    		initAuth();
    	});

    	onDestroy(() => {
    		removeEventListenerAnyway();
    	});

    	function clearWhenAttestationExpired() {
    		attestation = getRawAttestation();

    		if (attestation) {
    			const myAttestation = parseAttestation(attestation.attestation);
    			console.log(myAttestation);
    			attestationExpired = expired(myAttestation);

    			if (attestationExpired) {
    				console.error("attestation is expired, please apply a new one.");
    				clearAttestation();
    			}
    		}
    	}

    	function registerEventListenerWhenCreatedByIntegration() {
    		if (window.location !== window.parent.location) {
    			window.addEventListener(
    				"message",
    				event => {
    					if (event.data.force) {
    						clearAll();
    						reply({ display: true });
    					} else if (event.data.force === false) {
    						tryToReturnAttestation(event.data);
    					}
    				},
    				false
    			);

    			reply({ ready: true });
    		}
    	}

    	const tryToReturnAttestation = function (data) {
    		return __awaiter(this, void 0, void 0, function* () {
    			if (data.debug) {
    				console.log("attestation.id postMessage data received: ", data);
    			}

    			if (data.providerName) {
    				set_store_value(providerName, $providerName = data.providerName, $providerName);
    			}

    			let address = getRawCurrentAccount();

    			if (data.email) {
    				// moved up to always set $requestEmail
    				// we have to set $requestEmail because if attestation expired then we require filled email
    				set_store_value(requestEmail, $requestEmail = data.email, $requestEmail);

    				const savedEmail = yield getCurrentEmail();

    				if (data.email === savedEmail) {
    					set_store_value(sameEmail, $sameEmail = true, $sameEmail);
    				}

    				if (!$sameEmail || data.address && address && data.address.toLowerCase() !== address.toLowerCase()) {
    					clearAttestation();
    					reply({ display: true });

    					// refresh $requestEmail to force sumbit event
    					set_store_value(requestEmail, $requestEmail = "", $requestEmail);

    					set_store_value(requestEmail, $requestEmail = data.email, $requestEmail);
    					return;
    				}
    			}

    			if (!attestation || attestationExpired) {
    				console.log("!attestation || attestationExpired");
    				reply({ display: true });
    			} else {
    				reply({
    					attestation: attestation.attestation,
    					requestSecret: hexToBigint(attestation.requestSecret),
    					display: false
    				});
    			}
    		});
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		__awaiter,
    		hexToBigint,
    		onDestroy,
    		onMount,
    		parseAttestation,
    		expired,
    		clearAll,
    		clearAttestation,
    		getCurrentEmail,
    		getRawAttestation,
    		getRawCurrentAccount,
    		providerName,
    		requestEmail,
    		sameEmail,
    		initAuth,
    		CurrentStep,
    		FlowStatus,
    		attestation,
    		attestationExpired,
    		clearWhenAttestationExpired,
    		registerEventListenerWhenCreatedByIntegration,
    		tryToReturnAttestation,
    		reply,
    		removeEventListenerAnyway,
    		$providerName,
    		$requestEmail,
    		$sameEmail
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("attestation" in $$props) attestation = $$props.attestation;
    		if ("attestationExpired" in $$props) attestationExpired = $$props.attestationExpired;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body,
        props: {},
    });

    return app;

}(WalletConnectProvider, Web3Modal));
//# sourceMappingURL=bundle.js.map
